<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TodoMVC应用</title>
    <url>/20200528/todomvc%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>使用VueJs实现官方的 <a href="http://todomvc.com/" target="_blank" rel="noopener">TodoMVC</a> 示例，将其数据存储到后端数据库，并部署上线。<br><a href="https://vuejs.org/v2/examples/todomvc.html" target="_blank" rel="noopener">示例</a></p>
<a id="more"></a>

<ul>
<li><a href="https://github.com/nsleep/todomvc" target="_blank" rel="noopener">我的项目地址</a></li>
<li><a href="https://simon-todomvc.herokuapp.com/" target="_blank" rel="noopener">我的演示</a></li>
</ul>
<blockquote>
<p>环境 Git、Node、npm、heroku</p>
</blockquote>
<h1 id="一、-TodoMVC-应用"><a href="#一、-TodoMVC-应用" class="headerlink" title="一、 TodoMVC 应用"></a>一、 TodoMVC 应用</h1><h2 id="1-下载模板"><a href="#1-下载模板" class="headerlink" title="1. 下载模板"></a>1. 下载模板</h2><p>GitHub<a href="https://github.com/tastejs/todomvc-app-template" target="_blank" rel="noopener">下载</a>模板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:tastejs/todomvc-app-template.git</span><br></pre></td></tr></table></figure>

<h2 id="2-获取支持文件"><a href="#2-获取支持文件" class="headerlink" title="2. 获取支持文件"></a>2. 获取支持文件</h2><p>通过<code>npm</code>下载模板的CSS和JS文件，以及之后要用到的<code>Vue.js</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> todomvc-app-template</span><br><span class="line">npm install</span><br><span class="line">npm install vue</span><br></pre></td></tr></table></figure>

<h2 id="3-使用Vuejs实现Todo"><a href="#3-使用Vuejs实现Todo" class="headerlink" title="3. 使用Vuejs实现Todo"></a>3. 使用Vuejs实现Todo</h2><p>主要修改<code>js/app.js</code>和<code>index.html</code>两个文件。</p>
<figure class="highlight javascript"><figcaption><span>js/app.js</span></figcaption><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">let</span> todos=[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">'吃饭'</span>,<span class="attr">completed</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">title</span>:<span class="string">'睡觉'</span>,<span class="attr">completed</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">title</span>:<span class="string">'打豆豆'</span>,<span class="attr">completed</span>:<span class="literal">true</span>&#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">/*/ 全局自定义指令,自动获取焦点</span></span><br><span class="line"><span class="comment">    Vue.directive('focus', &#123;</span></span><br><span class="line"><span class="comment">        inserted: function (el) &#123;</span></span><br><span class="line"><span class="comment">              el.focus();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// vue实例</span></span><br><span class="line">    <span class="built_in">window</span>.app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#todoapp'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            todos:todos,</span><br><span class="line">            currentEditing:<span class="literal">null</span>,</span><br><span class="line">            filterState:<span class="string">'all'</span>,</span><br><span class="line">            toggleAllstate:<span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            leftCount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">item</span> =&gt;</span> !item.completed).length</span><br><span class="line">            &#125;,</span><br><span class="line">            filterTodos:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">switch</span>(<span class="keyword">this</span>.filterState)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'active'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">item</span>=&gt;</span>!item.completed);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'completed'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.completed);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.todos;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 全选的联动效果</span></span><br><span class="line">            toggleState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.todos.every(<span class="function"><span class="params">item</span>=&gt;</span>item.completed);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            <span class="comment">// 添加任务</span></span><br><span class="line">            addTodo(event)&#123;</span><br><span class="line">                <span class="keyword">let</span> todoText=event.target.value.trim();</span><br><span class="line">                <span class="keyword">if</span>(!todoText.length)&#123;</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">const</span> lastTodo=<span class="keyword">this</span>.todos[<span class="keyword">this</span>.todos.length<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">const</span> id=lastTodo?lastTodo.id+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">this</span>.todos.push(&#123;</span><br><span class="line">                    id:id,</span><br><span class="line">                    title:todoText,</span><br><span class="line">                    completed:<span class="literal">false</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">                event.target.value=<span class="string">''</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 点击全部完成或者未完成</span></span><br><span class="line">            toggleAll(event)&#123;</span><br><span class="line">                <span class="keyword">let</span> checked=event.target.checked;</span><br><span class="line">                <span class="keyword">this</span>.todos.forEach(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed=checked);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 删除单个任务项</span></span><br><span class="line">            removeTodo(delIndex,event)&#123;</span><br><span class="line">                <span class="keyword">this</span>.todos.splice(delIndex,<span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 显示所有未完成任务数(删除所有已完成)</span></span><br><span class="line">            removeAllDone()&#123;</span><br><span class="line">                <span class="keyword">this</span>.todos=<span class="keyword">this</span>.todos.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> !item.completed;<span class="comment">//return true,即item.completed为false</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 保存编辑项</span></span><br><span class="line">            saveEdit(item,index,event)&#123;</span><br><span class="line">                <span class="keyword">var</span> editText=event.target.value.trim();</span><br><span class="line">                <span class="comment">// 如果为空,直接删除这个item</span></span><br><span class="line">                <span class="keyword">if</span>(!editText.length)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.todos.splice(index,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果不为空,修改title的值,然后去除eiditing样式</span></span><br><span class="line">                item.title=editText;</span><br><span class="line">                <span class="keyword">this</span>.currentEditing=<span class="literal">null</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        directives:&#123;</span><br><span class="line">            <span class="comment">// 局部自定义属性</span></span><br><span class="line">            editingFocus:&#123;</span><br><span class="line">                update(el,binding)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(binding.value)&#123;</span><br><span class="line">                        el.focus();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            focus:&#123;</span><br><span class="line">                inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">                      el.focus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 路由状态切换</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash=<span class="built_in">window</span>.location.hash.substr(<span class="number">2</span>) || <span class="string">'all'</span>;</span><br><span class="line">        <span class="built_in">window</span>.app.filterState=hash;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 页面第一次进来,保持状态</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange();</span><br><span class="line">&#125;)(Vue);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Template • TodoMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-common/base.css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-app-css/index.css"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- CSS overrides - remove if you don't need it --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/app.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"todoapp"</span> <span class="attr">class</span>=<span class="string">"todoapp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> @<span class="attr">keyup.enter</span>=<span class="string">'addTodo'</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">'todos.length'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toggle-all"</span> <span class="attr">class</span>=<span class="string">"toggle-all"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> @<span class="attr">click</span>=<span class="string">'toggleAll'</span> <span class="attr">v-bind:checked</span>=<span class="string">'toggleState'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- These are here just to show the structure of the list items --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- vue列表渲染 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) of filterTodos"</span> <span class="attr">v-bind:class</span>=<span class="string">'&#123;completed:item.completed,editing:item===currentEditing&#125;'</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">'item.completed'</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> @<span class="attr">dblclick</span>=<span class="string">"currentEditing=item"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">'removeTodo(index,$event)'</span> &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">:value</span>=<span class="string">'item.title'</span> @<span class="attr">blur</span>=<span class="string">'saveEdit(item,index,$event)'</span> @<span class="attr">keyup.enter</span>=<span class="string">'saveEdit(item,index,$event)'</span> @<span class="attr">keyup.esc</span>=<span class="string">'currentEditing=null'</span> <span class="attr">v-editing-focus</span>=<span class="string">"item===currentEditing"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- This footer should hidden by default and shown when there are todos --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- This should be `0 items left` by default --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;leftCount&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 个待办<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Remove this if you don't implement routing --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:filterState==='all'&#125;"</span> <span class="attr">href</span>=<span class="string">"#/"</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:filterState==='active'&#125;"</span> <span class="attr">href</span>=<span class="string">"#/active"</span>&gt;</span>未完成<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:filterState==='completed'&#125;"</span> <span class="attr">href</span>=<span class="string">"#/completed"</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Hidden if no completed items are left ↓ --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> @<span class="attr">click</span>=<span class="string">'removeAllDone'</span>&gt;</span>清除已完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Double-click to edit a todo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Remove the below line ↓ -- &gt;</span></span><br><span class="line"><span class="comment">			&lt;p&gt;Template by &lt;a href="http://sindresorhus.com"&gt;Sindre Sorhus&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">			&lt;!-- Change this out with your name and url ↓ -- &gt;</span></span><br><span class="line"><span class="comment">			&lt;p&gt;Created by &lt;a href="http://todomvc.com"&gt;you&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">			&lt;p&gt;Part of &lt;a href="http://todomvc.com"&gt;TodoMVC&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">			&lt;!--  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Scripts here. Don't remove ↓ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/todomvc-common/base.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此，完成了本地Todo。</p>
<h2 id="4-配置本地服务"><a href="#4-配置本地服务" class="headerlink" title="4. 配置本地服务"></a>4. 配置本地服务</h2><p>由于要在<code>heroku</code>上部署，这一节将使用<code>Node</code>创建<code>Web</code>服务。本节有一部分参考<a href="https://github.com/heroku/node-js-getting-started.git" target="_blank" rel="noopener">heroku的项目</a>，使用的是 Web 开发框架<a href="https://www.expressjs.com.cn/" target="_blank" rel="noopener">Express</a> </p>
<p>通过<code>npm</code>下载<code>express</code>和<code>ejs</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express</span><br><span class="line">npm install ejs</span><br></pre></td></tr></table></figure>

<p>在项目根目录下添加<code>index.js</code>。</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">5000</span></span><br><span class="line">express()</span><br><span class="line">  .use(express.static(path.join(__dirname, <span class="string">'.'</span>)))</span><br><span class="line">  .set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>))</span><br><span class="line">  .get(<span class="string">'/'</span>, (req, res) =&gt; res.render(<span class="string">'index'</span>))</span><br><span class="line">  .listen(PORT, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Listening on <span class="subst">$&#123; PORT &#125;</span>`</span>))</span><br></pre></td></tr></table></figure>

<p>尝试执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure>

<p>显示</p>
<pre><code>Listening on 5000</code></pre><p>打开 <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a>或者<a href="http://127.0.0.1:5000" target="_blank" rel="noopener">http://127.0.0.1:5000</a>访问本地服务，使用本地IP也是可以的。</p>
<h2 id="5-部署到heroku"><a href="#5-部署到heroku" class="headerlink" title="5. 部署到heroku"></a>5. 部署到heroku</h2><p>部署之前需要在项目根目录添加一个文件<code>Procfile</code></p>
<figure class="highlight bash"><figcaption><span>Procfile</span></figcaption><table><tr><td class="code"><pre><span class="line">web: node index.js</span><br></pre></td></tr></table></figure>

<h3 id="1-通过GitHub部署"><a href="#1-通过GitHub部署" class="headerlink" title="1). 通过GitHub部署"></a>1). 通过GitHub部署</h3><p>先上传到<code>Github</code>，然后登录<a href="https://dashboard.heroku.com/apps" target="_blank" rel="noopener">heroku网站</a>在 web控制台配置里配置即可。</p>
<h3 id="2-直接在本地上传部署"><a href="#2-直接在本地上传部署" class="headerlink" title="2). 直接在本地上传部署"></a>2). 直接在本地上传部署</h3><p>下载<a href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install" target="_blank" rel="noopener">Heroku CLI</a></p>
<figure class="highlight bash"><figcaption><span>Windows命令</span></figcaption><table><tr><td class="code"><pre><span class="line">heroku create ::创建</span><br><span class="line">git push heroku master ::部署</span><br><span class="line">heroku ps:scale web=1 ::运行实例</span><br><span class="line">heroku open ::打开预览</span><br><span class="line">heroku logs --tail ::网站运行日志</span><br></pre></td></tr></table></figure>

<p>其他可能用到的</p>
<figure class="highlight bash"><figcaption><span>Windows命令</span></figcaption><table><tr><td class="code"><pre><span class="line">heroku <span class="built_in">local</span> web ::本地启动</span><br><span class="line"></span><br><span class="line">git add -u</span><br><span class="line">git commit -m  <span class="string">"Todo"</span></span><br><span class="line">git push heroku master</span><br></pre></td></tr></table></figure>

<h2 id="6-后端数据库"><a href="#6-后端数据库" class="headerlink" title="6. 后端数据库"></a>6. 后端数据库</h2><p>在这里使用的<code>postgresql</code>数据库。在<code>heroku</code>中添加<code>postgresql</code>数据库。<a href="https://elements.heroku.com/addons/heroku-postgresql" target="_blank" rel="noopener">查看文档</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku addons:create heroku-postgresql:hobby-dev</span><br></pre></td></tr></table></figure>

<p>查看数据库(postgresql)。通过以下两种方式之一检索PG连接字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku pg:credentials DATABASE</span><br><span class="line">heroku config -s | grep DATABASE_URL</span><br></pre></td></tr></table></figure>

<p>设置主数据库(postgresql)，如果存在多个数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku pg:promote HEROKU_POSTGRESQL_RED</span><br></pre></td></tr></table></figure>

<p>查看数据库使用信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku pg:info</span><br></pre></td></tr></table></figure>

<h2 id="7-封装对postgresql的增删改查基本操作"><a href="#7-封装对postgresql的增删改查基本操作" class="headerlink" title="7. 封装对postgresql的增删改查基本操作"></a>7. 封装对postgresql的增删改查基本操作</h2><ul>
<li><a href="https://blog.csdn.net/cheneypao/article/details/51378053" target="_blank" rel="noopener">Nodejs对postgresql基本操作的封装·cheneypao·CSDN</a></li>
</ul>
<figure class="highlight javascript"><figcaption><span>PG.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pg = <span class="built_in">require</span>(<span class="string">'pg'</span>);</span><br><span class="line"><span class="keyword">var</span> conString = <span class="string">"postgres://username:password@localhost/databasename"</span>;</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> pg.Client(conString);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> PG = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"准备向****数据库连接..."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">PG.prototype.getConnection = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    client.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'could not connect to postgres'</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        client.query(<span class="string">'SELECT NOW() AS "theTime"'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'error running query'</span>, err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"hbdfxt数据库连接成功..."</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 查询函数</span></span><br><span class="line"><span class="comment">//@param str 查询语句</span></span><br><span class="line"><span class="comment">//@param value 相关值</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line"><span class="keyword">var</span> clientHelper = <span class="function"><span class="keyword">function</span>(<span class="params">str,value,cb</span>)</span>&#123;</span><br><span class="line">    client.query(str,value,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            cb(<span class="string">"err"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.rows != <span class="literal">undefined</span>)</span><br><span class="line">                cb(result.rows);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cb();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param fields 更新的字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.save = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,fields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"insert into "</span>+tablename+<span class="string">"("</span>;</span><br><span class="line">    <span class="keyword">var</span> field = [];</span><br><span class="line">    <span class="keyword">var</span> value = [];</span><br><span class="line">    <span class="keyword">var</span> num = [];</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(i);</span><br><span class="line">        value.push(fields[i]);</span><br><span class="line">        num.push(<span class="string">"$"</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">","</span>) +<span class="string">") values("</span>+num.join(<span class="string">","</span>)+<span class="string">")"</span>;</span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param fields 条件字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,fields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"delete from "</span>+tablename+<span class="string">" where "</span>;</span><br><span class="line">    <span class="keyword">var</span> field = [];</span><br><span class="line">    <span class="keyword">var</span> value = [];</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(i+<span class="string">"=$"</span> +count);</span><br><span class="line">        value.push(fields[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">" and "</span>);</span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param mainfields 条件字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param fields 更新的字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,mainfields,fields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"update "</span>+tablename+<span class="string">" set "</span>;</span><br><span class="line">    <span class="keyword">var</span> field = [];</span><br><span class="line">    <span class="keyword">var</span> value = [];</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(i+<span class="string">"=$"</span>+count);</span><br><span class="line">        value.push(fields[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">","</span>) +<span class="string">" where "</span>;</span><br><span class="line">    field = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> mainfields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(j+<span class="string">"=$"</span>+count);</span><br><span class="line">        value.push(mainfields[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">" and "</span>);</span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param fields 条件字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param returnfields 返回字段</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.select = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,fields,returnfields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> returnStr = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(returnfields.length == <span class="number">0</span>)</span><br><span class="line">        returnStr = <span class="string">'*'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        returnStr= returnfields.join(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"select "</span>+returnStr+ <span class="string">" from "</span>+tablename+<span class="string">" where "</span>;</span><br><span class="line">    <span class="keyword">var</span> field = [];</span><br><span class="line">    <span class="keyword">var</span> value = [];</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(i+<span class="string">"=$"</span>+count);</span><br><span class="line">        value.push(fields[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">" and "</span>);</span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> PG();</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pgclient = <span class="built_in">require</span>(<span class="string">'./PG.js'</span>);<span class="comment">// 引用上述文件</span></span><br><span class="line">pgclient.getConnection();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用上述四个函数即可</span></span><br><span class="line">pgclient.save(<span class="string">'userinfo'</span>,&#123;<span class="string">'name'</span>: admin&#125;,cb);</span><br></pre></td></tr></table></figure>

<div class="note warning">
            <p>创建数据库表可以在<code>PG.js</code>中完善。</p>
          </div>


<h2 id="8-后续"><a href="#8-后续" class="headerlink" title="8. 后续"></a>8. 后续</h2><p>以上的代码并不符合我的预期，在之后我对代码稍作修改。</p>
<details>
<summary>js/app.js(折叠)</summary>
<blockquote>

<figure class="highlight javascript"><figcaption><span>js/app.js</span></figcaption><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> todos=[];</span><br><span class="line">    <span class="comment">// vue实例</span></span><br><span class="line">    <span class="built_in">window</span>.app=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">'#todoapp'</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            todos: todos,</span><br><span class="line">            currentEditing:<span class="literal">null</span>,</span><br><span class="line">            filterState:<span class="string">'all'</span>,</span><br><span class="line">            toggleAllstate:<span class="literal">true</span>,</span><br><span class="line">            owner:<span class="string">''</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// this.getTodo();</span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            leftCount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">item</span> =&gt;</span> !item.completed).length</span><br><span class="line">            &#125;,</span><br><span class="line">            filterTodos:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">switch</span>(<span class="keyword">this</span>.filterState)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'active'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">item</span>=&gt;</span>!item.completed);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'completed'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.completed);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.todos;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 全选的联动效果</span></span><br><span class="line">            toggleState:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.todos.every(<span class="function"><span class="params">item</span>=&gt;</span>item.completed);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getTodo()&#123;</span><br><span class="line">                <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                   method:<span class="string">'get'</span>,</span><br><span class="line">                    url:<span class="string">'/getTodo'</span>,</span><br><span class="line">                    params: <span class="keyword">this</span>.owner,</span><br><span class="line">                &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                    <span class="comment">//console.log(res);</span></span><br><span class="line">                    _this.todos=[];</span><br><span class="line">                    res.data.forEach( <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">                        _this.todos.push(&#123;</span><br><span class="line">                            id:index+<span class="number">1</span>,</span><br><span class="line">                            title:item.title,</span><br><span class="line">                            completed:item.completed</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'获取数据库的Todos：\n'</span>,res.data);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'_this.todos：\n'</span>,_this.todos);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 设置Owner</span></span><br><span class="line">            setOwner(event)&#123;</span><br><span class="line">                <span class="keyword">let</span> ownerText=event.target.value.trim();<span class="comment">//当前文本的值</span></span><br><span class="line">                <span class="keyword">if</span>(!ownerText.length)<span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">this</span>.owner = ownerText;</span><br><span class="line">                <span class="keyword">this</span>.todos=[];</span><br><span class="line">                <span class="keyword">this</span>.getTodo();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 添加任务</span></span><br><span class="line">            addTodo(event)&#123;</span><br><span class="line">                <span class="keyword">let</span> todoText=event.target.value.trim();<span class="comment">//当前文本的值</span></span><br><span class="line">                <span class="keyword">if</span>(!todoText.length)<span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">const</span> lastTodo=<span class="keyword">this</span>.todos[<span class="keyword">this</span>.todos.length<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">const</span> id=lastTodo?lastTodo.id+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">this</span>.todos.push(&#123;</span><br><span class="line">                    id:id,</span><br><span class="line">                    title:todoText,</span><br><span class="line">                    completed:<span class="literal">false</span>,</span><br><span class="line">                    <span class="comment">//owner: this.owner</span></span><br><span class="line">                &#125;);</span><br><span class="line">                axios(&#123;</span><br><span class="line">                   method:<span class="string">'get'</span>,</span><br><span class="line">                    url:<span class="string">'/addTodo'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        title:todoText,</span><br><span class="line">                        completed:<span class="literal">false</span>,</span><br><span class="line">                        owner: <span class="keyword">this</span>.owner,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">                event.target.value=<span class="string">''</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 全部完成/全不完成</span></span><br><span class="line">            toggleAll(event)&#123;</span><br><span class="line">                <span class="keyword">let</span> checked=event.target.checked</span><br><span class="line">                <span class="keyword">this</span>.todos.forEach(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed=checked)</span><br><span class="line">                axios(&#123;</span><br><span class="line">                   method:<span class="string">'get'</span>,</span><br><span class="line">                    url:<span class="string">'/toggleAll'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        completed: checked,</span><br><span class="line">                        owner: <span class="keyword">this</span>.owner,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// check单个任务项</span></span><br><span class="line">            checkTodo(index,event)&#123;</span><br><span class="line">                <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">                <span class="keyword">let</span> todo = <span class="keyword">this</span>.todos[index]</span><br><span class="line">                <span class="comment">// todo.completed = !(todo.completed)</span></span><br><span class="line">                axios(&#123;</span><br><span class="line">                   method:<span class="string">'get'</span>,</span><br><span class="line">                    url:<span class="string">'/changeTodo'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        filter:&#123;</span><br><span class="line">                            title: todo.title,</span><br><span class="line">                            owner: _this.owner,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        data:&#123;</span><br><span class="line">                            completed: !todo.completed,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;_this.getTodo()&#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 删除单个任务项</span></span><br><span class="line">            removeTodo(delIndex,event)&#123;</span><br><span class="line">                <span class="keyword">let</span> data = <span class="keyword">this</span>.todos.splice(delIndex,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">                axios(&#123;</span><br><span class="line">                   method:<span class="string">'get'</span>,</span><br><span class="line">                    url:<span class="string">'/removeTodo'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        title:data.title,</span><br><span class="line">                        completed:data.completed,</span><br><span class="line">                        owner: _this.owner,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;_this.getTodo()&#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 显示所有未完成任务数(删除所有已完成)</span></span><br><span class="line">            removeAllDone()&#123;</span><br><span class="line">                <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">this</span>.todos=<span class="keyword">this</span>.todos.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> !item.completed;<span class="comment">//return true,即item.completed为false</span></span><br><span class="line">                &#125;);</span><br><span class="line">                axios(&#123;</span><br><span class="line">                   method:<span class="string">'get'</span>,</span><br><span class="line">                    url:<span class="string">'/removeTodo'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        completed:<span class="literal">true</span>,</span><br><span class="line">                        owner: _this.owner,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 保存编辑项</span></span><br><span class="line">            saveEdit(item,index,event)&#123;</span><br><span class="line">                <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">var</span> editText=event.target.value.trim();</span><br><span class="line">                <span class="comment">// 如果为空,直接删除这个item</span></span><br><span class="line">                <span class="keyword">if</span>(!editText.length)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.removeTodo(index,event)</span><br><span class="line">                    <span class="comment">//return this.todos.splice(index,1);</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果不为空,修改title的值,然后去除eiditing样式</span></span><br><span class="line">                axios(&#123;</span><br><span class="line">                   method:<span class="string">'get'</span>,</span><br><span class="line">                    url:<span class="string">'/changeTodo'</span>,</span><br><span class="line">                    params: &#123;</span><br><span class="line">                        data:&#123;</span><br><span class="line">                            editText:editText,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        filter:&#123;</span><br><span class="line">                            title:item.title,</span><br><span class="line">                            owner: _this.owner,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;)</span><br><span class="line">                item.title=editText;</span><br><span class="line">                <span class="keyword">this</span>.currentEditing=<span class="literal">null</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        directives:&#123;</span><br><span class="line">            <span class="comment">// 局部自定义属性</span></span><br><span class="line">            editingFocus:&#123;</span><br><span class="line">                update(el,binding)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(binding.value)&#123;</span><br><span class="line">                        el.focus();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            focus:&#123;</span><br><span class="line">                inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">                      el.focus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 路由状态切换</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash=<span class="built_in">window</span>.location.hash.substr(<span class="number">2</span>) || <span class="string">'all'</span>;</span><br><span class="line">        <span class="built_in">window</span>.app.filterState=hash;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 页面第一次进来,保持状态</span></span><br><span class="line">    <span class="built_in">window</span>.onhashchange();</span><br><span class="line">&#125;)(Vue);</span><br></pre></td></tr></table></figure>
</blockquote>
</details>

<details>
<summary>index.html (折叠)</summary>
<blockquote>

<figure class="highlight html"><figcaption><span>index.html </span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Template • TodoMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-common/base.css"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-app-css/index.css"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- CSS overrides - remove if you don't need it --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/app.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"todoapp"</span> <span class="attr">class</span>=<span class="string">"todoapp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"你的名字"</span> <span class="attr">style</span>=<span class="string">"display: table-cell;width: 40%;padding: 6px 12px;color: #555;background-color: #fff;border: 1px solid #ccc;box-shadow: inset 0 1px 1px rgba(0,0,0,.075);font-size: 30px;top: -12px;"</span> @<span class="attr">keyup.enter</span>=<span class="string">'setOwner'</span> &gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> @<span class="attr">keyup.enter</span>=<span class="string">'addTodo'</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">'todos.length'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toggle-all"</span> <span class="attr">class</span>=<span class="string">"toggle-all"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> @<span class="attr">click</span>=<span class="string">'toggleAll'</span> <span class="attr">v-bind:checked</span>=<span class="string">'toggleState'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"toggle-all"</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- These are here just to show the structure of the list items --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- vue列表渲染 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) of filterTodos"</span> <span class="attr">v-bind:class</span>=<span class="string">'&#123;completed:item.completed,editing:item===currentEditing&#125;'</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> @<span class="attr">click</span>=<span class="string">'checkTodo(index,$event)'</span> <span class="attr">v-model</span>=<span class="string">'item.completed'</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span> @<span class="attr">dblclick</span>=<span class="string">"currentEditing=item"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">'removeTodo(index,$event)'</span> &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">:value</span>=<span class="string">'item.title'</span> @<span class="attr">blur</span>=<span class="string">'saveEdit(item,index,$event)'</span> @<span class="attr">keyup.enter</span>=<span class="string">'saveEdit(item,index,$event)'</span> @<span class="attr">keyup.esc</span>=<span class="string">'currentEditing=null'</span> <span class="attr">v-editing-focus</span>=<span class="string">"item===currentEditing"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- This footer should hidden by default and shown when there are todos --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- This should be `0 items left` by default --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;leftCount&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 个待办<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Remove this if you don't implement routing --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:filterState==='all'&#125;"</span> <span class="attr">href</span>=<span class="string">"#/"</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:filterState==='active'&#125;"</span> <span class="attr">href</span>=<span class="string">"#/active"</span>&gt;</span>未完成<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">"&#123;selected:filterState==='completed'&#125;"</span> <span class="attr">href</span>=<span class="string">"#/completed"</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Hidden if no completed items are left ↓ --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> @<span class="attr">click</span>=<span class="string">'removeAllDone'</span>&gt;</span>清除已完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Double-click to edit a todo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Remove the below line ↓ -- &gt;</span></span><br><span class="line"><span class="comment">			&lt;p&gt;Template by &lt;a href="http://sindresorhus.com"&gt;Sindre Sorhus&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">			&lt;!-- Change this out with your name and url ↓ -- &gt;</span></span><br><span class="line"><span class="comment">			&lt;p&gt;Created by &lt;a href="http://todomvc.com"&gt;you&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">			&lt;p&gt;Part of &lt;a href="http://todomvc.com"&gt;TodoMVC&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">			&lt;!--  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Scripts here. Don't remove ↓ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/todomvc-common/base.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</details>

<details>
<summary>index.js(折叠)</summary>
<blockquote>

<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tableNme = <span class="string">'todos'</span></span><br><span class="line"><span class="keyword">var</span> cb=<span class="built_in">console</span>.log;</span><br><span class="line"><span class="keyword">var</span> pgclient = <span class="built_in">require</span>(<span class="string">'./PG.js'</span>);<span class="comment">// 引用文件</span></span><br><span class="line">pgclient.getConnection();</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'.'</span>)))</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>))</span><br><span class="line">app</span><br><span class="line">    .get(<span class="string">'/'</span>, (req, res) =&gt; res.render(<span class="string">'index'</span>))</span><br><span class="line">    .get(<span class="string">'/getTodo'</span>,  (req, res) =&gt; &#123; <span class="comment">//async</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fields:'</span>,req.query[<span class="number">0</span>])</span><br><span class="line">        pgclient.select(tableNme,&#123;<span class="attr">owner</span>:req.query[<span class="number">0</span>]&#125;,[<span class="string">'title'</span>,<span class="string">'completed'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;res.json(result)&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="string">'/addTodo'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'addTodo'</span>,req.query)</span><br><span class="line">        pgclient.save(tableNme,&#123;<span class="attr">title</span>:req.query.title,<span class="attr">completed</span>:req.query.completed,<span class="attr">owner</span>:req.query.owner&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(res)&#125;)</span><br><span class="line">        pgclient.query(<span class="string">'select * from todos'</span>,<span class="string">''</span>,cb)</span><br><span class="line">        res.json()</span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="string">'/toggleAll'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'toggleAll'</span>,req.query)</span><br><span class="line">        pgclient.update(tableNme,&#123;<span class="attr">owner</span>:req.query.owner&#125;,&#123;<span class="attr">completed</span>:req.query.completed&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(res)&#125;)</span><br><span class="line">        pgclient.query(<span class="string">'select * from todos'</span>,<span class="string">''</span>,cb)</span><br><span class="line">        res.json()</span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="string">'/removeTodo'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'removeTodo:'</span>,req.query)</span><br><span class="line">        pgclient.remove(tableNme,&#123;<span class="attr">title</span>: req.query.title, <span class="attr">completed</span>: req.query.completed, <span class="attr">owner</span>: req.query.owner&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(res)&#125;)</span><br><span class="line">        pgclient.query(<span class="string">'select * from todos'</span>,<span class="string">''</span>,cb)</span><br><span class="line">        res.json()</span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="string">'/saveEdit'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'saveEdit:'</span>,req.query)</span><br><span class="line">        pgclient.update(tableNme,</span><br><span class="line">            &#123;</span><br><span class="line">                title:req.query.title,</span><br><span class="line">                owner:req.query.owner,</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                completed:req.query.completed,</span><br><span class="line">            &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        pgclient.query(<span class="string">'select * from todos'</span>,<span class="string">''</span>,cb)</span><br><span class="line">        res.json()</span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="string">'/changeTodo'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'changeTodo.query:'</span>,req.query)</span><br><span class="line">        pgclient.update(tableNme, <span class="built_in">JSON</span>.parse(req.query.filter), <span class="built_in">JSON</span>.parse(req.query.data),</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">            &#125;)</span><br><span class="line">        pgclient.query(<span class="string">'select * from todos'</span>,<span class="string">''</span>,cb)</span><br><span class="line">        res.json()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 直接在地址栏输入，以添加数据表，createTable/deletTable 这两个操作比较危险，仅建议在开发时使用</span></span><br><span class="line">    .get(<span class="string">'/createTable'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> que = pgclient.query(<span class="string">'CREATE TABLE "public"."todos" (  "id" serial4 ,  "title" varchar(255) NOT NULL,  "completed" bool NOT NULL,  "owner" varchar(255) NOT NULL,  PRIMARY KEY ("id"));'</span>,<span class="literal">null</span>,cb)</span><br><span class="line">        res.send(que)</span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="string">'/deletTable'</span>, (req, res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> que = pgclient.query(<span class="string">'DROP TABLE todos;'</span>,<span class="literal">null</span>,cb)</span><br><span class="line">        res.send(que)</span><br><span class="line">    &#125;)</span><br><span class="line">app.listen(PORT, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Listening on <span class="subst">$&#123; PORT &#125;</span>`</span>))</span><br></pre></td></tr></table></figure>

</blockquote>
</details>

<details>
<summary>PG.js(折叠)</summary>
<blockquote>

<figure class="highlight javascript"><figcaption><span>index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pg = <span class="built_in">require</span>(<span class="string">'pg'</span>);</span><br><span class="line"><span class="comment">//  heroku pg:credentials DATABASE //查询数据库信息</span></span><br><span class="line"><span class="comment">// heroku config -s | grep DATABASE_URL</span></span><br><span class="line"><span class="keyword">var</span> conString = <span class="string">"postgres://UesrName:PassWord@Host:Port/DataBase"</span>;</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> pg.Client(&#123;</span><br><span class="line">    connectionString: conString,</span><br><span class="line">    ssl: &#123;</span><br><span class="line">        rejectUnauthorized: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PG = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"准备向postgres数据库连接..."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PG.prototype.getConnection = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    client.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'could not connect to postgres'</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        client.query(<span class="string">'SELECT NOW() AS "theTime"'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">'error running query'</span>, err);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"数据库连接成功..."</span>,result.rows[<span class="number">0</span>].theTime);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行者函数</span></span><br><span class="line"><span class="comment">//@param str 查询语句</span></span><br><span class="line"><span class="comment">//@param value 相关值</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line"><span class="keyword">var</span> clientHelper = <span class="function"><span class="keyword">function</span>(<span class="params">str,value,cb</span>)</span>&#123;</span><br><span class="line">    client.query(str,value,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            cb(<span class="string">"err: "</span>,err);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.rows != <span class="literal">undefined</span>)</span><br><span class="line">                cb(result.rows);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                 cb();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param fields 更新的字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.save = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,fields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"insert into "</span>+tablename+<span class="string">"("</span>;</span><br><span class="line">    <span class="keyword">var</span> field = [];</span><br><span class="line">    <span class="keyword">var</span> value = [];</span><br><span class="line">    <span class="keyword">var</span> num = [];</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(i);</span><br><span class="line">        value.push(fields[i]);</span><br><span class="line">        num.push(<span class="string">"$"</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">","</span>) +<span class="string">") values("</span>+num.join(<span class="string">","</span>)+<span class="string">")"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// str += ";";</span></span><br><span class="line">    <span class="comment">// str= "insert into todos (id,title,completed) values ($1::int, $2::varchar, $3::bool)"</span></span><br><span class="line">    <span class="comment">// value = [1,'吃饭',false]</span></span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param fields 条件字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,fields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"delete from "</span>+tablename+<span class="string">" where "</span>;</span><br><span class="line">    <span class="keyword">var</span> field = [];</span><br><span class="line">    <span class="keyword">var</span> value = [];</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(i+<span class="string">"=$"</span> +count);</span><br><span class="line">        value.push(fields[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">" and "</span>);</span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param mainfields 条件字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param fields 更新的字段和值，json格式</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,mainfields,fields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"update "</span>+tablename+<span class="string">" set "</span>;</span><br><span class="line">    <span class="keyword">var</span> field = [];</span><br><span class="line">    <span class="keyword">var</span> value = [];</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(i+<span class="string">"=$"</span>+count);</span><br><span class="line">        value.push(fields[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">","</span>) +<span class="string">" where "</span>;</span><br><span class="line">    field = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> mainfields)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        field.push(j+<span class="string">"=$"</span>+count);</span><br><span class="line">        value.push(mainfields[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    str += field.join(<span class="string">" and "</span>);</span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="comment">//@param tablename 数据表名称</span></span><br><span class="line"><span class="comment">//@param fields 条件字段和值，json格式 【筛选，例如：&#123;age:25&#125;,即仅查询age=25的数据】</span></span><br><span class="line"><span class="comment">//@param returnfields 返回字段 数组格式【表中字段名】</span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.select = <span class="function"><span class="keyword">function</span>(<span class="params">tablename,fields,returnfields,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tablename) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> returnStr = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span>(returnfields.length == <span class="number">0</span>)</span><br><span class="line">        returnStr = <span class="string">'*'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        returnStr= returnfields.join(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"select "</span>+returnStr+ <span class="string">" from "</span>+ tablename;</span><br><span class="line">    <span class="keyword">if</span>(fields)&#123;</span><br><span class="line">        <span class="keyword">var</span> field = [];</span><br><span class="line">        <span class="keyword">var</span> value = [];</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> fields)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            field.push(i+<span class="string">"=$"</span>+count);</span><br><span class="line">            value.push(fields[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">" where "</span>+field.join(<span class="string">" and "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//str = "select * from todo;";//######</span></span><br><span class="line">    <span class="comment">//str = "DELETE FROM todo;";//######</span></span><br><span class="line">    clientHelper(str,value,cb);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义</span></span><br><span class="line"><span class="comment">//@param str SQL语句</span></span><br><span class="line"><span class="comment">//@param value </span></span><br><span class="line"><span class="comment">//@param cb 回调函数</span></span><br><span class="line">PG.prototype.query = <span class="function"><span class="keyword">function</span>(<span class="params">str,value,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> clientHelper(str,value,cb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> PG();</span><br></pre></td></tr></table></figure>
</blockquote>
</details>

<details>
<summary>package.json(折叠)</summary>
<blockquote>

<figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node index.js"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"node test.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.2"</span>,</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.19.0"</span>,</span><br><span class="line">    <span class="attr">"ejs"</span>: <span class="string">"^2.7.4"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.17.1"</span>,</span><br><span class="line">    <span class="attr">"express-session"</span>: <span class="string">"^1.17.1"</span>,</span><br><span class="line">    <span class="attr">"http-server"</span>: <span class="string">"^0.12.3"</span>,</span><br><span class="line">    <span class="attr">"node-postgres"</span>: <span class="string">"^0.6.0"</span>,</span><br><span class="line">    <span class="attr">"pbkdf2-password"</span>: <span class="string">"^1.2.1"</span>,</span><br><span class="line">    <span class="attr">"pg"</span>: <span class="string">"^8.2.1"</span>,</span><br><span class="line">    <span class="attr">"todomvc-app-css"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"todomvc-common"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.6.11"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</details>

<h2 id="X-关于登录"><a href="#X-关于登录" class="headerlink" title="X. 关于登录"></a>X. 关于登录</h2><p>关于登录操作官网有个<a href="https://github.com/expressjs/express/blob/master/examples/auth/index.js" target="_blank" rel="noopener">示例</a><br>下载两个模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pbkdf2-password</span><br><span class="line">npm install express-session</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://todomvc.com/" target="_blank" rel="noopener">Todomvc</a></li>
<li><a href="https://www.cnblogs.com/EricZLin/p/9369260.html" target="_blank" rel="noopener">框架入门经典项目TodoMVC·澎湃_L·博客园</a></li>
<li><a href="https://vuejs.org/v2/examples/todomvc.html" target="_blank" rel="noopener">vuejs示例</a></li>
<li><a href="https://blog.csdn.net/cheneypao/article/details/51378053" target="_blank" rel="noopener">Nodejs对postgresql基本操作的封装·cheneypao·CSDN</a></li>
<li><a href="https://www.jianshu.com/p/7bc34e56fa39" target="_blank" rel="noopener">Heroku 使用教程</a></li>
<li><a href="https://www.jianshu.com/p/5007e533eff9" target="_blank" rel="noopener">使用Node.js在Heroku上开始</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>浅谈人工智能</title>
    <url>/20200519/%E6%B5%85%E8%B0%88%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<p>人工智能（Artificial Intelligence, AI）亦称<strong>智械</strong>、<strong>机器智能</strong>，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。</p>
<a id="more"></a>
<div class="note default no-icon">
            <blockquote><p>人工智能于一般教材中的定义领域是“智能主体（intelligent agent）的研究与设计”，智能主体指一个可以观察周遭环境并作出行动以达致目标的系统。约翰·麦卡锡于1955年的定义是“制造智能机器的科学与工程”。安德烈亚斯·卡普兰（Andreas Kaplan）和迈克尔·海恩莱因（Michael Haenlein）将人工智能定义为“系统正确解释外部数据，从这些数据中学习，并利用这些知识通过灵活适应实现特定目标和任务的能力”。</p><footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/人工智能" target="_blank" rel="noopener">zh.wikipedia.org/wiki/人工智能</a></cite></footer></blockquote>
          </div>

<h1 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h1><p>人工智能的研究是高度技术性和专业的，各分支领域都是深入且各不相通的，因而涉及范围极广[8]。人工智能的研究可以分为几个技术问题。其分支领域主要集中在解决具体问题，其中之一是，如何使用各种不同的工具完成特定的应用程序。</p>
<p><a href="https://zh.wikipedia.org/wiki/AI_Challenge" target="_blank" rel="noopener">AI Challenge</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo-Github搭建博客</title>
    <url>/20180401/hexo-github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>此篇用以记录使用<code>Hexo</code>搭建博客的过程，不时修改加以完善。</p>
<a id="more"></a>

<h1 id="一、-准备环境"><a href="#一、-准备环境" class="headerlink" title="一、 准备环境"></a>一、 准备环境</h1><h2 id="1-Github账户"><a href="#1-Github账户" class="headerlink" title="1. Github账户"></a>1. Github账户</h2><p>注册并新建项目，项目必须要遵守格式：<code>YOUR_NAME.github.io</code></p>
<h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></h2><ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li>
<li>还可以前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝 Git for Windows 镜像</a></li>
<li><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">更多参见</a></li>
</ul>
<h3 id="配置好Git环境"><a href="#配置好Git环境" class="headerlink" title="配置好Git环境"></a>配置好Git环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"your_name"</span></span><br><span class="line">git config --global user.email <span class="string">"your_email"</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<details>
<summary>CRLF问题(折叠)</summary>
<blockquote>
    首先问题出在不同操作系统所使用的换行符是不一样的，下面罗列一下三大主流操作系统的换行符：
    Uinx/Linux采用换行符LF表示下一行（LF：LineFeed，中文意思是换行）；
    Dos和Windows采用回车+换行CRLF表示下一行（CRLF：CarriageReturn LineFeed，中文意思是回车换行）；
    Mac OS采用回车CR表示下一行（CR：CarriageReturn，中文意思是回车）。
    为true时，Git会将你add的所有文件视为文本问价你，将结尾的CRLF转换为LF，而checkout时会再将文件的LF格式转为CRLF格式。
    为false时，line endings不做任何改变，文本文件保持其原来的样子。
    为input时，add时Git会把CRLF转换为LF，而check时仍旧为LF，所以Windows操作系统不建议设置此值。
</blockquote>
</details>

<h3 id="创建ssh密钥，将公钥上传"><a href="#创建ssh密钥，将公钥上传" class="headerlink" title="创建ssh密钥，将公钥上传"></a>创建ssh密钥，将公钥上传</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email"</span> 	<span class="comment"># 创建密钥对</span></span><br><span class="line">ssh -T git@github.com  						<span class="comment"># 测试添加ssh是否成功</span></span><br></pre></td></tr></table></figure>

<ul>
<li>更多参见<a href="https://help.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener">Github</a></li>
</ul>
<h2 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3. 安装Node.js"></a>3. 安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a></h2><ul>
<li>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装程序</a>。</li>
<li>对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝 Node.js 镜像</a> 下载。</li>
<li>更多参见<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Node-js" target="_blank" rel="noopener">Hexo</a></li>
</ul>
<h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></h2><p>使用 npm 安装 Hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo -v 				<span class="comment"># 检查hexo是否安装成功</span></span><br></pre></td></tr></table></figure>

<ul>
<li>更多参见<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo" target="_blank" rel="noopener">Hexo</a></li>
</ul>
<h1 id="二、-本地博客-Fighting"><a href="#二、-本地博客-Fighting" class="headerlink" title="二、 本地博客 - Fighting"></a>二、 本地博客 - Fighting</h1><h2 id="1-初始化博客"><a href="#1-初始化博客" class="headerlink" title="1. 初始化博客"></a>1. 初始化博客</h2><p>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init [folder]</span><br><span class="line"><span class="built_in">cd</span> [folder]</span><br><span class="line">npm install				<span class="comment"># 安装所需要的组件</span></span><br><span class="line">hexo g					<span class="comment"># 生成静态文件--public文件夹下</span></span><br></pre></td></tr></table></figure>

<ul>
<li>更多参见<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">Hexo</a></li>
</ul>
<h2 id="2-开启本地服务"><a href="#2-开启本地服务" class="headerlink" title="2. 开启本地服务"></a>2. 开启本地服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line">hexo s -p 端口号			<span class="comment"># 重设端口</span></span><br><span class="line">hexo s -s 				<span class="comment">#只使用静态文件</span></span><br></pre></td></tr></table></figure>

<h2 id="3-写篇文章"><a href="#3-写篇文章" class="headerlink" title="3. 写篇文章"></a>3. 写篇文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">hexo n -p &lt;path&gt; 			<span class="comment"># 自定义新文章的路径</span></span><br></pre></td></tr></table></figure>

<h2 id="4-文件生成"><a href="#4-文件生成" class="headerlink" title="4. 文件生成"></a>4. 文件生成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo g -d 		<span class="comment"># 文件生成后立即部署网站</span></span><br><span class="line">hexo g -f 		<span class="comment"># 差分机制，只会重新生成改动的文件</span></span><br></pre></td></tr></table></figure>

<h2 id="5-写篇草稿"><a href="#5-写篇草稿" class="headerlink" title="5. 写篇草稿"></a>5. 写篇草稿</h2><h3 id="1-新建草稿"><a href="#1-新建草稿" class="headerlink" title="1). 新建草稿"></a>1). 新建草稿</h3><p>执行以下命令将在<code>./source/_drafts</code>文件夹下创建一篇博文。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-预览草稿"><a href="#2-预览草稿" class="headerlink" title="2). 预览草稿"></a>2). 预览草稿</h3><p>预览草稿有两种方式</p>
<div class="tabs" id="预览草稿"><ul class="nav-tabs"><li class="tab active"><a href="#预览草稿-1">命令</a></li><li class="tab"><a href="#预览草稿-2">更改配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="预览草稿-1"><p>显示草稿的命令需要附带参数<code>--draft</code>，所以可以执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="预览草稿-2"><p>在配置文件中更改</p>
<figure class="highlight bash"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">render_drafts: <span class="literal">true</span></span><br></pre></td></tr></table></figure></div></div></div>

<h3 id="3-发表草稿"><a href="#3-发表草稿" class="headerlink" title="3). 发表草稿"></a>3). 发表草稿</h3><p>把草稿变成文章，或者页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h2><h3 id="1-渲染文件"><a href="#1-渲染文件" class="headerlink" title="1). 渲染文件"></a>1). 渲染文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<h3 id="2-清除文件"><a href="#2-清除文件" class="headerlink" title="2). 清除文件"></a>2). 清除文件</h3><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo cl</span><br></pre></td></tr></table></figure>

<ul>
<li>更多参见<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo</a></li>
</ul>
<h1 id="三、-推送到GitHub"><a href="#三、-推送到GitHub" class="headerlink" title="三、 推送到GitHub"></a>三、 推送到GitHub</h1><h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h2><p>打开<code>_config.yml</code>文件，修改repo值（在末尾）</p>
<blockquote>
<p>注：所有配置项目的分号后都需要一个空格</p>
</blockquote>
<figure class="highlight bash"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: git@github.com:YOUR_NAME/YOUR_NAME.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>


<h2 id="2-生成并部署文章"><a href="#2-生成并部署文章" class="headerlink" title="2. 生成并部署文章"></a>2. 生成并部署文章</h2><p>生成以及部署文章之前，需要安装一个扩展</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在<code>_posts</code>目录下新建一篇博文，编辑器编好文章，那么就可以生成以及部署了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post <span class="string">"博文名"</span>  <span class="comment">#  _posts目录下新建一篇博文</span></span><br><span class="line">hexo d -g               <span class="comment">#  生成以及部署</span></span><br></pre></td></tr></table></figure>

<h2 id="3-国内访问慢的处理方案"><a href="#3-国内访问慢的处理方案" class="headerlink" title="3. 国内访问慢的处理方案"></a>3. 国内访问慢的处理方案</h2><h3 id="1-通用方案"><a href="#1-通用方案" class="headerlink" title="1). 通用方案"></a>1). 通用方案</h3><p>除了推送到<code>Github</code>，也可以使用其他平台，比如<code>Gitee</code>和<code>Coding</code>，或者用<code>CDN</code>(这个我了解的不多)。实践出真知嘛，可以多尝试。</p>
<div class="note warning no-icon">
            <p>对于<code>Gitee</code>和<code>Coding</code>用了一段时间，都有所限制：</p><ul><li>Gitee：速度尚可，但是自定义域名需要付费，即使可以免费使用几个月，我还是弃了</li><li>Coding：速度挺好，但是在我使用那段时间隔三岔五访问不了，这个我接受不里奥。</li></ul>
          </div>

<h3 id="2-Fast-io"><a href="#2-Fast-io" class="headerlink" title="2).  Fast.io"></a>2).  Fast.io</h3><p>我自己使用的是<a href="https://fast.io/" target="_blank" rel="noopener">Fast</a>，支持网盘 <code>Google Drive</code> / <code>OneDrive</code> / <code>Github</code> / <code>Dropbox</code> / <code>MediaFire</code> / <code>BOX</code>。如此获取网盘资源外链，图床不是问题。但也有<del>（可忽略的）</del>限制</p>
<ul>
<li>免费创建5个站点</li>
<li>单个文件最大500M</li>
<li>每个月100G流量</li>
</ul>
<h3 id="2-js-org"><a href="#2-js-org" class="headerlink" title="2).  js.org"></a>2).  js.org</h3><p>使用<a href="https://js.org/" target="_blank" rel="noopener">js.org</a>和自定义域名类似，将一个名为“CNAME”的文件添加到您的存储库中，然后在GitHub <a href="https://github.com/js-org/js.org/tree/master" target="_blank" rel="noopener">repository </a>中发出拉取请求，该请求会将子域添加到现有JS.ORG域的列表中。</p>
<h1 id="四、-迁移方法"><a href="#四、-迁移方法" class="headerlink" title="四、 迁移方法"></a>四、 迁移方法</h1><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>安装<code>hexo-migrator-rss</code>插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-migrator-rss --save</span><br></pre></td></tr></table></figure>

<p>执行 (<source> 文件路径或网址)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo migrate rss &lt;<span class="built_in">source</span>&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">- 更多参见[Hexo](https://hexo.io/zh-cn/docs/migration)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 五、 其他</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1. 部署至FTP服务器</span></span><br><span class="line"></span><br><span class="line">- 安装插件</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">npm install hexo-deployer-ftpsync –save</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置</li>
<li>修改<code>_config.yml</code>文件:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: ftpsync 				<span class="comment">#上传方式，固定ftpsync</span></span><br><span class="line">  host: hfanss.ftp-gz01.com 	<span class="comment">#ftp地址</span></span><br><span class="line">  user: ****					<span class="comment">#帐号</span></span><br><span class="line">  pass: ****					<span class="comment">#密码</span></span><br><span class="line">  remote: /webroot/ 			<span class="comment">#上传至哪个目录</span></span><br><span class="line">  port: 8010					<span class="comment">#端口</span></span><br></pre></td></tr></table></figure>

<h2 id="2-部署至腾讯云COS"><a href="#2-部署至腾讯云COS" class="headerlink" title="2. 部署至腾讯云COS"></a>2. 部署至腾讯云COS</h2><ul>
<li>安装插件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-cos --save</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置</li>
<li>修改<code>_config.yml</code>文件:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: cos				<span class="comment"># 上传方式，固定cos</span></span><br><span class="line">  appId: 12529*****  	<span class="comment"># cos的appId</span></span><br><span class="line">  secretId: AKI******	<span class="comment"># cos的secretId</span></span><br><span class="line">  secretKey: **********	<span class="comment"># cos的secretKey</span></span><br><span class="line">  bucket: *********		<span class="comment"># cos的bucket</span></span><br><span class="line">  region: ap-shanghai	<span class="comment"># cos的region</span></span><br></pre></td></tr></table></figure>

<h2 id="3-使用淘宝镜像CNPM安装插件"><a href="#3-使用淘宝镜像CNPM安装插件" class="headerlink" title="3. 使用淘宝镜像CNPM安装插件"></a>3. 使用淘宝镜像CNPM安装插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">e.g. cnpm install hexo-deployer-ftpsync –save</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器安防之登陆次数限制</title>
    <url>/20180517/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E9%98%B2%E4%B9%8B%E7%99%BB%E9%99%86%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继上次爆破防御后，依然有陌生IP骚扰，百无聊赖，续作此篇；</p>
<hr>
<h1 id="1-始终允许IP"><a href="#1-始终允许IP" class="headerlink" title="1. 始终允许IP"></a>1. 始终允许IP</h1><p>假设IP：192.168.18.1 是经常登录的IP，填入 /etc/hosts.allow ，当然 :allow 是可以省略的。当hosts.allow和host.deny相冲突时, 以hosts.allow设置为准</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"sshd:192.168.18.1:allow"</span> &gt;&gt; /etc/hosts.allow</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="2-写脚本"><a href="#2-写脚本" class="headerlink" title="2. 写脚本"></a>2. 写脚本</h1><p>在路径 ‘/usr/local/bin/‘ 下，创建文件 ‘secure_ssh.sh’ ，<br>错误次数大于个位数，即错误次数大于等于10就将IP列入黑名单(判断见行7)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/bin/secure_ssh.sh</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/secure|awk <span class="string">'/Failed/&#123;print $(NF-3)&#125;'</span>|sort|uniq -c|awk <span class="string">'&#123;print $2"="$1;&#125;'</span> &gt; /usr/<span class="built_in">local</span>/bin/black.list</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat  /usr/<span class="built_in">local</span>/bin/black.list`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  IP=`<span class="built_in">echo</span> <span class="variable">$i</span> |awk -F= <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">  NUM=`<span class="built_in">echo</span> <span class="variable">$i</span> |awk -F= <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$&#123;#NUM&#125;</span> -gt 1 ]; <span class="keyword">then</span></span><br><span class="line">    grep <span class="variable">$IP</span> /etc/hosts.deny &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -gt 0 ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"sshd:<span class="variable">$IP</span>:deny"</span> &gt;&gt; /etc/hosts.deny</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>



<h1 id="3-列入计划"><a href="#3-列入计划" class="headerlink" title="3. 列入计划"></a>3. 列入计划</h1><p>将脚本文件每一分钟执行一次 (* /1 * * * * )</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  /1 * * * *  sh /usr/<span class="built_in">local</span>/bin/secure_ssh.sh</span><br><span class="line">或</span><br><span class="line">  * * * * *  sh /usr/<span class="built_in">local</span>/bin/secure_ssh.sh</span><br></pre></td></tr></table></figure>

<h1 id="4-后记"><a href="#4-后记" class="headerlink" title="4. 后记"></a>4. 后记</h1><h2 id="1-查看记录列表"><a href="#1-查看记录列表" class="headerlink" title="1).查看记录列表"></a>1).查看记录列表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /usr/<span class="built_in">local</span>/bin/black.list</span><br></pre></td></tr></table></figure>

<h2 id="2-清空记录列表"><a href="#2-清空记录列表" class="headerlink" title="2).清空记录列表"></a>2).清空记录列表</h2><p>black.list文件是根据secure日志文件通过上面脚本文件生成的，且每分钟会覆盖一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo &quot;&quot; &gt; &#x2F;var&#x2F;log&#x2F;secure </span><br><span class="line">$ echo &quot;&quot; &gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;black.list</span><br></pre></td></tr></table></figure>

<h2 id="3-修改hosts-deny文件"><a href="#3-修改hosts-deny文件" class="headerlink" title="3).修改hosts.deny文件"></a>3).修改hosts.deny文件</h2><p>手动添加或删除IP记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/hosts.deny</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>服务器安防</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器安防之VPS爆破防御（简）</title>
    <url>/20180505/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E9%98%B2%E4%B9%8Bvps%E7%88%86%E7%A0%B4%E9%98%B2%E5%BE%A1%EF%BC%88%E7%AE%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一、-检查"><a href="#一、-检查" class="headerlink" title="一、 检查"></a>一、 检查</h1><h2 id="1-查看登录失败的IP"><a href="#1-查看登录失败的IP" class="headerlink" title="1. 查看登录失败的IP"></a>1. 查看登录失败的IP</h2><p>显示错误次数 如果错误次数太大 你的服务器十有八九曾被暴力破解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">"Failed password for root"</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">'&#123;print $11&#125;'</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><img data-src="Failed_login.png" alt="Failed_login"></p>
<h2 id="2-列出用户所有的登录时间和登录终端的地址"><a href="#2-列出用户所有的登录时间和登录终端的地址" class="headerlink" title="2. 列出用户所有的登录时间和登录终端的地址"></a>2. 列出用户所有的登录时间和登录终端的地址</h2><p>为了验证是否被入侵，可以先查看现在谁在登录服务器，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ last | more</span><br></pre></td></tr></table></figure>

<p>显示系统中所有用户最近一次登录信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lastlog</span><br></pre></td></tr></table></figure>

<h1 id="二、-处理"><a href="#二、-处理" class="headerlink" title="二、 处理"></a>二、 处理</h1><h2 id="1-加入到黑名单"><a href="#1-加入到黑名单" class="headerlink" title="1. 加入到黑名单"></a>1. 加入到黑名单</h2><p>把对方IP加入到黑名单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/hosts.deny</span><br><span class="line">$ /etc/hosts.deny</span><br></pre></td></tr></table></figure>

<h2 id="2-禁止所有IP访问SSH功能"><a href="#2-禁止所有IP访问SSH功能" class="headerlink" title="2. 禁止所有IP访问SSH功能"></a>2. 禁止所有IP访问SSH功能</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"sshd:all:deny"</span> &gt;&gt; /etc/hosts.deny</span><br></pre></td></tr></table></figure>

<h2 id="3-更改端口号"><a href="#3-更改端口号" class="headerlink" title="3. 更改端口号"></a>3. 更改端口号</h2><p>编辑sshd配置，修改默认的端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>按【i】，进入编辑模式，找到并注释如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Port 22</span></span><br></pre></td></tr></table></figure>

<p>按【Esc】退出编辑模式，【Shift】+【：】进入命令模式，”:wq”保存并退出</p>
<h2 id="4-禁止root-ssh登录"><a href="#4-禁止root-ssh登录" class="headerlink" title="4. 禁止root ssh登录"></a>4. 禁止root ssh登录</h2><p>修改sshd_conf文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>注释一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PermitRootLogin no</span></span><br></pre></td></tr></table></figure>

<h1 id="三、-重启ssh"><a href="#三、-重启ssh" class="headerlink" title="三、 重启ssh"></a>三、 重启ssh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br><span class="line">或</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<!--  
    或尝试
    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh restart </span><br><span class="line">/etc/init.d/sshd reload</span><br><span class="line">/etc/init.d/sshd restart</span><br></pre></td></tr></table></figure>
<p>–&gt;</p>
]]></content>
      <tags>
        <tag>服务器安防</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器管理面板</title>
    <url>/20180623/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="免费-Linux-服务器管理面板"><a href="#免费-Linux-服务器管理面板" class="headerlink" title="免费 Linux 服务器管理面板"></a>免费 Linux 服务器管理面板</h1><hr>
<h2 id="1-宝塔面板"><a href="#1-宝塔面板" class="headerlink" title="1.宝塔面板"></a>1.<a href="https://www.bt.cn/" target="_blank" rel="noopener">宝塔面板</a></h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1).下载"></a>1).下载</h3><ul>
<li>Linux版<a href="http://download.bt.cn/install/install.sh" target="_blank" rel="noopener">下载</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>Window版<a href="http://download.bt.cn/win/update/net/BtSoft-Win.zip" target="_blank" rel="noopener">下载</a>：<br><a href="http://download.bt.cn/win/update/net/BtSoft-Win.zip" target="_blank" rel="noopener">http://download.bt.cn/win/update/net/BtSoft-Win.zip</a></li>
</ul>
<h3 id="2-卸载"><a href="#2-卸载" class="headerlink" title="2).卸载"></a>2).卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service bt stop &amp;&amp; chkconfig --del bt &amp;&amp; rm -f /etc/init.d/bt &amp;&amp; rm -rf /www/server/panel</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-AMH面板"><a href="#2-AMH面板" class="headerlink" title="2.AMH面板"></a>2.<a href="http://amh.sh/install.htm" target="_blank" rel="noopener">AMH面板</a></h2><p>国内、半开源、有收费版本、中文</p>
<h3 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1).下载"></a>1).下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://amh.sh/amh.sh &amp;&amp; bash amh.sh 2&gt;&amp;1 | tee amh.log</span><br></pre></td></tr></table></figure>

<h3 id="2-卸载-1"><a href="#2-卸载-1" class="headerlink" title="2).卸载"></a>2).卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall php-fpm</span><br><span class="line">amh nginx stop</span><br><span class="line">amh mysql stop</span><br><span class="line"></span><br><span class="line">rm /root/amh -rf;</span><br><span class="line">rm /home/usrdata /home/wwwroot -rf;</span><br><span class="line">rm /usr/<span class="built_in">local</span>/amh* -rf;</span><br><span class="line">rm /usr/<span class="built_in">local</span>/libiconv* -rf;</span><br><span class="line">rm /usr/<span class="built_in">local</span>/nginx* -rf;</span><br><span class="line">rm /usr/<span class="built_in">local</span>/mysql* -rf;</span><br><span class="line">rm /usr/<span class="built_in">local</span>/php* -rf;</span><br><span class="line">rm /etc/init.d/amh-start /etc/amh-iptables /bin/amh -f;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-WDCP面板"><a href="#3-WDCP面板" class="headerlink" title="3.WDCP面板"></a>3.<a href="https://www.wdlinux.cn/lanmp/install.html" target="_blank" rel="noopener">WDCP面板</a></h2><p>国内、闭源、免费、中文</p>
<h3 id="1-下载-2"><a href="#1-下载-2" class="headerlink" title="1).下载"></a>1).下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://dl.wdlinux.cn:5180/lanmp_laster.tar.gz</span><br><span class="line">$ tar zxvf lanmp_laster.tar.gz</span><br><span class="line">$ sh install.sh    (或sh in.sh) (默认会安装wdcp,如果只要web环境,而不想安装wdcp,这里改为 sh lanmp.sh即可)</span><br></pre></td></tr></table></figure>

<h3 id="2-卸载-2"><a href="#2-卸载-2" class="headerlink" title="2).卸载"></a>2).卸载</h3><p>(注意备份数据,否则后果自负)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh install.sh uninstall    (或sh in.sh uninstall)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="4-VestaCP面板"><a href="#4-VestaCP面板" class="headerlink" title="4.VestaCP面板"></a>4.<a href="http://www.vestacp.com/install/" target="_blank" rel="noopener">VestaCP面板</a></h2><h3 id="1-下载-3"><a href="#1-下载-3" class="headerlink" title="1).下载"></a>1).下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -O http://vestacp.com/pub/vst-install.sh &amp;&amp; bash vst-install.sh</span><br></pre></td></tr></table></figure>

<h3 id="2-卸载-3"><a href="#2-卸载-3" class="headerlink" title="2).卸载"></a>2).卸载</h3><p>a.停止VESTA服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service vesta stop</span><br></pre></td></tr></table></figure>

<p>b.卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CentOS:</span><br><span class="line">$ yum remove vesta*</span><br><span class="line">$ rm -f /etc/yum.repos.d/vesta.repo</span><br><span class="line"></span><br><span class="line">Debian/Ubuntu:</span><br><span class="line">$ apt-get remove vesta*</span><br><span class="line">$ rm -f /etc/apt/sources.list.d/vesta.list</span><br></pre></td></tr></table></figure>

<p>c. 删除数据目录和计划任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/<span class="built_in">local</span>/vesta</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-AppNode面板"><a href="#5-AppNode面板" class="headerlink" title="5.AppNode面板"></a>5.<a href="https://www.appnode.com/install" target="_blank" rel="noopener">AppNode面板</a></h2><h3 id="1-下载-4"><a href="#1-下载-4" class="headerlink" title="1).下载"></a>1).下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ INSTALL_AGENT=1 INSTALL_APPS=sitemgr INIT_SWAPFILE=1 INSTALL_PKGS=<span class="string">'nginx-stable,php56,mysql56'</span> bash -c <span class="string">"<span class="variable">$(curl -sS http://dl.appnode.com/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>

<h3 id="2-卸载-4"><a href="#2-卸载-4" class="headerlink" title="2).卸载"></a>2).卸载</h3><p>a.卸载受控端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appnode agent remove</span><br></pre></td></tr></table></figure>


<p>b.卸载控制中心</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appnode ccenter remove</span><br></pre></td></tr></table></figure>
<p>c.清除残留数据和配置<br>如果要彻底清除卸载后的残留数据和配置文件，删除三个目录即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /opt/appnode/&#123;ccenter,agent,ui&#125;/</span><br></pre></td></tr></table></figure>

<pre><code>注意：由面板安装的环境软件，不会被自动卸载</code></pre><hr>
]]></content>
      <tags>
        <tag>服务器管理</tag>
        <tag>Web 网站架设</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Github-绑定域名</title>
    <url>/20180730/hexo-github-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h2 id="1-获取GitHub-Pages的IP"><a href="#1-获取GitHub-Pages的IP" class="headerlink" title="1. 获取GitHub Pages的IP"></a>1. <del>获取GitHub Pages的IP</del></h2><p><del>Ping出Github Pages的IP</del> <code>(解析时没有用到IP地址)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping YOURNAME.github.io</span><br></pre></td></tr></table></figure>

<h2 id="2-配置域名"><a href="#2-配置域名" class="headerlink" title="2. 配置域名"></a>2. 配置域名</h2><p>在目录 YOURNAME\source 下创建一个名为CNAME的文件，文件的内容是你的二级域名<br> <code>例如：blog.xxxx.com</code> 。</p>
<h2 id="3-域名解析"><a href="#3-域名解析" class="headerlink" title="3. 域名解析"></a>3. 域名解析</h2><p>拿二级域名<code>blog.xxxx.com</code>举例，记录类型置为CNAME，主机记录置为 <code>blog.xxxx.com</code> 中的 <code>blog</code> ，记录值置为 <code>YOURNAME.githob.io</code></p>
<p>修改的时候只要修改两个记录类型为A，主机记录分别为@和www的行就可以了</p>
<a id="more"></a>


]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Github-备份</title>
    <url>/20180722/hexo-github-%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>用Hexo在GitHub搭建Blog后想要进行备份，方法之一就是通过创建分支把源码放到GitHub上。</p>
<h1 id="一、-需要备份的文件"><a href="#一、-需要备份的文件" class="headerlink" title="一、 需要备份的文件"></a>一、 需要备份的文件</h1><h2 id="1、-文章"><a href="#1、-文章" class="headerlink" title="1、 文章"></a>1、 文章</h2><p>./source 文件夹，这个就不用说了，这里面包含了你写的文章的 markdown 源码，这个是最重要的。</p>
<h2 id="2、-配置文件"><a href="#2、-配置文件" class="headerlink" title="2、 配置文件"></a>2、 配置文件</h2><p>根目录下的几个配置文件，主要是 _config.yml、 package.json、 .gitignore。</p>
<a id="more"></a>

<h2 id="3、-主题文件夹"><a href="#3、-主题文件夹" class="headerlink" title="3、 主题文件夹"></a>3、 主题文件夹</h2><p>./themes/themes_name 这里的 themes_name 指的是你的主题名称， 如果咱对主题进行了一些个性化的配置， 那么这个主题也最好全部备份。</p>
<h2 id="4、-模版"><a href="#4、-模版" class="headerlink" title="4、 模版"></a>4、 模版</h2><p>./scaffolds 文件夹， 这个文件夹里是创建文    章时的模板， 如果没修改过这个文件夹中的东西， 可以不用备份。</p>
<h2 id="5、-密钥"><a href="#5、-密钥" class="headerlink" title="5、 密钥"></a>5、 密钥</h2><p>.ssh， 咱认为没必要备份，直接放到GitHub不安全，大不了重新生成嘛。</p>
<h1 id="二、-创建分支"><a href="#二、-创建分支" class="headerlink" title="二、 创建分支"></a>二、 创建分支</h1><p>创建GitHub Pages 时咱创建了两个分支：master 与 hexo</p>
<ul>
<li>master 分支用来存放生成的静态网页</li>
<li>hexo 分支用来存放网站的原始文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git status</span><br><span class="line">$ git commit -m <span class="string">'...'</span></span><br><span class="line">$ git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 另附：</span></span><br><span class="line">$ git branch -a 		<span class="comment"># 查看远程分支</span></span><br><span class="line">$ git branch 			<span class="comment"># 查看本地分支</span></span><br><span class="line">$ git checkout master 	<span class="comment"># 切换分支</span></span><br></pre></td></tr></table></figure>


<h1 id="三、-推送到分支"><a href="#三、-推送到分支" class="headerlink" title="三、 推送到分支"></a>三、 推送到分支</h1><p>创建GitHub Pages 时创建两个分支：master 与 hexo<br>设置hexo 为默认分支，修改_config.yml中的deploy参数， 分支应为master；<br>依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add . </span><br><span class="line">$ git commit -m “…”</span><br><span class="line">$ git push –<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure>
<p>提交原始文件到Hexo</p>
<h1 id="四、-修改日常！"><a href="#四、-修改日常！" class="headerlink" title="四、 修改日常！"></a>四、 修改日常！</h1><p>依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'...'</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure>
<p>指令将改动推送到GitHub（此时当前分支应为hexo）；<br>然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>
<p>会发布网站到master分支上。另外，两个过程顺序调转一般不会有问题。</p>
<h1 id="五、-如何恢复"><a href="#五、-如何恢复" class="headerlink" title="五、 如何恢复"></a>五、 如何恢复</h1><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b hexo git@github.com:YOURNAME/YOURNAME.github.io.git</span><br><span class="line"><span class="comment"># 在本地新拷贝的YOURNAME.github.io文件夹下通过Git 	bash依次执行下列指令：</span></span><br><span class="line">$ npm install hexo</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git</span><br><span class="line">（记得，不需要hexo init这条指令）。</span><br></pre></td></tr></table></figure>

<h1 id="六、-参考文档："><a href="#六、-参考文档：" class="headerlink" title="六、 参考文档："></a>六、 参考文档：</h1><pre><code>(GitHub Pages + Hexo搭建博客)[http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more]
[使用hexo，如果换了电脑怎么更新博客？(知乎)](https://www.zhihu.com/question/21193762)</code></pre>]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN的简单架设</title>
    <url>/20180623/vpn%E7%9A%84%E7%AE%80%E5%8D%95%E6%9E%B6%E8%AE%BE/</url>
    <content><![CDATA[<blockquote><p>提要：<br>      系统：CentOS 6.9</p>
</blockquote>

<h1 id="下载shadowsocks服务端"><a href="#下载shadowsocks服务端" class="headerlink" title="下载shadowsocks服务端"></a>下载shadowsocks服务端</h1><p>参考文章：<a href="https://teddysun.com/486.html" target="_blank" rel="noopener">秋水逸冰 - Shadowsocks 一键安装脚本（四合一）</a></p>
<p>使用root用户登录，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh &amp;&amp; chmod +x shadowsocks-all.sh &amp;&amp; ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h1 id="安装Win-ss客户端"><a href="#安装Win-ss客户端" class="headerlink" title="安装Win ss客户端"></a>安装Win ss客户端</h1><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">常规版 Shadowsocks</a> </p>
<p><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">ShadowsocksR 版</a> </p>
<hr>
<h2 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h2><p>若已安装多个版本，则卸载时也需多次运行</p>
<p>使用root用户登录，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure>

<h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><p>Shadowsocks-Python 版：<br>/etc/init.d/shadowsocks-python start | stop | restart | status</p>
<p>ShadowsocksR 版：<br>/etc/init.d/shadowsocks-r start | stop | restart | status</p>
<p>Shadowsocks-Go 版：<br>/etc/init.d/shadowsocks-go start | stop | restart | status</p>
<p>Shadowsocks-libev 版：<br>/etc/init.d/shadowsocks-libev start | stop | restart | status</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Shadowsocks-Python 版：<br>/etc/shadowsocks-python/config.json</p>
<p>ShadowsocksR 版：<br>/etc/shadowsocks-r/config.json</p>
<p>Shadowsocks-Go 版：<br>/etc/shadowsocks-go/config.json</p>
<p>Shadowsocks-libev 版：<br>/etc/shadowsocks-libev/config.json</p>
<hr>
<h1 id="安装多用户版55R"><a href="#安装多用户版55R" class="headerlink" title="安装多用户版55R"></a>安装多用户版55R</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#CentOS系统</span></span><br><span class="line">yum <span class="keyword">install</span> unzip ca-certificates -y </span><br><span class="line"></span><br><span class="line"><span class="comment">#Debian和Ubuntu系统</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> unzip ca-certificates -y</span><br></pre></td></tr></table></figure>

<p>安装脚本</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//www.moerats.<span class="keyword">com</span>/usr/down/<span class="number">55</span>r.zip &amp;&amp; unzip <span class="number">55</span>r.zip &amp;&amp; <span class="keyword">cd</span> <span class="number">55</span>R* &amp;&amp; bash install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>卸载脚本</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> 55R* &amp;&amp; bash uninstall.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="SSR脚本-wget-N-–no-check-certificate-https-raw-githubusercontent-com-ToyoDAdoubiBackup-doubi-master-ssrmu-sh-amp-amp-chmod-x-ssrmu-sh-amp-amp-bash-ssrmu-sh"><a href="#SSR脚本-wget-N-–no-check-certificate-https-raw-githubusercontent-com-ToyoDAdoubiBackup-doubi-master-ssrmu-sh-amp-amp-chmod-x-ssrmu-sh-amp-amp-bash-ssrmu-sh" class="headerlink" title="[SSR脚本](wget -N –no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh)"></a>[SSR脚本](wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh</a> &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh)</h2><p><strong>PS:</strong> <a href="https://do.freess.today/" target="_blank" rel="noopener">Free SS</a></p>
<ul>
<li>19/03/24：更新：另作SS加速</li>
<li>19/05/24：更新：SSR又一脚本</li>
</ul>
]]></content>
      <tags>
        <tag>VPN架设</tag>
      </tags>
  </entry>
  <entry>
    <title>Django初步</title>
    <url>/20190224/django%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文中程序在Window上运行。</p>
<blockquote>
<p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> 是一个高级Python Web框架，鼓励快速开发和干净，实用的设计。由经验丰富的开发人员构建，它解决了Web开发的大部分麻烦，因此您可以专注于编写应用程序而无需重新造轮子。它是免费的而且开源的框架。</p>
</blockquote>
<a id="more"></a>

<h1 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1. 配置环境"></a>1. 配置环境</h1><p>如果使用 Windows，建议尝试使用<a href="https://visualstudio.microsoft.com/zh-hans/vs/" target="_blank" rel="noopener">Visual Studio</a> 做 Django 开发</p>
<h2 id="1-1-安装-Python-环境"><a href="#1-1-安装-Python-环境" class="headerlink" title="1.1 安装 Python 环境"></a>1.1 安装 Python 环境</h2><p>把 <code>Python3</code> 作为第一选择，具体安装请移步<a href="https://www.runoob.com/python3/python3-install.html" target="_blank" rel="noopener">菜鸟教程</a>,再此不做赘述。</p>
<h2 id="1-2-安装虚拟环境（可选）"><a href="#1-2-安装虚拟环境（可选）" class="headerlink" title="1.2 安装虚拟环境（可选）"></a>1.2 安装虚拟环境（可选）</h2><p>编写新软件程序时，可能（经常）要修改其他软件所需的依赖或环境变量。为了避免这一步可能引起的问题，安装虚拟环境是必要的。虚拟环境把软件所需的全部依赖和环境变量包装到一个文件夹中，与电脑中的其他软件隔离开。<br>安装 <code>virtualenv</code></p>
<pre><code>pip install virtualenv</code></pre><p>安装好 <code>virtualenv</code> 之后，输入下述命令，为你的项目创建一个虚拟环境-env_mysite(同下)：</p>
<pre><code>virtualenv env_mysite</code></pre><p>等<code>virtualenv</code> 设置好新的虚拟环境之后，会看到一个名为 <code>\env_mysite</code> 的文件夹（或者为虚拟环境起的其他名称）。打开那个文件夹，会看到下述结构：</p>
<ul>
<li>\Include</li>
<li>\Lib</li>
<li>\Scripts</li>
<li>\src</li>
</ul>
<p>若想使用这个新建的 <code>Python 虚拟环境</code>，要将其激活。回到命令提示符，输入下述命令：</p>
<pre><code>env_mysite\scripts\activate</code></pre><p>这个命令会运行虚拟环境中 \scripts 文件夹里的 activate 脚本。你会发现，现在命令提示符变了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(env_mysite) C:\Users\Admin&gt;</span><br></pre></td></tr></table></figure>
<p>命令提示符开头的 (env_mysite) 是告诉你，你正在那个虚拟环境中。</p>
<blockquote>
<ul>
<li>查看当前环境中所有软件包： <code>pip list</code> </li>
</ul>
</blockquote>
<ul>
<li>停用当前虚拟环境： <code>env_mysite\scripts\deactivate</code> </li>
<li>统计所有软件包： <code>pip freeze &gt; freeze.txt</code> </li>
<li>安装所有必需的包： <code>pip install -r freeze.txt</code> </li>
</ul>
<h2 id="1-3-安装Django"><a href="#1-3-安装Django" class="headerlink" title="1.3 安装Django"></a>1.3 安装Django</h2><p>安装最新稳定版</p>
<pre><code>pip install django</code></pre><p>输入 <code>pip install django==2.2.2</code> 会安装 <code>Django 2.2.2</code> （明确了版本号）。<br>在虚拟环境的命令提示符中输入 python，然后按回车键，启动Python 交互式解释器。如果成功安装，应该能导入 django 模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令提示符</span></span><br><span class="line">(env_mysite) C:\Users\Admin&gt; python</span><br><span class="line">··· ···</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 交互式解释器</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> django</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>django.get_version()</span><br><span class="line"><span class="string">'2.2.2'</span></span><br></pre></td></tr></table></figure>


<h1 id="2-建立项目"><a href="#2-建立项目" class="headerlink" title="2. 建立项目"></a>2. 建立项目</h1><h2 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h2><h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><h2 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h2><h1 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3. 设计模式"></a>3. 设计模式</h1><h2 id="3-1-视图"><a href="#3-1-视图" class="headerlink" title="3.1 视图"></a>3.1 视图</h2><h2 id="3-2-URL"><a href="#3-2-URL" class="headerlink" title="3.2 URL"></a>3.2 URL</h2><h2 id="3-3-模板"><a href="#3-3-模板" class="headerlink" title="3.3 模板"></a>3.3 模板</h2><h1 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4. 数据库"></a>4. 数据库</h1><h2 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h2><h1 id="5-创建应用"><a href="#5-创建应用" class="headerlink" title="5. 创建应用"></a>5. 创建应用</h1><h2 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h2><hr>
<p>参考文档：<br>&emsp;&emsp;<a href="https://docs.djangoproject.com/zh-hans/2.1/" target="_blank" rel="noopener">Django 文档</a><br>&emsp;&emsp;<a href="https://docs.djangoproject.com/zh-hans/2.1/intro/" target="_blank" rel="noopener">Django 教程</a><br>&emsp;&emsp;<a href="https://www.cnblogs.com/zhangxinqi/p/8969006.html" target="_blank" rel="noopener">python3之Django基础篇</a><br>&emsp;&emsp;<a href="http://www.runoob.com/django/django-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a><br>&emsp;&emsp;<img data-src="%E7%B2%BE%E9%80%9ADjango.pdf" alt=""></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-search配置</title>
    <url>/20190324/hexo-search%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">官方文档</a></p>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>修改在根目录下的_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span> </span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span> </span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>path - 文件的路径。默认是 search.xml。如果文件扩展名为 .json,则输出格式为JSON。</li>
<li>field - 要搜索的搜索范围：</li>
<li>post (Default) -  仅涵盖您博客的所有帖子。</li>
<li>page - 仅涵盖您博客的所有页面。</li>
<li>all - 将涵盖您博客的所有帖子和页面。</li>
<li>content - 是否包含每篇文章的全部内容。如果false，生成的结果仅覆盖没有主体的标题和其他元信息。默认是true。</li>
</ul>
<hr>
<h1 id="排除索引"><a href="#排除索引" class="headerlink" title="排除索引"></a>排除索引</h1><p>在文章顶部配置里加入 indexing: false </p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>SS加速</title>
    <url>/20190324/ss%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h1 id="ss加速"><a href="#ss加速" class="headerlink" title="ss加速"></a>ss加速</h1><h2 id="bbr-加速下载"><a href="#bbr-加速下载" class="headerlink" title="bbr 加速下载"></a>bbr 加速下载</h2><p>参考文章：<a href="https://teddysun.com/489.html" target="_blank" rel="noopener">秋水逸冰 - 一键安装最新内核并开启 BBR 脚本</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<hr>
<h2 id="锐速ServerSpeeder"><a href="#锐速ServerSpeeder" class="headerlink" title="锐速ServerSpeeder"></a>锐速ServerSpeeder</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -N --no-check-certificate https://raw.githubusercontent.com/wn789/serverspeeder/master/serverspeeder.sh</span><br><span class="line">$ bash serverspeeder.sh</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>PS:</strong> <a href="https://www.moerats.com/archives/387/" target="_blank" rel="noopener">BBR+BBR魔改+Lotsever(锐速)一键脚本 for Centos/Debian/Ubuntu</a></p>
]]></content>
      <tags>
        <tag>VPN架设</tag>
      </tags>
  </entry>
  <entry>
    <title>Django前言</title>
    <url>/20190609/django%E5%89%8D%E8%A8%80/</url>
    <content><![CDATA[<a id="more"></a>
<p><a href="精通Django.pdf"></a></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>hide</tag>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>[转载]排序算法</title>
    <url>/20190324/%E8%BD%AC%E8%BD%BD-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-常见的排序算法："><a href="#1-常见的排序算法：" class="headerlink" title="1. 常见的排序算法："></a>1. 常见的排序算法：</h2><p><a href="#1、冒泡排序">冒泡排序</a>、<a href="#2、快速排序">快速排序</a>、<a href="#3、简单插入排序">简单插入排序</a>、<a href="#4、希尔排序">希尔排序</a>、<a href="#5、简单选择排序">简单选择排序</a>、<a href="#6、堆排序">堆排序</a>、<a href="#7、二路归并排序">二路归并排序</a>、<a href="#8、多路归并排序">多路归并排序</a>、<a href="#8、计数排序">计数排序</a>、<a href="#9、桶排序">桶排序</a>、<a href="#10、基数排序">基数排序</a>等</p>
<a id="more"></a>
<p><img data-src="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88.png" alt="常见的排序算法"></p>
<h2 id="2-算法复杂度："><a href="#2-算法复杂度：" class="headerlink" title="2. 算法复杂度："></a>2. 算法复杂度：</h2><p><img data-src="%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="算法复杂度"></p>
<h2 id="3-相关概念："><a href="#3-相关概念：" class="headerlink" title="3. 相关概念："></a>3. 相关概念：</h2><ul>
<li>稳定：两个相等的数，排序后顺序不变</li>
<li>不稳定：两个相等的数，排序后顺序可能会变</li>
<li>时间复杂度：对排序数据的总的操作次数</li>
<li>空间复杂度：指计算机内执行时所需存储空间的度量</li>
</ul>
<h1 id="二、排序算法"><a href="#二、排序算法" class="headerlink" title="二、排序算法"></a>二、排序算法</h1><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<h3 id="1-1-算法描述"><a href="#1-1-算法描述" class="headerlink" title="1.1 算法描述"></a>1.1 算法描述</h3><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。<h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><img data-src="1.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> bubbleSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (var j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+1]) &#123;        // 相邻元素两两对比</span><br><span class="line">                var temp = arr[j+1];        // 元素交换</span><br><span class="line">                arr[j+1] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="2、快速排序"><a href="#2、快速排序" class="headerlink" title="2、快速排序"></a>2、快速排序</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
<h3 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1 算法描述"></a>2.1 算法描述</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><img data-src="2.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> quickSort(arr, left, right) &#123;</span><br><span class="line">    var len = arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = typeof left != <span class="string">'number'</span> ? 0 : left,</span><br><span class="line">        right = typeof right != <span class="string">'number'</span> ? len - 1 : right;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex-1);</span><br><span class="line">        quickSort(arr, partitionIndex+1, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> partition(arr, left ,right) &#123;     // 分区操作</span><br><span class="line">    var pivot = left,                      // 设定基准值（pivot）</span><br><span class="line">        index = pivot + 1;</span><br><span class="line">    <span class="keyword">for</span> (var i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            swap(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, pivot, index - 1);</span><br><span class="line">    <span class="built_in">return</span> index-1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> swap(arr, i, j) &#123;</span><br><span class="line">    var temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<h3 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h3><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。<h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><img data-src="3.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> insertionSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    var preIndex, current;</span><br><span class="line">    <span class="keyword">for</span> (var i = 1; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - 1;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + 1] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + 1] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-算法分析"><a href="#2-4-算法分析" class="headerlink" title="2.4 算法分析"></a>2.4 算法分析</h3>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>
</ul>
<hr>
<h2 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h2><p>1959年Shell发明，第一个突破O(n^2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p>
<h3 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 修改于 2019-03-06</span><br><span class="line"><span class="keyword">function</span> shellSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (var gap = Math.floor(len / 2); gap &gt; 0; gap = Math.floor(gap / 2)) &#123;</span><br><span class="line">        // 注意：这里和动图演示的不一样，动图是分组执行，实际操作是多个分组交替执行</span><br><span class="line">        <span class="keyword">for</span> (var i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            var j = i;</span><br><span class="line">            var current = arr[i];</span><br><span class="line">            <span class="keyword">while</span> (j - gap &gt;= 0 &amp;&amp; current &lt; arr[j - gap]) &#123;</span><br><span class="line">                 arr[j] = arr[j - gap];</span><br><span class="line">                 j = j - gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="5、选择排序"><a href="#5、选择排序" class="headerlink" title="5、选择排序"></a>5、选择排序</h2><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h3 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h3><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ul>
<li>初始状态：无序区为R[1..n]，有序区为空；</li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
<li>n-1趟结束，数组有序化了。<h3 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h3><img data-src="5.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> selectionSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    var minIndex, temp;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (var j = i + 1; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;     // 寻找最小的数</span><br><span class="line">                minIndex = j;                 // 将最小数的索引保存</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-4-算法分析"><a href="#5-4-算法分析" class="headerlink" title="5.4 算法分析"></a>5.4 算法分析</h3>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n^2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</li>
</ul>
<hr>
<h2 id="6、堆排序"><a href="#6、堆排序" class="headerlink" title="6、堆排序"></a>6、堆排序</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
<h3 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h3><ul>
<li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li>
<li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li>
<li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。<h3 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h3><img data-src="6.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var len;    // 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> buildMaxHeap(arr) &#123;   // 建立大顶堆</span><br><span class="line">    len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (var i = Math.floor(len/2); i &gt;= 0; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> heapify(arr, i) &#123;     // 堆调整</span><br><span class="line">    var left = 2 * i + 1,</span><br><span class="line">        right = 2 * i + 2,</span><br><span class="line">        largest = i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> swap(arr, i, j) &#123;</span><br><span class="line">    var temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> heapSort(arr) &#123;</span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (var i = arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">        swap(arr, 0, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="7、归并排序"><a href="#7、归并排序" class="headerlink" title="7、归并排序"></a>7、归并排序</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p>
<h3 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h3><ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列；</li>
<li>对这两个子序列分别采用归并排序；</li>
<li>将两个排序好的子序列合并成一个最终的排序序列。<h3 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h3><img data-src="7.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="7-3-代码实现"><a href="#7-3-代码实现" class="headerlink" title="7.3 代码实现"></a>7.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> mergeSort(arr) &#123;</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; 2) &#123;</span><br><span class="line">        <span class="built_in">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    var middle = Math.floor(len / 2),</span><br><span class="line">        left = arr.slice(0, middle),</span><br><span class="line">        right = arr.slice(middle);</span><br><span class="line">    <span class="built_in">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> merge(left, right) &#123;</span><br><span class="line">    var result = [];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (left.length&gt;0 &amp;&amp; right.length&gt;0) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[0] &lt;= right[0]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-4-算法分析"><a href="#7-4-算法分析" class="headerlink" title="7.4 算法分析"></a>7.4 算法分析</h3>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</li>
</ul>
<hr>
<h2 id="8、计数排序"><a href="#8、计数排序" class="headerlink" title="8、计数排序"></a>8、计数排序</h2><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<h3 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h3><ul>
<li>找出待排序的数组中最大和最小的元素；</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。<h3 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h3><img data-src="8.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> countingSort(arr, maxValue) &#123;</span><br><span class="line">    var bucket = new Array(maxValue + 1),</span><br><span class="line">        sortedIndex = 0;</span><br><span class="line">        arrLen = arr.length,</span><br><span class="line">        bucketLen = maxValue + 1;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; arrLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (var j = 0; j &lt; bucketLen; j++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(bucket[j] &gt; 0) &#123;</span><br><span class="line">            arr[sortedIndex++] = j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-4-算法分析"><a href="#8-4-算法分析" class="headerlink" title="8.4 算法分析"></a>8.4 算法分析</h3>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</li>
</ul>
<hr>
<h2 id="9、桶排序"><a href="#9、桶排序" class="headerlink" title="9、桶排序"></a>9、桶排序</h2><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p>
<h3 id="9-1-算法描述"><a href="#9-1-算法描述" class="headerlink" title="9.1 算法描述"></a>9.1 算法描述</h3><ul>
<li>设置一个定量的数组当作空桶；</li>
<li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>
<li>对每个不是空的桶进行排序；</li>
<li>从不是空的桶里把排好序的数据拼接起来。 <h3 id="9-2-动图演示"><a href="#9-2-动图演示" class="headerlink" title="9.2 动图演示"></a>9.2 动图演示</h3><img data-src="9.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="9-3-代码实现"><a href="#9-3-代码实现" class="headerlink" title="9.3 代码实现"></a>9.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> bucketSort(arr, bucketSize) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length === 0) &#123;</span><br><span class="line">      <span class="built_in">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    var i;</span><br><span class="line">    var minValue = arr[0];</span><br><span class="line">    var maxValue = arr[0];</span><br><span class="line">    <span class="keyword">for</span> (i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; minValue) &#123;</span><br><span class="line">          minValue = arr[i];                // 输入数据的最小值</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">          maxValue = arr[i];                // 输入数据的最大值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 桶的初始化</span><br><span class="line">    var DEFAULT_BUCKET_SIZE = 5;            // 设置桶的默认数量为5</span><br><span class="line">    bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;</span><br><span class="line">    var bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1;  </span><br><span class="line">    var buckets = new Array(bucketCount);</span><br><span class="line">    <span class="keyword">for</span> (i = 0; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        buckets[i] = [];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 利用映射函数将数据分配到各个桶中</span><br><span class="line">    <span class="keyword">for</span> (i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        buckets[Math.floor((arr[i] - minValue) / bucketSize)].push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    arr.length = 0;</span><br><span class="line">    <span class="keyword">for</span> (i = 0; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        insertionSort(buckets[i]);                      // 对每个桶进行排序，这里使用了插入排序</span><br><span class="line">        <span class="keyword">for</span> (var j = 0; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">            arr.push(buckets[i][j]);                     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="9-4-算法分析"><a href="#9-4-算法分析" class="headerlink" title="9.4 算法分析"></a>9.4 算法分析</h3>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 </li>
</ul>
<hr>
<h2 id="10、基数排序"><a href="#10、基数排序" class="headerlink" title="10、基数排序"></a>10、基数排序</h2><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p>
<h3 id="10-1-算法描述"><a href="#10-1-算法描述" class="headerlink" title="10.1 算法描述"></a>10.1 算法描述</h3><ul>
<li>取得数组中的最大数，并取得位数；</li>
<li>arr为原始数组，从最低位开始取每个位组成radix数组；</li>
<li>对radix进行计数排序（利用计数排序适用于小范围数的特点）； <h3 id="10-2-动图演示"><a href="#10-2-动图演示" class="headerlink" title="10.2 动图演示"></a>10.2 动图演示</h3><img data-src="10.2%E6%BC%94%E7%A4%BA.gif" alt=""><h3 id="10-3-代码实现"><a href="#10-3-代码实现" class="headerlink" title="10.3 代码实现"></a>10.3 代码实现</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var counter = [];</span><br><span class="line"><span class="keyword">function</span> radixSort(arr, maxDigit) &#123;</span><br><span class="line">    var mod = 10;</span><br><span class="line">    var dev = 1;</span><br><span class="line">    <span class="keyword">for</span> (var i = 0; i &lt; maxDigit; i++, dev *= 10, mod *= 10) &#123;</span><br><span class="line">        <span class="keyword">for</span>(var j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">            var bucket = parseInt((arr[j] % mod) / dev);</span><br><span class="line">            <span class="keyword">if</span>(counter[bucket]==null) &#123;</span><br><span class="line">                counter[bucket] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        var pos = 0;</span><br><span class="line">        <span class="keyword">for</span>(var j = 0; j &lt; counter.length; j++) &#123;</span><br><span class="line">            var value = null;</span><br><span class="line">            <span class="keyword">if</span>(counter[j]!=null) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((value = counter[j].<span class="built_in">shift</span>()) != null) &#123;</span><br><span class="line">                      arr[pos++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="10-4-算法分析"><a href="#10-4-算法分析" class="headerlink" title="10.4 算法分析"></a>10.4 算法分析</h3>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。</li>
</ul>
<p>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo过滤文章</title>
    <url>/20190609/hexo%E8%BF%87%E6%BB%A4%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>转载 <a href="https://github.com/Jamling/hexo-generator-index2" target="_blank" rel="noopener">hexo-generator-index2</a></p>
<a id="more"></a>

<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>带过滤功能的Hexo首页生成器插件。在官方的首页生成器基础上添加了过滤指定分类/标签的功能。比如，在首页只显示指定分类下面的文章列表。<br>除此之外，它还在指定的目录下生成指定类型的文章，比如在web目录下生成Web相关的文章。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://github.com/Jamling/hexo-generator-index2" target="_blank" rel="noopener">hexo-generator-index2</a>可以完全替代官方的<a href="https://github.com/hexojs/hexo-generator-index" target="_blank" rel="noopener">hexo-generator-index</a>，所以安装之后，先卸载官方的插件，不然会引起一些冲突。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm unnstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index2 --save</span><br></pre></td></tr></table></figure>

<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">index2 generator是否包含官方的hexo-generator-index，默认true（包含）</span><br><span class="line"></span><br><span class="line">index2<span class="emphasis">_include_</span>index: true # defult is true</span><br><span class="line"></span><br><span class="line">index2_generator:</span><br><span class="line"><span class="bullet">  - </span>layout: 'archive' # use existing archive layout</span><br><span class="line"><span class="code">    path: 'web' # output to web folder: http://127.0.0.1:4000/web/</span></span><br><span class="line"><span class="code">    per_page: 10</span></span><br><span class="line"><span class="code">    order_by: -date</span></span><br><span class="line"><span class="code">    include:</span></span><br><span class="line"><span class="bullet">      - </span>category Web # include article which category is Web</span><br><span class="line"><span class="code">    exclude:</span></span><br><span class="line"><span class="bullet">      - </span>tag Hexo # exclude article which tag is Hexo</span><br><span class="line"><span class="bullet">  - </span>layout: 'index' # use existing index layout</span><br><span class="line"><span class="code">    path: '' # output to root directory: http://127.0.0.1:4000/</span></span><br><span class="line"><span class="code">    index: true # Set whether index, results is_home() is true or not</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span><span class="strong">**per_page**</span>: 每页显示的帖子. (0 = 禁用分页)</span><br><span class="line"><span class="bullet">- </span><span class="strong">**order_by**</span>: 排序 Posts. (默认情况下按日期降序排序)</span><br><span class="line"><span class="bullet">- </span><span class="strong">**layout**</span>: 设置 layout, 默认为 <span class="code">`index`</span></span><br><span class="line"><span class="bullet">- </span><span class="strong">**path**</span>: 输出路径, 如果路径是 <span class="code">`''`</span>, 表示输出到根目录 (http://127.0.0.1:4000/ )</span><br><span class="line"><span class="bullet">- </span><span class="strong">**index**</span>: Home index or not, if <span class="code">`true`</span> and the path is <span class="code">`''`</span>, same to offical [<span class="string">hexo-generator-index</span>](<span class="link">https://github.com/hexojs/hexo-generator-index</span>)</span><br><span class="line"><span class="bullet">- </span><span class="strong">**include**</span>: 帖子过滤器包括选项</span><br><span class="line"><span class="bullet">- </span><span class="strong">**exclude**</span>: 帖子过滤器排除选项</span><br></pre></td></tr></table></figure>

<p>除了include和exclude，其它如<em>per_page</em>和<em>order_by</em>都是原有的官方首页生成器选项，不必更改。</p>
<p>Include/exclude 选项格式为<code>属性 值</code>（注意，属性与值中间有个英文的空格），可选的属性有：</p>
<ul>
<li>category: 文章分类</li>
<li>tag: 文章标签</li>
<li>path: 文章源路径</li>
</ul>
<hr>
<h1 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h1><ol>
<li>正如安装时所说，index和index2不能同时存在；</li>
<li>配置时注意<code>include</code>和<code>exclude</code>两个选项，它们的属性最好保留，这样只需要在需要过滤掉的文章里添加 <code>tag: hide</code></li>
</ol>
<hr>
<p>参考文章：<a href="https://github.com/Jamling/hexo-generator-index2/blob/master/README_zh.md" target="_blank" rel="noopener">过滤插件-Git</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>音乐API</title>
    <url>/20200322/%E9%9F%B3%E4%B9%90api/</url>
    <content><![CDATA[<h1 id="一、-网易"><a href="#一、-网易" class="headerlink" title="一、 网易"></a>一、 网易</h1><h3 id="1-何以诚-网易云音乐API分析-CSDN"><a href="#1-何以诚-网易云音乐API分析-CSDN" class="headerlink" title="1. 何以诚.网易云音乐API分析.CSDN"></a>1. <a href="https://blog.csdn.net/u013022222/article/details/51707352" target="_blank" rel="noopener">何以诚.网易云音乐API分析.CSDN</a></h3><a id="more"></a>


<h1 id="QQ音乐"><a href="#QQ音乐" class="headerlink" title="QQ音乐"></a>QQ音乐</h1><p>参考资料：</p>
<ul>
<li><p>官方</p>
<ul>
<li><a href="https://y.qq.com/m/api/open/index.html" target="_blank" rel="noopener">QQ音乐 | 移动WEB接入说明</a></li>
</ul>
</li>
<li><p>简书</p>
<ul>
<li><a href="https://www.jianshu.com/p/67e4bd47d981" target="_blank" rel="noopener">QQ音乐api的使用</a></li>
<li><a href="https://www.jianshu.com/p/ce1180eac37b" target="_blank" rel="noopener">QQ音乐网页接口分析</a></li>
<li><a href="https://www.jianshu.com/p/e3c8b4b39c11" target="_blank" rel="noopener">qq音乐api接口</a></li>
</ul>
</li>
<li><p>CSDN</p>
<ul>
<li><a href="https://blog.csdn.net/qq_41979349/article/details/102458551" target="_blank" rel="noopener">2019最新QQ音乐Api</a></li>
</ul>
</li>
</ul>
<h1 id="二、-酷狗"><a href="#二、-酷狗" class="headerlink" title="二、 酷狗"></a>二、 酷狗</h1><h1 id="虾米"><a href="#虾米" class="headerlink" title="虾米"></a>虾米</h1><h1 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h1><h1 id="一听"><a href="#一听" class="headerlink" title="一听"></a>一听</h1><h1 id="咪咕"><a href="#咪咕" class="headerlink" title="咪咕"></a>咪咕</h1><h1 id="荔枝"><a href="#荔枝" class="headerlink" title="荔枝"></a>荔枝</h1><h1 id="蜻蜓"><a href="#蜻蜓" class="headerlink" title="蜻蜓"></a>蜻蜓</h1><h1 id="喜马拉雅"><a href="#喜马拉雅" class="headerlink" title="喜马拉雅"></a>喜马拉雅</h1><h1 id="全民K歌"><a href="#全民K歌" class="headerlink" title="全民K歌"></a>全民K歌</h1><h1 id="5sing原创"><a href="#5sing原创" class="headerlink" title="5sing原创"></a>5sing原创</h1><h1 id="5sing翻唱"><a href="#5sing翻唱" class="headerlink" title="5sing翻唱"></a>5sing翻唱</h1>]]></content>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-添加音乐播放器</title>
    <url>/20200303/hexo-%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在此使用的是<a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%85%A5%E9%97%A8" target="_blank" rel="noopener"> Aplayer.MoePlayer.GitHub </a> ，在Next(Gemini)主题下设置。<br>本文是自主创建，也可使用<a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a>插件。<br>搭配<a href="https://github.com/maicong/music" target="_blank" rel="noopener"> 音乐搜索器.maicong.GitHub </a> 使用更佳</p>
</blockquote>
<h1 id="一、-安装"><a href="#一、-安装" class="headerlink" title="一、 安装"></a>一、 安装</h1><p>在GitHub下载 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">Aplayer</a>，然后将<code>dist</code>文件夹复制到<code>themes/next/source</code>文件夹下。</p>
<ul>
<li>注：尝试复制到 <code>source</code>文件夹下失败。</li>
</ul>
<a id="more"></a>

<h1 id="二、-配置"><a href="#二、-配置" class="headerlink" title="二、 配置"></a>二、 配置</h1><p>新建 <code>themes/next/source/dist/music.js</code> 文件，添加内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">'aplayer'</span>),</span><br><span class="line">    </span><br><span class="line">    fixed: <span class="literal">true</span>, 		<span class="comment">// 吸底模式</span></span><br><span class="line">    autoplay: <span class="literal">true</span>,		<span class="comment">// 自动播放</span></span><br><span class="line">    theme: <span class="string">'#b7daff'</span> ,	<span class="comment">//主题色</span></span><br><span class="line">    loop: <span class="string">'all'</span>, 		<span class="comment">// 循环播放, 可选值: 'all', 'one', 'none'</span></span><br><span class="line">    order: <span class="string">'list'</span>,		<span class="comment">// 循环顺序, 可选值: 'list', 'random'</span></span><br><span class="line">    volume: <span class="number">0.7</span>,		<span class="comment">// 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">    mutex: <span class="literal">true</span>,		<span class="comment">// 阻止多个播放器同时播放</span></span><br><span class="line">    listFolded: <span class="literal">false</span>,	<span class="comment">// 是否列表 默认折叠</span></span><br><span class="line">    listMaxHeight: <span class="number">90</span>,	<span class="comment">// 列表最大高度</span></span><br><span class="line">    lrcType: <span class="number">1</span>,</span><br><span class="line">    audio: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">"清新的小女孩 (For Ma)"</span>, 		<span class="comment">//名称</span></span><br><span class="line">            artist: <span class="string">'July Tun'</span>,			<span class="comment">// 艺术家 </span></span><br><span class="line">            url: <span class="string">'http://antiserver.kuwo.cn/anti.s?useless=/resource/&amp;format=mp3&amp;rid=MUSIC_72891154&amp;response=res&amp;type=convert_url&amp;'</span>,				<span class="comment">//链接 </span></span><br><span class="line">            cover: <span class="string">'http://imge.kugou.com/stdmusic/150/20200114/20200114142306429193.jpg'</span>,	<span class="comment">//封面</span></span><br><span class="line">            lrc: <span class="string">'[00:1.21]清新的小女孩 - ไทย[00:14.88]႐ိုး႐ိုးေလးနဲ႔ လွေနတယ္ မရယ္[00:20.31]清新脱俗的女孩[00:20.31]ဆန္း၂ျပား၂မ၀တ္ပါနဲ႔လားကြယ္[00:28.58]你不需要刻意打扮穿着[00:28.58]ကမ႓ာေက်ာ္တဲ့ မင္းသမီးေတာင္[00:33.54]你的美貌[00:33.54]ေငးေမာေလာက္တယ္ မရဲ႕ အလွေတြရယ္[00:40.37]哪怕国际女星都会仰慕[00:40.37]မိုးျမင့္ထက္က ေငြၾကယ္ကေလးလိုပဲ[00:43.95]你清澈的眼眸[00:43.95]ေတာက္ပလြန္းတဲ့ ဒီမ်က္လံုးေတြနဲ႔[00:47.2]就像银河里的星星[00:47.2]ဖမ္းစားညိႇဳ႕တက္တယ္ ေမ့လို႔မရႏိုင္[00:51.57]你如此迷人，让人难以忘怀[00:51.57]မရဲ႕အၿပံဳးေတြထဲ[00:53.16]你的笑容里[00:53.16]ထူးျခားလြန္းတဲ့ မရဲ႕အလွေတြလည္း[00:57.03]有种不同寻常的美[00:57.03]ဟိုးေရွးဘ၀ကေတာင္းဆုျဖစ္မယ္[01:00.03]一定是你前世修来的[01:00.03]႐ူးခဲ့ရသူ ရင္ထဲလည္း[01:05.38]内心疯狂的想念你[01:05.38]မရဲ႕အေၾကာင္းေတြ အခ်ိန္တိုင္းပဲ[01:12.25]每分每秒都在想你[01:12.25]ေက်ာင္း၀န္းထဲက အလွနတ္သမီးေတြလည္း[01:38.68]你就像校园里的女神一样[01:38.68]မရဲ႕အလွကုိ လံုး၀မမီွႏိုင္တယ္[01:45.07]你是世上最美的女孩[01:45.07]အရမ္းလွတဲ့သူ မ ရယ္[01:49.1]美丽的女孩[01:49.1]ခ်စ္ပါရေစေတာ့ကြယ္[01:55.52]让我爱上你吧[01:55.52]မရဲ႕အခ်စ္နဲ႔ျပည့္စံုၿပီေပါ့ တကယ္[01:63.48]有你的微笑我就心满意足了[01:63.48]ေက်းဇူးျပဳ၍ မမုန္းပါနဲ႔လားကြယ္[01:68.97]只求你不要讨厌我[01:68.97]ဒီကမ႓ာမွာ မတစ္ေယာက္သာ ေတာင္းတမိတယ္[01:75.42]在这世界上，只为你一个人着迷[01:75.42]က်ေနာ့္ရဲ႕ အခ်စ္အိမ္ထဲ[01:82.08]在我的心里[01:82.08]ေမ့လို႔မရတဲ့ အိပ္မက္ထဲမွာပဲ[01:86.63]即使在梦里也忘不了你[01:86.63]စိုးမိုးထားခဲ့ ဒီအၾကည့္ေတြနဲ႔[01:91.75]你看我的样子[01:91.75]႐ူးသြပ္ခဲ့ရတယ္[01:92.52]让我痴迷[01:92.52]မရဲ႕အလွမွာ ႐ုန္းလို႔မထြက္ႏိုင္ခဲ့[01:98.42]沉醉于你的美貌无法自拔[01:98.42]ထူးျခားလြန္းတဲ့ မရဲ႕အလွေတြလည္း[02:04.72]有种不同寻常的美[02:04.72]ဟိုးေရွးဘ၀ကေတာင္းဆုျဖစ္မယ္[02:07.07]一定是你前世修来的[02:07.07]႐ူးခဲ့ရသူ ရင္ထဲလည္း[02:08.95]内心疯狂的想念你[02:08.95]မရဲ႕အေၾကာင္းေတြ အခ်ိန္တိုင္းပဲ[02:14.5]每分每秒都在想你[02:14.5]ေက်ာင္း၀န္းထဲက အလွနတ္သမီးေတြလည္း[02:2.]你就像校园里的女神一样[02:2.]မရဲ႕အလွကုိ လံုး၀မမီွႏိုင္တယ္[02:22.47]你是世上最美的女孩[02:22.47]အရမ္းလွတဲ့သူ မ ရယ္[02:26.42]美丽的女孩[02:26.42]ခ်စ္ပါရေစေတာ့ကြယ္[02:27.35]让我爱上你吧[02:27.35]ထူးျခားလြန္းတဲ့ မရဲ႕အလွေတြလည္း[02:53.62]有种不同寻常的美[02:53.62]ဟိုးေရွးဘ၀ကေတာင္းဆုျဖစ္မယ္[02:59.63]一定是你前世修来的[02:59.63]႐ူးခဲ့ရသူ ရင္ထဲလည္း[02:60.62]内心疯狂的想念你[02:60.62]မရဲ႕အေၾကာင္းေတြ အခ်ိန္တိုင္းပဲ[02:66.42]每分每秒都在想你[02:66.42]ေက်ာင္း၀န္းထဲက အလွနတ္သမီးေတြလည္း[02:69.92]你就像校园里的女神一样[02:69.92]မရဲ႕အလွကုိ လံုး၀မမီွႏိုင္တယ္[02:76.1]你是世上最美的女孩[02:76.1]အရမ္းလွတဲ့သူ မ ရယ္[02:77.75]美丽的女孩[02:77.75]ခ်စ္ပါရေစေတာ့ကြယ္[02:80.02]让我爱上你吧[02:80.02]ထူးျခားလြန္းတဲ့ မရဲ႕အလွေတြလည္း[02:85.43]有种不同寻常的美[02:85.43]ဟိုးေရွးဘ၀ကေတာင္းဆုျဖစ္မယ္[02:88.47]一定是你前世修来的[02:88.47]႐ူးခဲ့ရသူ ရင္ထဲလည္း[03:00.55]内心疯狂的想念你[03:00.55]မရဲ႕အေၾကာင္းေတြ အခ်ိန္တိုင္းပဲ[03:25.13]每分每秒都在想你[03:25.13]ေက်ာင္း၀န္းထဲက အလွနတ္သမီးေတြလည္း[03:40.78]你就像校园里的女神一样[03:40.78]မရဲ႕အလွကုိ လံုး၀မမီွႏိုင္တယ္[03:66.85]你是世上最美的女孩[03:66.85]အရမ္းလွတဲ့သူ မ ရယ္[03:72.58]美丽的女孩[03:72.58]ခ်စ္ပါရေစေတာ့ကြယ္[03:78.85]让我爱上你吧[03:78.85]ေက်းဇူးျပဳ၍ မရက္စက္လိုက္ပါနဲ႔[03:84.72]请不要拒绝我'</span>,</span><br><span class="line">            <span class="comment">//theme: '#b7daff', 			//音频时的主题色</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>更多参见<a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%85%A5%E9%97%A8" target="_blank" rel="noopener">Aplayer 官网</a></li>
</ul>
<h1 id="三、-添加到侧边栏"><a href="#三、-添加到侧边栏" class="headerlink" title="三、 添加到侧边栏"></a>三、 添加到侧边栏</h1><p>将外链插入到Hexo根路径的侧边栏文件中： <code>themes/next/layout/_macro/sidebar.swig</code> ，即侧边栏友情链接 <code>theme.links</code> 这一项之后。</p>
<blockquote>
<p>后更换到 <code>themes/next/layout/_layout.swig</code>  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.links %&#125;</span><br><span class="line">    ....省略部分代码</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 音乐 插件 --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/dist/APlayer.min.css"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"aplayer"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/APlayer.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/dist/music.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 音乐 插件 --&gt;</span><br></pre></td></tr></table></figure>

<h1 id="四、-修改搜索器"><a href="#四、-修改搜索器" class="headerlink" title="四、 修改搜索器"></a>四、 修改搜索器</h1><p>有了<a href="https://github.com/maicong/music" target="_blank" rel="noopener">音乐搜索器</a> 当然要稍稍修改下，使其用起来更便利些。<br>由于是PHP代码，自然不能在静态博客上使用，所以~~<del>（爱怎么搭怎么搭吧）</del></p>
<details>
<summary>修改 <code>template\index.php</code>文件，找到id为 <code>j-main</code>的form 【此处折叠】 </summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"j-main"</span> <span class="attr">class</span>=<span class="string">"am-form am-u-md-12 am-u-sm-centered music-main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"j-back"</span> <span class="attr">class</span>=<span class="string">"am-btn am-btn-success am-btn-lg am-btn-block am-radius am-margin-bottom-lg"</span>&gt;</span>成功 Get <span class="symbol">&amp;#x221A;</span> 返回继续 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-reply am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-g am-margin-bottom-sm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐ID', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-list-ol am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-songid"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐地址', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-link am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-link"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-btn"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"j-link-btn"</span> <span class="attr">class</span>=<span class="string">"am-btn am-btn-default"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-external-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐链接', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-music am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-src"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-btn"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"j-src-btn"</span> <span class="attr">class</span>=<span class="string">"am-btn am-btn-default"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"j-src-btn-icon"</span> <span class="attr">class</span>=<span class="string">"am-icon-external-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐歌词', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-file-text-o am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-lrc"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-btn"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"j-lrc-btn"</span> <span class="attr">class</span>=<span class="string">"am-btn am-btn-default"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">id</span>=<span class="string">"j-lrc-btn-icon"</span> <span class="attr">class</span>=<span class="string">"am-icon-external-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-g"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐名称', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-tag am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-name"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐作者', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-user am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-author"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐图片', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-tag am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-pic"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-input-group am-input-group-sm am-margin-bottom-sm"</span> <span class="attr">data-am-popover</span>=<span class="string">"&#123;content: '音乐源', trigger: 'hover'&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"am-input-group-label"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"am-icon-user am-icon-fw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"j-from"</span> <span class="attr">class</span>=<span class="string">"am-form-field"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-g"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-u-lg-12"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span> <span class="attr">data-am-widget</span>=<span class="string">"accordion"</span> <span class="attr">class</span>=<span class="string">"am-accordion am-accordion-gapped"</span> <span class="attr">data-am-accordion</span>=<span class="string">'&#123;  &#125;'</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"am-accordion-item am-active"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">"am-accordion-title"</span>&gt;</span></span><br><span class="line">                  Aplayer ：</span><br><span class="line">                <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">"am-accordion-bd am-collapse am-in"</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!-- 规避 Collapase 处理有 padding 的折叠内容计算计算有误问题， 加一个容器 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"am-accordion-content"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">id</span>=<span class="string">"doc-ta-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"j-show"</span> <span class="attr">class</span>=<span class="string">"am-margin-vertical"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"j-player"</span> <span class="attr">class</span>=<span class="string">"aplayer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</details>

<details>
<summary>修改 <code>static\music.js</code>文件，找到定义<code>setValue</code>函数的位置，在代码块中追加 【此处折叠】 </summary>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#j-pic'</span>).val(data.pic);</span><br><span class="line">$(<span class="string">'#j-from'</span>).val(data.type);</span><br><span class="line">$(<span class="string">'#doc-ta-1'</span>).val(</span><br><span class="line">    <span class="string">'name: "'</span>+ data.title +<span class="string">'",\n'</span>+</span><br><span class="line">    <span class="string">'artist: "'</span>+ data.author +<span class="string">'",\n'</span>+</span><br><span class="line">    <span class="string">'url: "'</span>+ data.url +<span class="string">'",\n'</span>+</span><br><span class="line">    <span class="string">'cover: "'</span>+ data.pic +<span class="string">'",\n'</span>+</span><br><span class="line">    <span class="string">'lrc: "'</span>+ data.lrc.replace(<span class="regexp">/\n|\r/g</span>,<span class="string">""</span>) +<span class="string">'",\n'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</details>

<h1 id="五、-参考"><a href="#五、-参考" class="headerlink" title="五、 参考"></a>五、 参考</h1><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md" target="_blank" rel="noopener">GitHub-aplayer</a><br><a href="https://www.jianshu.com/p/f1005ae09e5a" target="_blank" rel="noopener">简书 - Hexo添加Aplayer播放器</a><br><a href="https://www.jianshu.com/p/822a1a12d471" target="_blank" rel="noopener">简书 - Hexo增加APlayer音乐播放功能</a><br><a href="https://www.jianshu.com/p/26a7fc7cc185" target="_blank" rel="noopener">简书 - Hexo博客中插入音乐/视频/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS字体样式</title>
    <url>/20200402/css%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>收藏了几个CSS字体样式</p>
<h1 id="打开Web-编辑器进行调试"><a href="#打开Web-编辑器进行调试" class="headerlink" title="打开Web 编辑器进行调试"></a><a href="https://c.runoob.com/front-end/61" target="_blank" rel="noopener">打开Web 编辑器进行调试</a></h1><h1 id="一-CSS字体颜色渐变"><a href="#一-CSS字体颜色渐变" class="headerlink" title="一. CSS字体颜色渐变"></a>一. CSS字体颜色渐变</h1><p class="myStyle"> 示例: CSS字体颜色渐变,注意调整width </p>
<style>
.myStyle{
    background-image: linear-gradient(to right, red, orange, yellow, green, yellow, orange, red, orange, yellow, green, yellow, orange, red);
    -webkit-background-clip: text;
    animation: move 5s infinite;
    color: transparent;
    width: 330px;
}
@keyframes move{
  0%{
    background-position: 0 0;
  }
  100% {
      background-position: -330px 0;
  }
}
</style>


<a id="more"></a>

<figure class="highlight html"><figcaption><span>CSS字体颜色渐变</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"myStyle"</span>&gt;</span> 示例: CSS字体颜色渐变,注意调整width <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.myStyle</span>&#123;</span></span><br><span class="line">    background-image: linear-gradient(to right, red, orange, yellow, green, yellow, orange, red, orange, yellow, green, yellow, orange, red);</span><br><span class="line">    -webkit-background-clip: text;</span><br><span class="line">    animation: move 5s infinite;</span><br><span class="line">    color: transparent;</span><br><span class="line">    width: 330px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line">  0%&#123;</span><br><span class="line">    background-position: 0 0;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">      background-position: -330px 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二-CSS-文字动画"><a href="#二-CSS-文字动画" class="headerlink" title="二. CSS 文字动画"></a>二. CSS 文字动画</h1><svg width="100%" height="80">
<text text-anchor="middle" x="50%" y="70%" class="text text-1">一段文字</text>
<text text-anchor="middle" x="50%" y="70%" class="text text-2">一段文字</text>
<text text-anchor="middle" x="50%" y="70%" class="text text-3">一段文字</text>
<text text-anchor="middle" x="50%" y="70%" class="text text-4">一段文字</text>
</svg>
<style>
.text {
    font-size: 44px;
    font-weight: bold;
    text-transform: uppercase;
    fill: none;
    stroke-width: 2px;
    stroke-dasharray: 90 310;
    animation: stroke 6s infinite linear;
    background:#000;
}
.text-1 {
    stroke: #3498db;
    text-shadow: 0 0 5px #3498db;
    animation-delay: -1.5s;
}
.text-2 {
    stroke: #f39c12;
    text-shadow: 0 0 5px #f39c12;
    animation-delay: -3s;
}
.text-3 {
    stroke: #e74c3c;
    text-shadow: 0 0 5px #e74c3c;
    animation-delay: -4.5s;
}
.text-4 {
    stroke: #9b59b6;
    text-shadow: 0 0 5px #9b59b6;
    animation-delay: -6s;
}
@keyframes stroke {
    100% {
        stroke-dashoffset: -400;
    }
}
</style>

<figure class="highlight html"><figcaption><span>CSS 文字动画</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"80"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"70%"</span> <span class="attr">class</span>=<span class="string">"text text-1"</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"70%"</span> <span class="attr">class</span>=<span class="string">"text text-2"</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"70%"</span> <span class="attr">class</span>=<span class="string">"text text-3"</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"70%"</span> <span class="attr">class</span>=<span class="string">"text text-4"</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.text</span> &#123;</span></span><br><span class="line">    font-size: 44px;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    text-transform: uppercase;</span><br><span class="line">    fill: none;</span><br><span class="line">    stroke-width: 2px;</span><br><span class="line">    stroke-dasharray: 90 310;</span><br><span class="line">    animation: stroke 6s infinite linear;</span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>:<span class="selector-id">#000</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.text-1</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">stroke</span>: <span class="selector-id">#3498db</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">text-shadow</span>: 0 0 5<span class="selector-tag">px</span> <span class="selector-id">#3498db</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">animation-delay</span>: <span class="selector-tag">-1</span><span class="selector-class">.5s</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.text-2</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">stroke</span>: <span class="selector-id">#f39c12</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">text-shadow</span>: 0 0 5<span class="selector-tag">px</span> <span class="selector-id">#f39c12</span>;</span></span><br><span class="line">    animation-delay: -3s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.text-3</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">stroke</span>: <span class="selector-id">#e74c3c</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">text-shadow</span>: 0 0 5<span class="selector-tag">px</span> <span class="selector-id">#e74c3c</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">animation-delay</span>: <span class="selector-tag">-4</span><span class="selector-class">.5s</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.text-4</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">stroke</span>: <span class="selector-id">#9b59b6</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">text-shadow</span>: 0 0 5<span class="selector-tag">px</span> <span class="selector-id">#9b59b6</span>;</span></span><br><span class="line">    animation-delay: -6s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> stroke &#123;</span></span><br><span class="line">    100% &#123;</span><br><span class="line">        stroke-dashoffset: -400;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>无妄之心</title>
    <url>/20200402/%E6%97%A0%E5%A6%84%E4%B9%8B%E5%BF%83/</url>
    <content><![CDATA[<a id="more"></a>

<hr>
<p>111</p>
<hr>
<p>22</p>
<hr>
<p>333</p>
]]></content>
      <categories>
        <category>hide</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo-添加友链页面</title>
    <url>/20200331/hexo-%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>在此使用的是NexT主题，自己创建一个友情链接页面。</p>
<hr>
<h1 id="1-添加友链页面"><a href="#1-添加友链页面" class="headerlink" title="1. 添加友链页面"></a>1. 添加友链页面</h1><ol>
<li>添加页面</li>
</ol>
<p>在 <code>./source/</code> 目录下创建<code>links/index.md</code>，</p>
<p>或执行命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>links</span><br></pre></td></tr></table></figure>


<p>可以在文件内写友链声明等内容，将会被放在友链后。</p>
<a id="more"></a>

<h1 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2. 修改配置"></a>2. 修改配置</h1><p>修改主题配置文件</p>
<figure class="highlight bash"><figcaption><span>./themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  ···</span><br><span class="line">  links: /links/ || link</span><br></pre></td></tr></table></figure>

<p>修改主题语言配置文件，以<code>zh-Hans.yml</code>为例</p>
<figure class="highlight bash"><figcaption><span>./themes/next/language/zh-Hans.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  ···</span><br><span class="line">  links: 友链 <span class="comment"># 新增该选项表示新增“友链”菜单</span></span><br></pre></td></tr></table></figure>


<h1 id="3-添加模板"><a href="#3-添加模板" class="headerlink" title="3. 添加模板"></a>3. 添加模板</h1><p>创建<code>./themes/next/layout/links.swig</code>文件</p>
<details>
<summary>在此贴上我的代码， 【此处折叠】 </summary>

<figure class="highlight javascript"><figcaption><span>links.swig.txt</span><a href="/downloads/code/links.swig.txt">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">{% block content %}</span><br><span class="line">  {######################}</span><br><span class="line">  {### LINKS BLOCK ###}</span><br><span class="line">  {######################}</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 引入样式 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span><br><span class="line">    &lt;!-- 引入组件库 --&gt;</span><br><span class="line">    &lt;script src=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">	&lt;script src="https:/</span><span class="regexp">/unpkg.com/</span>element-ui/lib/index.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">	&lt;!-- 引入MDUI --&gt;</span></span><br><span class="line"><span class="string">	&lt;link rel="</span>stylesheet<span class="string">" href="</span><span class="comment">//cdnjs.cloudflare.com/ajax/libs/mdui/0.4.3/css/mdui.min.css"&gt;</span></span><br><span class="line">    &lt;script src=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/mdui/0.4.3/js/mdui.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">	&lt;!-- 引入Mystyle样式 --&gt;</span></span><br><span class="line"><span class="regexp">	&lt;link rel="stylesheet" href="/</span>css/mystyle.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">    &lt;div id="</span>links<span class="string">"&gt;</span></span><br><span class="line"><span class="string">		&lt;el-tooltip :content="</span> <span class="string">'当前样式: '</span> + value <span class="string">" placement="</span>top<span class="string">"&gt;</span></span><br><span class="line"><span class="string">		    &lt;el-switch</span></span><br><span class="line"><span class="string">		      v-model="</span>value<span class="string">"</span></span><br><span class="line">              active-color="#13ce66"</span><br><span class="line">              inactive-color=<span class="string">"#ff4949"</span></span><br><span class="line">              </span><br><span class="line">              active-value=<span class="string">"default"</span></span><br><span class="line">              inactive-value=<span class="string">"square"</span></span><br><span class="line">              @change = changeStyleClass&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-switch&gt;</span></span><br><span class="line"><span class="regexp">		&lt;/</span>el-tooltip&gt;</span><br><span class="line">          </span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"links-content"</span>&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"mdui-panel mdui-panel-gapless "</span> mdui-panel=<span class="string">"{accordion: false}"</span>&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"mdui-panel-item mdui-panel-item-open"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"mdui-panel-item-header no-icon note warning"</span>&gt;</span><br><span class="line">                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"link-info"</span>&gt;👨‍🎓 跟着大佬走，成为小大佬&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">					&lt;i class="mdui-panel-item-arrow mdui-icon material-icons"&gt;keyboard_arrow_down&lt;/i</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">				</span></span><br><span class="line"><span class="regexp">				&lt;div class="mdui-panel-item-body link-navigation"&gt;</span></span><br><span class="line"><span class="regexp">				</span></span><br><span class="line"><span class="regexp">					{% for link in site.data.links.defaultlinks  %}</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">						&lt;div class="card"&gt;</span></span><br><span class="line"><span class="regexp">							&lt;a class="link" href="{{ link.site }}" target="_blank"&gt;</span></span><br><span class="line"><span class="regexp">							&lt;el-avatar {% if site.data.links.shape === 'square' %} shape="square" {% else %} shape="circle" {% endif %}</span></span><br><span class="line"><span class="regexp">								:size="60" </span></span><br><span class="line"><span class="regexp">								fit="contain"</span></span><br><span class="line"><span class="regexp">								src="{% if link.avatar !== '' %}{{ link.avatar }}{% endif %}" </span></span><br><span class="line"><span class="regexp">								@error="errorHandler"&gt;</span></span><br><span class="line"><span class="regexp">								</span></span><br><span class="line"><span class="regexp">							      &lt;img class="ava" src="{{ site.data.links.defaultPic }}"/</span>&gt;</span><br><span class="line">                            &lt;<span class="regexp">/el-avatar&gt;</span></span><br><span class="line"><span class="regexp">							</span></span><br><span class="line"><span class="regexp">								&lt;div class="card-header"&gt;</span></span><br><span class="line"><span class="regexp">									&lt;div&gt;{{ link.nickname }}&lt;/</span>div&gt;</span><br><span class="line">                                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"info"</span>&gt;{{ link.info }}&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">								&lt;/</span>div&gt;</span><br><span class="line">                            &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">						&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">                    {% endfor %}</span><br><span class="line"></span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"mdui-panel-item mdui-panel-item-open"</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"mdui-panel-item-header no-icon note primary"</span>&gt;</span><br><span class="line">                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"link-info"</span>&gt;🍭 五湖四海的朋友们&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">					&lt;i class="mdui-panel-item-arrow mdui-icon material-icons"&gt;keyboard_arrow_down&lt;/i</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">				&lt;div class="mdui-panel-item-body link-navigation"&gt;</span></span><br><span class="line"><span class="regexp">				</span></span><br><span class="line"><span class="regexp">					{% for link in site.data.links.friendslinks  %}</span></span><br><span class="line"><span class="regexp">				</span></span><br><span class="line"><span class="regexp">						&lt;div class="card"&gt;</span></span><br><span class="line"><span class="regexp">							&lt;a class="link" href="{{ link.site }}" target="_blank"&gt;</span></span><br><span class="line"><span class="regexp">							&lt;el-avatar {% if site.data.links.shape === 'square' %} shape="square" {% else %} shape="circle" {% endif %}</span></span><br><span class="line"><span class="regexp">								:size="60" </span></span><br><span class="line"><span class="regexp">								fit="contain"</span></span><br><span class="line"><span class="regexp">								src="{% if link.avatar !== '' %}{{ link.avatar }}{% endif %}" </span></span><br><span class="line"><span class="regexp">								@error="errorHandler"&gt;</span></span><br><span class="line"><span class="regexp">								</span></span><br><span class="line"><span class="regexp">							      &lt;img class="ava" src="{{ site.data.links.defaultPic }}"/</span>&gt;</span><br><span class="line">                            &lt;<span class="regexp">/el-avatar&gt;</span></span><br><span class="line"><span class="regexp">							</span></span><br><span class="line"><span class="regexp">								&lt;div class="card-header"&gt;</span></span><br><span class="line"><span class="regexp">									&lt;div&gt;{{ link.nickname }}&lt;/</span>div&gt;</span><br><span class="line">                                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"info"</span>&gt;{{ link.info }}&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">								&lt;/</span>div&gt;</span><br><span class="line">                            &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">						&lt;/</span>div&gt;</span><br><span class="line">                </span><br><span class="line">                    {% endfor %}</span><br><span class="line">                </span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">			&lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">		{{ page.content }}</span></span><br><span class="line"><span class="regexp">		&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">new Vue({</span></span><br><span class="line"><span class="regexp">	el: '#links',</span></span><br><span class="line"><span class="regexp">	data: function() {</span></span><br><span class="line"><span class="regexp">		return { </span></span><br><span class="line"><span class="regexp">			value: 'default',</span></span><br><span class="line"><span class="regexp">			circleUrl: "/</span><span class="keyword">static</span>/images/<span class="keyword">default</span>.png<span class="string">"</span></span><br><span class="line"><span class="string">		}</span></span><br><span class="line"><span class="string">	},</span></span><br><span class="line"><span class="string">	methods:{</span></span><br><span class="line"><span class="string">		changeStyleClass: function(callback){</span></span><br><span class="line"><span class="string">			console.log(callback)</span></span><br><span class="line"><span class="string">			if(callback !== 'square'){</span></span><br><span class="line"><span class="string">				if($('div').hasClass('squareCard')){</span></span><br><span class="line"><span class="string">					var l = $("</span>.squareCard<span class="string">").length;</span></span><br><span class="line"><span class="string">					for (var i=0;i &lt; l;i++){</span></span><br><span class="line"><span class="string">						$("</span>.squareCard&gt;a&gt;span<span class="string">")[0].classList.toggle('el-avatar');</span></span><br><span class="line"><span class="string">						$("</span>.squareCard&gt;a&gt;span<span class="string">")[0].classList.toggle('el-avatar--square');</span></span><br><span class="line"><span class="string">						</span></span><br><span class="line"><span class="string">						$("</span>.squareCard<span class="string">")[0].classList.replace('squareCard','card');</span></span><br><span class="line"><span class="string">					}</span></span><br><span class="line"><span class="string">				}</span></span><br><span class="line"><span class="string">			}else{</span></span><br><span class="line"><span class="string">				if($('div').hasClass('card')){</span></span><br><span class="line"><span class="string">					var l = $("</span>.card<span class="string">").length;</span></span><br><span class="line"><span class="string">					for (var i=0;i &lt; l;i++){</span></span><br><span class="line"><span class="string">						$("</span>.card&gt;a&gt;span<span class="string">")[0].classList.toggle('el-avatar');</span></span><br><span class="line"><span class="string">						$("</span>.card&gt;a&gt;span<span class="string">")[0].classList.toggle('el-avatar--square');</span></span><br><span class="line"><span class="string">						</span></span><br><span class="line"><span class="string">						$("</span>.card<span class="string">")[0].classList.replace('card','squareCard');</span></span><br><span class="line"><span class="string">						</span></span><br><span class="line"><span class="string">					}</span></span><br><span class="line"><span class="string">				}</span></span><br><span class="line"><span class="string">			}</span></span><br><span class="line"><span class="string">		},</span></span><br><span class="line"><span class="string">		errorHandler() {</span></span><br><span class="line"><span class="string">			return true</span></span><br><span class="line"><span class="string">		}</span></span><br><span class="line"><span class="string">	}</span></span><br><span class="line"><span class="string">})</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">var cards = document.getElementsByClassName("</span>card<span class="string">");</span></span><br><span class="line"><span class="string">for (var i=0;i&lt;cards.length;i++){</span></span><br><span class="line"><span class="string">	cards[i].onclick = function(){</span></span><br><span class="line"><span class="string">		this.firstElementChild.click();</span></span><br><span class="line"><span class="string">	}</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">  {##########################}</span></span><br><span class="line"><span class="string">  {### END LINKS BLOCK ###}</span></span><br><span class="line"><span class="string">  {##########################}</span></span><br><span class="line"><span class="string">{% endblock %}</span></span><br></pre></td></tr></table></figure>
</details>

<p>在<code>./themes/next/layout/page.swig</code>中引入模板，</p>
<figure class="highlight html"><figcaption><span>./themes/next/layout/page.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">···</span><br><span class="line">···</span><br><span class="line"><span class="comment">&lt;!-- 友情链接--&gt;</span></span><br><span class="line"> &#123;% elif page.type === 'links' %&#125;</span><br><span class="line">     &#123;% include 'links.swig' %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 友情链接--&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% elif page.type === 'schedule' %&#125;</span><br><span class="line">···</span><br><span class="line">···</span><br></pre></td></tr></table></figure>

<h1 id="4-添加样式"><a href="#4-添加样式" class="headerlink" title="4. 添加样式"></a>4. 添加样式</h1><p>创建<code>./themes/next/source/css/mystyle.css</code>文件</p>
<details>
<summary>在此贴上我的代码， 【此处折叠】 </summary>

<figure class="highlight javascript"><figcaption><span>mystyle.css</span><a href="/downloads/code/mystyle.css">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line">#links {</span><br><span class="line">    margin-top: <span class="number">60</span>px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.links-content {</span><br><span class="line">    margin-top: <span class="number">1</span>rem;</span><br><span class="line">}</span><br><span class="line">.links-content .mdui-panel-item, .links-content .mdui-panel-gapless{</span><br><span class="line">    -webkit-box-shadow: none !important;</span><br><span class="line">    box-shadow: none !important;</span><br><span class="line">}</span><br><span class="line">.links-content .mdui-panel-item .note{</span><br><span class="line">    margin: <span class="number">0</span>px;</span><br><span class="line">}</span><br><span class="line">.link-navigation{</span><br><span class="line">    margin-top: <span class="number">15</span>px;</span><br><span class="line">}</span><br><span class="line">.link-navigation::after {</span><br><span class="line">    content: <span class="string">" "</span>;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card {</span><br><span class="line">    width: <span class="number">300</span>px;</span><br><span class="line">    height: <span class="number">64</span>px;</span><br><span class="line">    font-size: <span class="number">1</span>rem;</span><br><span class="line">    padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">    border-radius: <span class="number">4</span>px;</span><br><span class="line">    transition: <span class="number">0.4</span>s;</span><br><span class="line">    margin-bottom: <span class="number">1</span>rem;</span><br><span class="line">    display: block;</span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> <span class="number">3</span>px <span class="number">1</span>px <span class="number">-2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">2</span>px <span class="number">2</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">1</span>px <span class="number">5</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line">    box-shadow: <span class="number">0</span> <span class="number">3</span>px <span class="number">1</span>px <span class="number">-2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">2</span>px <span class="number">2</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">1</span>px <span class="number">5</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card:nth-child(odd) {</span><br><span class="line">    float: left;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card:nth-child(even) {</span><br><span class="line">    float: right;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card:hover {</span><br><span class="line">    transform: scale(<span class="number">1.1</span>);</span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> <span class="number">5</span>px <span class="number">5</span>px <span class="number">-3</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">8</span>px <span class="number">10</span>px <span class="number">1</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">3</span>px <span class="number">14</span>px <span class="number">2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line">    box-shadow: <span class="number">0</span> <span class="number">5</span>px <span class="number">5</span>px <span class="number">-3</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">8</span>px <span class="number">10</span>px <span class="number">1</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">3</span>px <span class="number">14</span>px <span class="number">2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card a {</span><br><span class="line">    border: none;</span><br><span class="line">    display: inline-flex;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card .ava {</span><br><span class="line">    width: <span class="number">4</span>rem !important;</span><br><span class="line">    height: <span class="number">4</span>rem !important;</span><br><span class="line">    margin: <span class="number">0</span> !important;</span><br><span class="line">    margin-right: <span class="number">1</span>em !important;</span><br><span class="line">    border-radius: <span class="number">4</span>px;</span><br><span class="line">    display: inline;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card .card-header {</span><br><span class="line">    font-style: italic;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    width: <span class="number">236</span>px;</span><br><span class="line">    padding-left: <span class="number">10</span>px;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card .link {</span><br><span class="line">    font-style: normal;</span><br><span class="line">    color: #2bbc8a;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card .link:hover {</span><br><span class="line">    color: #d480aa;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.card .card-header .info {</span><br><span class="line">    font-style: normal;</span><br><span class="line">    color: #a3a3a3;</span><br><span class="line">    font-size: <span class="number">14</span>px;</span><br><span class="line">    min-width: <span class="number">0</span>;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.squareCard {</span><br><span class="line">    margin: <span class="number">5</span>px <span class="number">10</span>px !important;</span><br><span class="line">    padding: <span class="number">3</span>px !important;</span><br><span class="line">    border-radius: <span class="number">3</span>px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    float: left;</span><br><span class="line">    width: <span class="number">145</span>px;</span><br><span class="line">    position: relative;</span><br><span class="line">    min-height: <span class="number">1</span>px;</span><br><span class="line">    -webkit-box-sizing: border-box;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    border-radius: <span class="number">2</span>px;</span><br><span class="line"></span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> <span class="number">3</span>px <span class="number">1</span>px <span class="number">-2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">2</span>px <span class="number">2</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">1</span>px <span class="number">5</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line">    box-shadow: <span class="number">0</span> <span class="number">3</span>px <span class="number">1</span>px <span class="number">-2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">2</span>px <span class="number">2</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">1</span>px <span class="number">5</span>px <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line"></span><br><span class="line">    -webkit-transition: -webkit-box-shadow <span class="number">.25</span>s cubic-bezier(<span class="number">0.4</span>, <span class="number">0</span>, <span class="number">0.2</span>, <span class="number">1</span>);</span><br><span class="line">    transition: -webkit-box-shadow <span class="number">.25</span>s cubic-bezier(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">.2</span>, <span class="number">1</span>);</span><br><span class="line">    transition: box-shadow <span class="number">.25</span>s cubic-bezier(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">.2</span>, <span class="number">1</span>);</span><br><span class="line">    transition: box-shadow <span class="number">.25</span>s cubic-bezier(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">.2</span>, <span class="number">1</span>), -webkit-box-shadow <span class="number">.25</span>s cubic-bezier(<span class="number">.4</span>, <span class="number">0</span>, <span class="number">.2</span>, <span class="number">1</span>);</span><br><span class="line">    will-change: box-shadow;</span><br><span class="line">    </span><br><span class="line">    transition: all <span class="number">.3</span>s;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.squareCard:hover {</span><br><span class="line">    -webkit-box-shadow: <span class="number">0</span> <span class="number">5</span>px <span class="number">5</span>px <span class="number">-3</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">8</span>px <span class="number">10</span>px <span class="number">1</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">3</span>px <span class="number">14</span>px <span class="number">2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line">    box-shadow: <span class="number">0</span> <span class="number">5</span>px <span class="number">5</span>px <span class="number">-3</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.2</span>), <span class="number">0</span> <span class="number">8</span>px <span class="number">10</span>px <span class="number">1</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.14</span>), <span class="number">0</span> <span class="number">3</span>px <span class="number">14</span>px <span class="number">2</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.12</span>);</span><br><span class="line"></span><br><span class="line">    opacity: <span class="number">.8</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@media (max-width: <span class="number">600</span>px) {</span><br><span class="line">    .squareCard {</span><br><span class="line">        float: left;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- top: 0;</span></span><br><span class="line"><span class="comment">- left: 0;</span></span><br><span class="line"><span class="comment">- width: 100%;</span></span><br><span class="line"><span class="comment">- height: 100%;</span></span><br><span class="line"><span class="comment">- background: rgba(255, 255, 255, 0.5);</span></span><br><span class="line"><span class="comment">- -webkit-transition: -webkit-transform 0.5s;</span></span><br><span class="line"><span class="comment">- transition: transform 0.5s;</span></span><br><span class="line"><span class="comment">- -webkit-transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, -100%, 0);</span></span><br><span class="line"><span class="comment">- transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, -100%, 0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+ left: -100px;</span></span><br><span class="line"><span class="comment">+ bottom: -63px;</span></span><br><span class="line"><span class="comment">+ width: 50px;</span></span><br><span class="line"><span class="comment">+ height: 277px;</span></span><br><span class="line"><span class="comment">+ background: #fff;</span></span><br><span class="line"><span class="comment">+ -webkit-transition:  transform 0.5s ease;</span></span><br><span class="line"><span class="comment">+ transition: transform 0.5s ease;</span></span><br><span class="line"><span class="comment">+ -webkit-transform:  translateX(-50px) rotate(45deg);</span></span><br><span class="line"><span class="comment">+ transform: translateX(-50px) rotate(45deg);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">.squareCard::before {</span><br><span class="line">    position: absolute;</span><br><span class="line">    content: <span class="string">''</span>;</span><br><span class="line">    left: <span class="number">-100</span>px;</span><br><span class="line">    bottom: <span class="number">-63</span>px;</span><br><span class="line">    width: <span class="number">50</span>px;</span><br><span class="line">    height: <span class="number">277</span>px;</span><br><span class="line">    background: #fff;</span><br><span class="line">    -webkit-transition:  transform <span class="number">0.5</span>s ease;</span><br><span class="line">    transition: transform <span class="number">0.5</span>s ease;</span><br><span class="line">    -webkit-transform:  translateX(<span class="number">-50</span>px) rotate(<span class="number">45</span>deg);</span><br><span class="line">    transform: translateX(<span class="number">-50</span>px) rotate(<span class="number">45</span>deg);</span><br><span class="line">    z-index: <span class="number">99999</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- -webkit-transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 100%, 0);</span></span><br><span class="line"><span class="comment">- transform: scale3d(1.9, 1.4, 1) rotate3d(0, 0, 1, 45deg) translate3d(0, 100%, 0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+ -webkit-transform:  translateX(360px) rotate(45deg);</span></span><br><span class="line"><span class="comment">+ transform: translateX(360px) rotate(45deg);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">.squareCard:hover::before {</span><br><span class="line">    -webkit-transform:  translateX(<span class="number">360</span>px) rotate(<span class="number">45</span>deg);</span><br><span class="line">    transform: translateX(<span class="number">360</span>px) rotate(<span class="number">45</span>deg);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.squareCard a {</span><br><span class="line">    position: relative;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    color: #ff4081;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">    outline: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.squareCard img {</span><br><span class="line">    margin: <span class="number">0</span> !important;</span><br><span class="line">    padding: <span class="number">0</span> !important;</span><br><span class="line">    width: <span class="number">10</span>rem;</span><br><span class="line">    height: <span class="number">8.7</span>rem;</span><br><span class="line">    background-color: aliceblue;</span><br><span class="line">    object-fit: contain;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.squareCard .card-header {</span><br><span class="line">    width: calc(<span class="number">100</span>%);</span><br><span class="line">    border-bottom-left-radius: <span class="number">3</span>px;</span><br><span class="line">    border-bottom-right-radius: <span class="number">3</span>px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    background: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.3</span>);</span><br><span class="line">    z-index: <span class="number">3</span>;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: <span class="number">0</span>;</span><br><span class="line">    bottom: <span class="number">0</span>;</span><br><span class="line">    min-height: <span class="number">48</span>px;</span><br><span class="line">    max-height: <span class="number">68</span>px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    padding: <span class="number">5</span>px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    -webkit-box-align: center;</span><br><span class="line">    -webkit-align-items: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.squareCard .card-header div:first-<span class="keyword">of</span>-type {</span><br><span class="line">    height: <span class="number">20</span>px;</span><br><span class="line">    text-align: left;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    font-size: <span class="number">16</span>px;</span><br><span class="line">    line-height: <span class="number">16</span>px;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    transition: all <span class="number">.3</span>s;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">.squareCard .card-header .info {</span><br><span class="line">    height: <span class="number">18</span>px;</span><br><span class="line">    margin-top: <span class="number">4</span>px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">    line-height: <span class="number">18</span>px;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    opacity: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</details>

<h1 id="5-添加友链"><a href="#5-添加友链" class="headerlink" title="5. 添加友链"></a>5. 添加友链</h1><p>创建<code>./source/_data/links.yml</code>文件，并配置</p>
<figure class="highlight md"><figcaption><span>./source/_data/links.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">defaultPic: /static/images/default.png # 默认图片</span><br><span class="line">shape:  # 可选值 square | circle，默认square</span><br><span class="line"></span><br><span class="line">defaultlinks:</span><br><span class="line"><span class="bullet">- </span>nickname: # 名称</span><br><span class="line">  site:     # 网址</span><br><span class="line">  avatar:   # 头像</span><br><span class="line">  info:     # 简介</span><br><span class="line">  </span><br><span class="line">friendslinks :</span><br><span class="line"><span class="bullet">- </span>nickname: # 名称</span><br><span class="line">  site:     # 网址</span><br><span class="line">  avatar:   # 头像</span><br><span class="line">  info:     # 简介</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python 面试准备</title>
    <url>/20200408/python-%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<a id="more"></a>

<p><a href="https://www.zhihu.com/question/54513391/answer/139710121" target="_blank" rel="noopener">转载知乎</a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>列出 5 个常用 Python 标准库？<br>time os sys glob timeit datetime calendar random math operator </li>
</ol>
<p>re urllib threading multiprocessing queue equests，virtualenv，selenium，scrapy，xadmin，celery，hashlib，md5。<br><a href="https://www.cnblogs.com/jiangchunsheng/p/9275881.html" target="_blank" rel="noopener">20个必不可少的Python库也是基本的第三方库</a><br>Numpy，Scipy，Pandas<br><a href="https://blog.csdn.net/bbwangj/article/details/90750780" target="_blank" rel="noopener">queue</a></p>
<figure class="highlight python"><figcaption><span>os 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># os 模块 处理文件和目录</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. os.getcwd</span></span><br><span class="line">os.getcwd()   <span class="comment"># 返回当前的工作目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. os.listdir</span></span><br><span class="line">os.listdir(<span class="string">'d:'</span>) <span class="comment">#　目录下的所有文件（夹）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. os.path.exists</span></span><br><span class="line">os.path.exists(filepath) <span class="comment"># 判断文件是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. os.remove</span></span><br><span class="line">os.remove(filepath) <span class="comment"># 删除文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>sys 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># sys 模块 提供对解释器使用或维护的一些变量的访问，以及与解释器强烈交互的函数</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. sys.argv </span></span><br><span class="line">print(sys.argv[<span class="number">1</span>]) <span class="comment"># 脚本执行参数列表，0为文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. sys.exit(n)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sys.exit(<span class="number">1</span>) <span class="comment"># 异常退出程序</span></span><br><span class="line"><span class="keyword">except</span> SystemExit,value:</span><br><span class="line">    exitfunc(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. sys.modules</span></span><br><span class="line">print(sys.modules.keys()) <span class="comment"># sys.modules 全局字典 自动记录模块</span></span><br><span class="line">print(sys.modules.values())</span><br><span class="line">print(sys.modules[<span class="string">"os"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. sys.stdin\stdout\stderr</span></span><br><span class="line"><span class="comment"># 与解释器的标准输入，输出和错误流相对应的文件对象 支持read()、write()和flush()等操作</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>glob 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># glob 模块 提供了一个函数用于从目录通配符搜索中生成文件列表</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. glob.glob</span></span><br><span class="line">glob.glob(<span class="string">'*.py'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>random 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># random 模块 随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">print( random.randint(<span class="number">1</span>,<span class="number">10</span>) ) <span class="comment"># 返回 1 到 10 的一个整数型随机数</span></span><br><span class="line">print( random.random() ) <span class="comment"># 返回 0 到 1 之间的随机浮点数</span></span><br><span class="line">print( random.uniform(<span class="number">1</span>, <span class="number">10</span>) ) <span class="comment"># 返回 1 到 10 之间的随机浮点数</span></span><br><span class="line">print( random.uniform(<span class="number">1.1</span>,<span class="number">5.4</span>) ) <span class="comment"># 返回  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</span></span><br><span class="line">print( random.choice(<span class="string">'abcdefg'</span>) ) <span class="comment"># 从序列中随机选取一个元素</span></span><br><span class="line">print(random.sample(<span class="string">'zyxwvutsrqponmlkjihgfedcba'</span>,<span class="number">5</span>)) <span class="comment"># 多个字符中生成指定数量的随机字符</span></span><br><span class="line">print( random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) ) <span class="comment"># 返回 从1到100的间隔为2的随机整数</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] <span class="comment"># 将序列a中的元素顺序打乱</span></span><br><span class="line">random.shuffle(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>math 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># math 模块</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">math.ceil(x) 上入整数</span><br><span class="line">math.exp(x) e的x次幂</span><br><span class="line">math.fabs(x) 绝对值 浮点数</span><br><span class="line">math.floor(x) 下舍整数</span><br><span class="line">math.log(x[,y]) 以e[y]为基数的x的对数</span><br><span class="line">math.log2(x) 以<span class="number">2</span>为基数的x的对数</span><br><span class="line">math.log10(x) 以<span class="number">10</span>为基数的x的对数</span><br><span class="line">math.modf(x) 整数部分与小数部分</span><br><span class="line">math.sqrt(x) x的平方根</span><br><span class="line"></span><br><span class="line">math.atan2(y,x) 返回给定的 X 及 Y 坐标值的反正切值。</span><br><span class="line">math.hypot(x,y) 返回给定的 X 及 Y 坐标值的反正切值。</span><br><span class="line">math.degress(x) 将弧度转换为角度,如degrees(math.pi/<span class="number">2</span>) ， 返回<span class="number">90.0</span></span><br><span class="line">math.radians(x) 将角度转换为弧度</span><br><span class="line"></span><br><span class="line">math.copysign(x,y) 把y的正负号加到x前面</span><br><span class="line">math.factorial(x) x的阶乘</span><br><span class="line">math.fmod(x,y) 得到x/y的余数，其值是一个浮点数</span><br><span class="line">math.frexp(x) 返回一个元组(m,n),x = m * (<span class="number">2</span> ** n),m的绝对值属于(<span class="number">0.5</span>,<span class="number">1</span>)</span><br><span class="line">math.ldexp(x,i) 返回 x * (<span class="number">2</span> ** i) 的值</span><br><span class="line">math.fsum(iterable) 对迭代器里的每个元素进行求和操作</span><br><span class="line">math.gcd(x,y) 返回x和y的最大公约数</span><br><span class="line">math.hypot(x,y) 用勾股定理求斜边的长</span><br><span class="line">math.isfinite(x) 判定x不是无穷大 bool</span><br><span class="line">math.isinf(x) 判定x是无穷大 bool</span><br><span class="line">math.isnan(x) 判定x不是数字 bool</span><br><span class="line">math.modf(x) 返回由x的小数部分和整数部分组成的元组</span><br><span class="line">math.trunc(x) 返回x的整数部分</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>operator 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># operator 模块</span></span><br><span class="line"><span class="comment"># operator模块是用c实现的，所以执行速度比python代码快</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">operator.lt(a, b) <span class="comment"># a &lt; b</span></span><br><span class="line">operator.le(a, b) <span class="comment"># a &lt;= b</span></span><br><span class="line">operator.eq(a, b) <span class="comment"># a = b</span></span><br><span class="line">operator.ne(a, b) <span class="comment"># a != b</span></span><br><span class="line">operator.ge(a, b) <span class="comment"># a &gt;= b</span></span><br><span class="line">operator.gt(a, b) <span class="comment"># a &gt; b</span></span><br><span class="line"></span><br><span class="line">operator.not_(obj)</span><br><span class="line">operator.truth(obj) 如果 obj 为真值则返回 <span class="literal">True</span>，否则返回 <span class="literal">False</span>。 这等价于使用 bool 构造器。</span><br><span class="line">operator.is_(a, b)  返回 a <span class="keyword">is</span> b. 测试对象标识</span><br><span class="line">operator.is_not(a, b) 返回 a <span class="keyword">is</span> <span class="keyword">not</span> b. 测试对象标识。</span><br><span class="line"></span><br><span class="line">operator.add(a, b) <span class="comment"># 返回 a + b</span></span><br><span class="line">operator.sub(a, b) <span class="comment"># 返回 a - b.</span></span><br><span class="line">operator.mul(a, b) <span class="comment"># 返回 a * b。</span></span><br><span class="line">operator.truediv(a, b) <span class="comment"># 返回 a / b </span></span><br><span class="line">operator.floordiv(a, b) <span class="comment"># 返回 a // b. 取整</span></span><br><span class="line">operator.mod(a, b) <span class="comment"># 返回 a % b. 字符串格式化</span></span><br><span class="line">operator.matmul(a, b) <span class="comment"># 返回 a @ b 矩阵相乘</span></span><br><span class="line">operator.pow(a, b) ＃ 对于数字 a 和 b，返回 a ** b。</span><br><span class="line"></span><br><span class="line">operator.abs(obj) 返回 obj 的绝对值。</span><br><span class="line">operator.neg(obj) 返回 obj 的负值 (-obj)</span><br><span class="line">operator.pos(obj) 返回 obj 取正的结果 (+obj)</span><br><span class="line">operator.index(a) 返回 a 转换为整数的结果。 等价于 a.__index__()。</span><br><span class="line"></span><br><span class="line">operator.and_(a, b) 返回 x 和 y 按位与</span><br><span class="line">operator.or_(a, b) 返回 a 和 b 按位或的结果。</span><br><span class="line">operator.inv(obj) 返回数字 obj 按位取反的结果。 这等价于 ~obj。</span><br><span class="line">operator.invert(obj) 返回数字 obj 按位取反的结果。 这等价于 ~obj。</span><br><span class="line">operator.xor(a, b) 返回 a 和 b 按位异或的结果。</span><br><span class="line"></span><br><span class="line">operator.lshift(a, b) 返回 a 左移 b 位的结果。</span><br><span class="line">operator.rshift(a, b) 返回 a 右移 b 位的结果。</span><br><span class="line"></span><br><span class="line">适用于序列的操作（其中一些也适用于映射）包括：</span><br><span class="line">operator.concat(a, b) 对于序列 a 和 b，返回 a + b。</span><br><span class="line">operator.contains(a, b) 返回 b <span class="keyword">in</span> a 检测的结果。 请注意操作数是反序的。</span><br><span class="line">operator.countOf(a, b) 返回 b 在 a 中的出现次数。</span><br><span class="line">operator.setitem(obj, k, v) 将索引号 b 上的值 a 设为 c。</span><br><span class="line">operator.getitem(obj, k) 返回索引号 b 上的值 a。</span><br><span class="line">operator.delitem(obj, k) 移除索引号 b 上的值 a。</span><br><span class="line">operator.indexOf(obj, k) 返回 b 在 a 中首次出现所在的索引号。</span><br><span class="line">operator.length_hint(obj, default=<span class="number">0</span>) 返回对象 o 的估计长度。 首先尝试返回其实际长度，再使用 object.__length_hint__() 得出估计值，最后返回默认值。</span><br><span class="line"></span><br><span class="line">operator.attrgetter(attr)</span><br><span class="line">operator.attrgetter(*attrs)</span><br><span class="line"><span class="comment"># 返回一个可从操作数中获取 attr 的可调用对象。 如果请求了一个以上的属性，则返回一个属性元组。 属性名称还可包含点号。</span></span><br><span class="line"><span class="comment"># 在 f = attrgetter('name') 之后，调用 f(b) 将返回 b.name。</span></span><br><span class="line"><span class="comment"># 在 f = attrgetter('name.first', 'name.last') 之后，调用 f(b) 将返回 (b.name.first, b.name.last)</span></span><br><span class="line"></span><br><span class="line">operator.itemgetter(item)</span><br><span class="line">operator.itemgetter(*items)</span><br><span class="line"><span class="comment"># 返回一个使用操作数的 __getitem__() 方法从操作数中获取 item 的可调用对象。 如果指定了多个条目，则返回一个查找值的元组。</span></span><br><span class="line"><span class="comment"># 在 f = itemgetter(2) 之后，调用 f(r) 将返回 r[2]。</span></span><br><span class="line"><span class="comment"># 在 g = itemgetter(2, 5, 3) 之后，调用 g(r) 将返回 (r[2], r[5], r[3])。</span></span><br><span class="line"></span><br><span class="line">operator.methodcaller(name[, args...])</span><br><span class="line"><span class="comment"># 返回一个在操作数上调用 name 方法的可调用对象。 如果给出额外的参数和/或关键字参数，它们也将被传给该方法。 例如：</span></span><br><span class="line"><span class="comment"># 在 f = methodcaller('name') 之后，调用 f(b) 将返回 b.name()。</span></span><br><span class="line"><span class="comment"># 在 f = methodcaller('name', 'foo', bar=1) 之后，调用 f(b) 将返回 b.name('foo', bar=1)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#############</span></span><br><span class="line"><span class="comment">## 原地操作 ##</span></span><br><span class="line"><span class="comment">#############</span></span><br><span class="line"><span class="comment"># 不可变的目标例如字符串、数字和元组,需要再次赋值</span></span><br><span class="line"><span class="comment"># 可变的目标例如列表和字典，原地方法将执行更新，因此不需要后续赋值操作	</span></span><br><span class="line">operator.iadd(a, b) <span class="comment"># a = iadd(a, b) 等价于 a += b。</span></span><br><span class="line">operator.iand(a, b) <span class="comment"># a = iand(a, b) 等价于 a &amp;= b。</span></span><br><span class="line">operator.iconcat(a, b) <span class="comment"># a = iconcat(a, b) 等价于 a += b 其中 a 和 b 为序列。</span></span><br><span class="line">operator.ifloordiv(a, b) <span class="comment"># a = ifloordiv(a, b) 等价于 a //= b.</span></span><br><span class="line">operator.ilshift(a, b) <span class="comment"># a = ilshift(a, b) 等价于 a &lt;&lt;= b。</span></span><br><span class="line">operator.imod(a, b) <span class="comment"># a = imod(a, b) 等价于 a %= b。</span></span><br><span class="line">operator.imul(a, b) <span class="comment"># a = imul(a, b) 等价于 a *= b。</span></span><br><span class="line">operator.imatmul(a, b) <span class="comment"># a = imatmul(a, b) 等价于 a @= b</span></span><br><span class="line">operator.ior(a, b) <span class="comment"># a = ior(a, b) 等价于 a |= b。</span></span><br><span class="line">operator.ipow(a, b) <span class="comment"># a = ipow(a, b) 等价于 a **= b。</span></span><br><span class="line">operator.irshift(a, b) <span class="comment"># a = irshift(a, b) 等价于 a &gt;&gt;= b。</span></span><br><span class="line">operator.isub(a, b) <span class="comment"># a = isub(a, b) 等价于 a -= b。</span></span><br><span class="line">operator.itruediv(a, b) <span class="comment"># a = itruediv(a, b) 等价于 a /= b。</span></span><br><span class="line">operator.ixor(a, b) <span class="comment"># a = ixor(a, b) 等价于 a ^= b。</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">运算</th>
<th align="left">语法</th>
<th align="left">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">加法</td>
<td align="left">a + b</td>
<td align="left">add(a, b)</td>
</tr>
<tr>
<td align="left">字符串拼接</td>
<td align="left">seq1 + seq2</td>
<td align="left">concat(seq1, seq2)</td>
</tr>
<tr>
<td align="left">包含测试</td>
<td align="left">obj in seq</td>
<td align="left">contains(seq, obj)</td>
</tr>
<tr>
<td align="left">除法</td>
<td align="left">a / b</td>
<td align="left">truediv(a, b)</td>
</tr>
<tr>
<td align="left">除法</td>
<td align="left">a // b</td>
<td align="left">floordiv(a, b)</td>
</tr>
<tr>
<td align="left">按位与</td>
<td align="left">a &amp; b</td>
<td align="left">and_(a, b)</td>
</tr>
<tr>
<td align="left">按位异或</td>
<td align="left">a ^ b</td>
<td align="left">xor(a, b)</td>
</tr>
<tr>
<td align="left">按位取反</td>
<td align="left">~ a</td>
<td align="left">invert(a)</td>
</tr>
<tr>
<td align="left">按位或</td>
<td align="left">a | b</td>
<td align="left">or_(a, b)</td>
</tr>
<tr>
<td align="left">取幂</td>
<td align="left">a ** b</td>
<td align="left">pow(a, b)</td>
</tr>
<tr>
<td align="left">一致</td>
<td align="left">a is b</td>
<td align="left">is_(a, b)</td>
</tr>
<tr>
<td align="left">一致</td>
<td align="left">a is not b</td>
<td align="left">is_not(a, b)</td>
</tr>
<tr>
<td align="left">索引赋值</td>
<td align="left">obj[k] = v</td>
<td align="left">setitem(obj, k, v)</td>
</tr>
<tr>
<td align="left">索引删除</td>
<td align="left">del obj[k]</td>
<td align="left">delitem(obj, k)</td>
</tr>
<tr>
<td align="left">索引取值</td>
<td align="left">obj[k]</td>
<td align="left">getitem(obj, k)</td>
</tr>
<tr>
<td align="left">左移</td>
<td align="left">a &lt;&lt; b</td>
<td align="left">lshift(a, b)</td>
</tr>
<tr>
<td align="left">取模</td>
<td align="left">a % b</td>
<td align="left">mod(a, b)</td>
</tr>
<tr>
<td align="left">乘法</td>
<td align="left">a * b</td>
<td align="left">mul(a, b)</td>
</tr>
<tr>
<td align="left">矩阵乘法</td>
<td align="left">a @ b</td>
<td align="left">matmul(a, b)</td>
</tr>
<tr>
<td align="left">否定（算术）</td>
<td align="left">- a</td>
<td align="left">neg(a)</td>
</tr>
<tr>
<td align="left">否定（逻辑）</td>
<td align="left">not a</td>
<td align="left">not_(a)</td>
</tr>
<tr>
<td align="left">正数</td>
<td align="left">+ a</td>
<td align="left">pos(a)</td>
</tr>
<tr>
<td align="left">右移</td>
<td align="left">a &gt;&gt; b</td>
<td align="left">rshift(a, b)</td>
</tr>
<tr>
<td align="left">切片赋值</td>
<td align="left">seq[i:j] = values</td>
<td align="left">setitem(seq, slice(i, j), values)</td>
</tr>
<tr>
<td align="left">切片删除</td>
<td align="left">del seq[i:j]</td>
<td align="left">delitem(seq, slice(i, j))</td>
</tr>
<tr>
<td align="left">切片取值</td>
<td align="left">seq[i:j]</td>
<td align="left">getitem(seq, slice(i, j))</td>
</tr>
<tr>
<td align="left">字符串格式化</td>
<td align="left">s % obj</td>
<td align="left">mod(s, obj)</td>
</tr>
<tr>
<td align="left">减法</td>
<td align="left">a - b</td>
<td align="left">sub(a, b)</td>
</tr>
<tr>
<td align="left">真值测试</td>
<td align="left">obj</td>
<td align="left">truth(obj)</td>
</tr>
<tr>
<td align="left">比较</td>
<td align="left">a &lt; b</td>
<td align="left">lt(a, b)</td>
</tr>
<tr>
<td align="left">比较</td>
<td align="left">a &lt;= b</td>
<td align="left">le(a, b)</td>
</tr>
<tr>
<td align="left">相等</td>
<td align="left">a == b</td>
<td align="left">eq(a, b)</td>
</tr>
<tr>
<td align="left">不等</td>
<td align="left">a != b</td>
<td align="left">ne(a, b)</td>
</tr>
<tr>
<td align="left">比较</td>
<td align="left">a &gt;= b</td>
<td align="left">ge(a, b)</td>
</tr>
<tr>
<td align="left">比较</td>
<td align="left">a &gt; b</td>
<td align="left">gt(a, b)</td>
</tr>
</tbody></table>
<figure class="highlight python"><figcaption><span>内置函数 部分</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. input([prompt]) 返回为 string 类型</span></span><br><span class="line"><span class="comment"># 2. print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False) 打印输出；flush = True，Loading 的效果</span></span><br><span class="line"><span class="comment"># 3. format 格式化字符串</span></span><br><span class="line"><span class="comment"># 4. help([object]) 返回对象帮助信息。</span></span><br><span class="line"><span class="comment"># 5. dir 返回当前范围内的变量、方法和定义的类型列表。带参数时，返回参数的属性、方法列表。如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。</span></span><br><span class="line"><span class="comment"># 6. open(file, mode='r') 打开一个文件，并返回文件对象;如果该文件无法被打开，会抛出 OSError;关闭文件对象，即调用 close() </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. type(name, bases, dict) 只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</span></span><br><span class="line"><span class="comment"># 8. all(iterable) 判定容器内的元素全部都有意义</span></span><br><span class="line"><span class="comment"># 9. any(iterable) 判定容器内的元素存在一个有意义</span></span><br><span class="line"><span class="comment"># 10. bool([x]) 返回一个布尔值</span></span><br><span class="line"><span class="comment"># 12. str 返回一个对象的string格式。</span></span><br><span class="line"><span class="comment"># 13. repr(object) 返回一个对象的 string 格式</span></span><br><span class="line"><span class="comment"># 14. tuple( iterable ) 返回元组 将集合转换为元组时，只保留键！</span></span><br><span class="line"><span class="comment"># 15. list() 返回列表</span></span><br><span class="line"><span class="comment"># 16. dict 返回一个字典</span></span><br><span class="line"><span class="comment"># 17. set([iterable]) 创建一个无序不重复元素集-集合， &amp; 交集、 | 并集、 - 差集</span></span><br><span class="line"><span class="comment"># 18. frozenset([iterable]) 返回一个冻结的集合-不可变集合</span></span><br><span class="line"><span class="comment"># 19. map(function, iterable, ...) 返回迭代器，根据提供的函数对指定序列做映射</span></span><br><span class="line"><span class="comment"># 20. hash(object) 返回对象的哈希值。</span></span><br><span class="line"><span class="comment"># 21. zip([iterable, ...]) 返回一个对象。</span></span><br><span class="line"><span class="comment"># 22. id([object]) 返回对象的唯一标识符，CPython 中获取对象的内存地址</span></span><br><span class="line"><span class="comment"># 23. enumerate(sequence, [start=0]) 返回 enumerate(枚举) 对象，list中元素加入下标成元组类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 24. iter(object[, sentinel]) 生成迭代器</span></span><br><span class="line"><span class="comment"># 25. reversed(seq) 返回一个反转的迭代器，使逆序</span></span><br><span class="line"><span class="comment"># 26. next() 返回迭代器的下一个项目</span></span><br><span class="line"><span class="comment"># 27. filter(function, iterable) 返回一个迭代器对象,使用 list() 来转换为列表</span></span><br><span class="line">list(enumerate( [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>] , start=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 28. range(start, stop[, step]) 返回的结果是一个整数序列的对象</span></span><br><span class="line"><span class="comment"># 29. len() 返回对象长度。</span></span><br><span class="line"><span class="comment"># 30. slice(start, stop[, step]) 实现切片对象</span></span><br><span class="line">list(range(<span class="number">100</span>)[slice(<span class="number">2</span>,<span class="number">25</span>,<span class="number">3</span>)]) <span class="comment"># [slice(2,25,3)]等同[2:25:3]</span></span><br><span class="line"><span class="comment"># 31. sorted(iterable, key=None, reverse=False) 返回重新排序的列表，对所有可迭代的对象进行排序操作；list.sort()会修改原始的 list</span></span><br><span class="line">d1 = [&#123;<span class="string">'name'</span>:<span class="string">'alice'</span>, <span class="string">'score'</span>:<span class="number">38</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'bob'</span>, <span class="string">'score'</span>:<span class="number">18</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'darl'</span>, <span class="string">'score'</span>:<span class="number">28</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'christ'</span>, <span class="string">'score'</span>:<span class="number">28</span>&#125;]</span><br><span class="line">sorted(d1, key=<span class="keyword">lambda</span> x:(-x[<span class="string">'score'</span>], x[<span class="string">'name'</span>])) <span class="comment"># 先按照成绩降序排序，相同成绩的按照名字升序排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32. globals() 返回全局变量的字典</span></span><br><span class="line"><span class="comment"># 33. locals() 返回字典类型的局部变量。</span></span><br><span class="line"><span class="comment"># 34. vars([object]) 返回对象object的属性和属性值的字典对象，如果没有参数，就打印当前调用位置的属性和属性值 类似 locals()</span></span><br><span class="line"><span class="comment"># 35. memoryview(obj) 返回给定参数的内存查看对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 36. abs(x) 绝对值</span></span><br><span class="line"><span class="comment"># 37. max(x1, x2, ...) 最大值</span></span><br><span class="line"><span class="comment"># 38. min(x1, x2, ...) 最小值</span></span><br><span class="line"><span class="comment"># 39. pow(x,y) x**y</span></span><br><span class="line"><span class="comment"># 40. sum(iterable[, start]) 返回计算结果</span></span><br><span class="line"><span class="comment"># 41. round( x [, n]  ) 返回浮点数 x 的五舍六入的值</span></span><br><span class="line"><span class="comment"># 42. divmod 返回一个包含商和余数的元组</span></span><br><span class="line"><span class="comment"># 43. complex 返回一个复数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 44. ascii(object) 返回一个对象可打印的字符串</span></span><br><span class="line"><span class="comment"># 45. bytearray 返回一个新字节数组</span></span><br><span class="line"><span class="comment"># 46. chr 返回值对应的 ASCII 字符. chr(0x30) == chr(48) == 0</span></span><br><span class="line"><span class="comment"># 47. ord(c) 返回值是对应的十进制整数，与 chr() 函数相对</span></span><br><span class="line"><span class="comment"># 48. bin(x) 返回二进制字符串</span></span><br><span class="line"><span class="comment"># 49. oct(x) 返回一个8 进制字符串，以 0o 开头</span></span><br><span class="line"><span class="comment"># 50. int(x[, base=10]) 返回整型数据</span></span><br><span class="line"><span class="comment"># 51. hex([x]) 返回一个16 进制字符串，以 0x 开头。</span></span><br><span class="line"><span class="comment"># 52. float([x]) 返回浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 53. eval(expression[, globals[, locals]]) 执行一个字符串表达式，并返回表达式的值</span></span><br><span class="line"><span class="comment"># 54. exec(object[, globals[, locals]]) 返回表达式的值，支持动态执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 55. __import__(name[, globals[, locals[, fromlist[, level]]]]) 用于动态加载类和函数</span></span><br><span class="line"><span class="comment"># 56. isinstance(object, classinfo) 判断obj是否和某类有关系</span></span><br><span class="line"><span class="comment"># 57. issubclass(class, classinfo) 判断class 是否是 classinfo 的子类。</span></span><br><span class="line"><span class="comment"># 58. super(type[, object-or-type]) 用于调用父类(超类)的一个方法，解决多重继承问题——查找顺序（MRO）、重复调用（钻石继承）等</span></span><br><span class="line"><span class="comment"># 59. staticmethod 修饰符，声明一个静态方法，不强制要求传递参数，</span></span><br><span class="line"><span class="comment"># 60. classmethod 修饰符, 对象不需要实例化，函数不需要 self 参数。但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等</span></span><br><span class="line"><span class="comment"># 61. compile(source, filename, mode[, flags[, dont_inherit]]) 返回表达式执行结果。</span></span><br><span class="line">exec(compile(<span class="string">"for i in range(0,10): print(i)"</span>,<span class="string">''</span>,<span class="string">'exec'</span>))</span><br><span class="line">eval(compile(<span class="string">"3 * 4 + 5"</span>,<span class="string">''</span>,<span class="string">'eval'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 62. setattr 用于[创建]设置属性值</span></span><br><span class="line"><span class="comment"># 63. getattr(object, name[, default]) 返回一个对象属性值</span></span><br><span class="line"><span class="comment"># 64. hasattr(object, name) 判断对象是否包含对应的属性</span></span><br><span class="line"><span class="comment"># 65. delattr(object, name) 删除对象属性</span></span><br><span class="line">dict(a=<span class="string">'a'</span>, b=<span class="string">'b'</span>, t=<span class="string">'t'</span>)   <span class="comment"># 传入关键字</span></span><br><span class="line">dict(zip([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))   <span class="comment"># 映射函数方式来构造字典</span></span><br><span class="line">dict([(<span class="string">'one'</span>, <span class="number">1</span>), (<span class="string">'two'</span>, <span class="number">2</span>), (<span class="string">'three'</span>, <span class="number">3</span>)])    <span class="comment"># 可迭代对象方式来构造字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 66. property([fget[, fset[, fdel[, doc]]]]) </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setx</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delx</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._x</span><br><span class="line"> </span><br><span class="line">    x = property(getx, setx, delx, <span class="string">"I'm the 'x' property."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 c 是 C 的实例化, c.x 将触发 getter,c.x = value 将触发 setter ， del c.x 触发 deleter。如果给定 doc 参数，其将成为这个属性值的 docstring，否则 property 函数就会复制 fget 函数的 docstring（如果有的话）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 property 函数用作装饰器可以很方便的创建只读属性</span></span><br><span class="line"><span class="comment"># 下面的代码将 voltage() 方法转化成同名只读属性的 getter 方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._voltage = <span class="number">100000</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">voltage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Get the current voltage."""</span></span><br><span class="line">        <span class="keyword">return</span> self._voltage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># property 的 getter,setter 和 deleter 方法同样可以用作装饰器，这个代码和第一个例子完全相同：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._x = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""I'm the 'x' property."""</span></span><br><span class="line">        <span class="keyword">return</span> self._x</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @x.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._x = value</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @x.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._x</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Python 内建数据类型有哪些？</li>
</ol>
<p>六个标准的数据类型：</p>
<ul>
<li>Number（数字）int、float、bool、complex</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<p>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p>
<blockquote>
<p>另：映射 map、类 class、实例 、异常 BaseException </p>
</blockquote>
<ol start="3">
<li>简述 with 方法打开处理文件帮我我们做了什么？</li>
</ol>
<p>如果按照常规的 <code>f.open</code> 写法，我们需要 <code>try</code>,<code>except</code>,<code>finally</code>，做异常判断，并且文件最终不管遇到什么情况，都要在<code>finally</code>里执行<code>f.close()</code>关闭文件，<code>with</code>方法帮我们实现了<code>finally</code>中<code>f.close</code>。</p>
<p><code>with</code>语句支持通过上下文管理器所定义的运行时上下文</p>
<ul>
<li>object.<strong>enter</strong>（自我）<br>输入与此对象相关的运行时上下文。该with语句会将此方法的返回值绑定到as该语句的子句中指定的目标（ 如果有）。</li>
<li>object.<strong>exit</strong>（self，exc_type，exc_value，traceback ）<br>退出关联到此对象的运行时上下文。 各个参数描述了导致上下文退出的异常。 如果上下文是无异常地退出的，三个参数都将为 None。</li>
</ul>
<blockquote>
<p>如果提供了异常，并且希望方法屏蔽此异常（即避免其被传播），则应当返回真值。 否则的话，异常将在退出此方法时按正常流程处理。<br>请注意 <strong>exit</strong>() 方法不应该重新引发被传入的异常，这是调用者的责任。</p>
</blockquote>
<ol start="4">
<li><p>列出 Python 中可变数据类型和不可变数据类型，为什么？<br>变量更改后地址（<code>id()</code>）是否发生改变<br>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；<br>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</p>
</li>
<li><p>Python 获取当前日期？</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">datetime.now()</span><br><span class="line"><span class="comment"># &gt;: 2021-06-20 02:12:37</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.ctime()</span><br><span class="line"><span class="comment"># &gt;: Sun Jun 20 02:12:37 2021</span></span><br><span class="line"></span><br><span class="line">time.time() <span class="comment"># 返回当前时间戳</span></span><br><span class="line"><span class="comment"># &gt;: 1624126357</span></span><br><span class="line"></span><br><span class="line">time.localtime() <span class="comment">#  返回当前时间结构元组</span></span><br><span class="line"><span class="comment"># &gt;: time.struct_time(tm_year=2021, tm_mon=6, tm_mday=20, tm_hour=2, tm_min=12, tm_sec=37, tm_wday=6, tm_yday=171, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line">time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,) <span class="comment"># 格式化输出当前时间</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>统计字符串每个单词出现的次数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">'I can because i think i can'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">result = Counter(str.split())</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = &#123;word: str.split().count(word) <span class="keyword">for</span> word <span class="keyword">in</span> set(str.split())&#125;</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>用 python 删除文件和用 linux 命令删除文件方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(filepath) <span class="comment"># 删除文件</span></span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf 文件名</span><br><span class="line">rm -rf *文件名关键字*</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>写一段自定义异常代码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,*args)</span>:</span></span><br><span class="line">        self.args = args</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumErorr</span><span class="params">(MyException)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,numA,numB)</span>:</span></span><br><span class="line">        self.numA=numA</span><br><span class="line">        self.numB=numB</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"本计算器只接收整数!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyException(<span class="string">'stop'</span>)</span><br><span class="line">    <span class="keyword">raise</span> NumErorr(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> NumErorr <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">except</span> MyException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>举例说明异常模块中 try except else finally 的相关意义</li>
</ol>
<ul>
<li><p>try..except..else没有捕获到异常，执行else语句</p>
</li>
<li><p>try..except..finally不管是否捕获到异常，都执行finally语句</p>
</li>
</ul>
<ol start="10">
<li>遇到 bug 如何处理</li>
</ol>
<ul>
<li>细节上的错误，通过print（）打印，能执行到print（）说明一般上面的代码没有问题，分段检测程序是否有问题，如果是js的话可以alert或console.log</li>
<li>assert / try-except / IDE单步调式</li>
<li>如果涉及一些第三方框架，会去查官方文档或者一些技术博客。</li>
<li>issue中查询是否有相似bug</li>
</ul>
<h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h2><ol>
<li>谈谈对 Python 和其他语言的区别</li>
<li>简述解释型和编译型编程语言</li>
<li>Python 的解释器种类以及相关特点？</li>
<li>说说你知道的Python3 和 Python2 之间的区别？</li>
<li>Python3 和 Python2 中 int 和 long 区别？</li>
<li>xrange 和 range 的区别？</li>
</ol>
<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p>7.什么是 PEP8?<br>8.了解 Python 之禅么？<br>9.了解 docstring 么？<br>10.了解类型注解么？<br>11.例举你知道 Python 对象的命名规范，例如方法或者类等<br>12.Python 中的注释有几种？<br>13.如何优雅的给一个函数加注释？<br>14.如何给变量加注释？<br>15.Python 代码缩进中是否支持 Tab 键和空格混用。<br>16.是否可以在一句 import 中导入多个库?<br>17.在给 Py 文件命名的时候需要注意什么?<br>18.例举几个规范 Python 代码风格的工具</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>19.列举 Python 中的基本数据类型？<br>20.如何区别可变数据类型和不可变数据类型<br>21.将”hello world”转换为首字母大写”Hello World”<br>22.如何检测字符串中只含有数字?<br>23.将字符串”ilovechina”进行反转<br>24.Python 中的字符串格式化方式你知道哪些？<br>25.有一个字符串开头和末尾都有空格，比如“ adabdw ”,要求写一个函数把这个字符串的前后空格都去掉。<br>26.获取字符串”123456“最后的两个字符。<br>27.一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？<br>28. (1)s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出<a href="2">‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’</a> a = “你好 中国 “，去除多余空格只留一个空格。<br>29. (1)怎样将字符串转换为小写 (2)单引号、双引号、三引号的区别？</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>30.已知 AList = [1,2,3,1,2],对 AList 列表元素去重，写出具体过程。<br>31.如何实现 “1,2,3” 变成 [“1”,”2”,”3”]<br>32.给定两个 list，A 和 B，找出相同元素和不同元素<br>33.[[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]<br>34.合并列表[1,5,7,9]和[2,2,6,8]<br>35.如何打乱一个列表的元素？</p>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>36.字典操作中 del 和 pop 有什么区别<br>37.按照字典的内的年龄排序<br><img data-src="https://pic2.zhimg.com/80/v2-f0c87fcad0839af06187a4def1706f51_720w.jpg" alt=""><br>d1=[<br>    {‘name’:’alice’,’age’:38},<br>    {‘name’:’bob’,’age’:16},<br>    {‘name’:’carl’,’age’:18},</p>
<p>]</p>
<p>38.请合并下面两个字典 a = {“A”:1,”B”:2},b = {“C”:3,”D”:4}<br>39.如何使用生成式的方式生成一个字典，写一段功能代码。<br>40.如何把元组(“a”,”b”)和元组(1,2)，变为字典{“a”:1,”b”:2}</p>
<h3 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h3><p>41.Python 常用的数据结构的类型及其特性？<br><img data-src="https://pic4.zhimg.com/80/v2-3774e05a878688a01233e58eedd189a4_720w.jpg" alt=""><br>42.如何交换字典 {“A”：1,”B”：2}的键和值？<br>43.Python 里面如何实现 tuple 和 list 的转换？<br>44.我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？<br>45.请将[i for i in range(3)]改成生成器<br>46.a=”hello”和 b=”你好”编码成 bytes 类型<br>47.下面的代码输出结果是什么？<br><img data-src="https://pic2.zhimg.com/80/v2-9ece529b1810bbd9052e929e4dbb760a_720w.jpg" alt=""><br>48.下面的代码输出的结果是什么?<br><img data-src="https://pic2.zhimg.com/80/v2-e8e5e086d9e9c7b45861717d33de5986_720w.jpg" alt=""><br>49.Python 交换两个变量的值<br>50.在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用<br>51.json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？<br>52.json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？<br>53.有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。<br>54.如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。<br>55.写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。<br>56.下面代码会存在什么问题，如何改进？<br><img data-src="https://pic2.zhimg.com/80/v2-474f556cb8cd7d2ea7a47b0cba51c9cd_720w.jpg" alt=""><br>57.一行代码输出 1-100 之间的所有偶数。<br>58.with 语句的作用，写一段代码？<br>59.python 字典和 json 字符串相互转化方法<br>60.请写一个 Python 逻辑，计算一个文件中的大写字母数量<br>61. 请写一段 Python连接 Mongo 数据库，然后的查询代码。<br>62.说一说 Redis 的基本类型。<br>63. 请写一段 Python连接 Redis 数据库的代码。<br>64. 请写一段 Python 连接 MySQL 数据库的代码。<br>65.了解 Redis 的事务么？<br>66.了解数据库的三范式么？<br>67.了解分布式锁么？<br>68.用 Python 实现一个 Reids 的分布式锁的功能。<br>69.写一段 Python 使用 Mongo 数据库创建索引的代码。</p>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><p>70.函数装饰器有什么作用？请列举说明？<br>71.Python 垃圾回收机制？<br>72.魔法函数 <strong>call</strong>怎么使用?<br>73.如何判断一个对象是函数还是方法？<br>74.@classmethod 和@staticmethod 用法和区别<br>75.Python 中的接口如何实现？<br>76.Python 中的反射了解么?<br>77.metaclass 作用？以及应用场景？<br>78.hasattr() getattr() setattr()的用法<br>79.请列举你知道的 Python 的魔法方法及用途。<br>80.如何知道一个 Python 对象的类型？<br>81.Python 的传参是传值还是传址？<br>82.Python 中的元类(metaclass)使用举例<br>83.简述 any()和 all()方法<br>84.filter 方法求出列表所有奇数并构造新列表，a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>85.什么是猴子补丁？<br>86.在 Python 中是如何管理内存的？<br>87.当退出 Python 时是否释放所有内存分配？</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>88.使用正则表达式匹配出<html><h1>百度一下，你就知道</html>中的地址 a=”张明 98 分”，用 re.sub，将 98 替换为 100<br>89.正则表达式匹配中(.<em>)和(.</em>?)匹配区别？<br>90.写一段匹配邮箱的正则表达式</p>
<h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><p>91.解释一下 python 中 pass 语句的作用？<br>92.简述你对 input()函数的理解<br>93.python 中的 is 和==<br>94.Python 中的作用域<br>95.三元运算写法和应用场景？<br>96.了解 enumerate 么？<br>97.列举 5 个 Python 中的标准模块<br>98.如何在函数中设置一个全局变量<br>99.pathlib 的用法举例<br>100.Python 中的异常处理，写一个简单的应用场景<br>101.Python 中递归的最大次数，那如何突破呢？<br>102.什么是面向对象的 mro<br>103.isinstance 作用以及应用场景？<br>104.什么是断言？应用场景？<br>105.lambda 表达式格式以及应用场景？<br>106.新式类和旧式类的区别<br>107.dir()是干什么用的？<br>108.一个包里有三个模块，demo1.py, demo2.py, demo3.py，但使用 from tools import <em>导入模块时，如何保证只有 demo1、demo3 被导入了。<br>109.列举 5 个 Python 中的异常类型以及其含义<br>110.copy 和 deepcopy 的区别是什么？<br>111.代码中经常遇到的</em>args, **kwargs 含义及用法。<br>112.Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?<br>113.w、a+、wb 文件写入模式的区别<br>114.举例 sort 和 sorted 的区别<br>115.什么是负索引？<br>116.pprint 模块是干什么的？<br>117.解释一下 Python 中的赋值运算符<br>118.解释一下 Python 中的逻辑运算符<br>119.讲讲 Python 中的位运算符<br>120.在 Python 中如何使用多进制数字？<br>121.怎样声明多个变量并赋值？</p>
<h2 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h2><p>122.已知：<br><img data-src="https://pic4.zhimg.com/80/v2-f78e20b47b593dc30d2892c34e1c5a7b_720w.jpg" alt=""><br>(1) 从 AList 和 BSet 中 查找 4，最坏时间复杂度那个大？<br>(2) 从 AList 和 BSet 中 插入 4，最坏时间复杂度那个大？<br>123.用 Python 实现一个二分查找的函数<br>124.python 单例模式的实现方法<br>125.使用 Python 实现一个斐波那契数列<br>126.找出列表中的重复数字<br>127.找出列表中的单个数字<br>128.写一个冒泡排序<br>129.写一个快速排序<br>130.写一个拓扑排序<br>131.python 实现一个二进制计算<br>132.有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。<br>133.单链表反转<br>134.交叉链表求交点<br>135.用队列实现栈<br>136.找出数据流的中位数<br>137.二叉搜索树中第 K 小的元素</p>
<h2 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关"></a>爬虫相关</h2><p>138.在 requests 模块中，requests.content 和 requests.text 什么区别<br>139.简要写一下 lxml 模块的使用方法框架<br>140.说一说 scrapy 的工作流程<br>141.scrapy 的去重原理<br>142.scrapy 中间件有几种类，你用过哪些中间件<br>143.你写爬虫的时候都遇到过什么？反爬虫措施，你是怎么解决的？<br>144.为什么会用到代理？<br>145.代理失效了怎么处理？<br>146.列出你知道 header 的内容以及信息<br>147.说一说打开浏览器访问 百度一下，你就知道 获取到结果，整个流程。<br>148.爬取速度过快出现了验证码怎么处理<br>149.scrapy 和 scrapy-redis 有什么区别？为什么选择 redis 数据库？<br>150.分布式爬虫主要解决什么问题<br>151.写爬虫是用多进程好？还是多线程好？ 为什么？<br>152.解析网页的解析器使用最多的是哪几个<br>153.需要登录的网页，如何解决同时限制 ip，cookie,session（其中有一些是动态生成的）在不使用动态爬取的情况下？<br>154.验证码的解决（简单的：对图像做处理后可以得到的，困难的：验证码是点击，拖动等动态进行的？）<br>155.使用最多的数据库（mysql，mongodb，redis 等），对他的理解？</p>
<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><p>156.TCP 和 UDP 的区别？<br>157.简要介绍三次握手和四次挥手<br>158.什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象？</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>159.举例说明 conccurent.future 的中线程池的用法<br>160.说一说多线程，多进程和协程的区别。<br>161.简述 GIL<br>162.进程之间如何通信<br>163.IO 多路复用的作用？<br>164.select、poll、epoll 模型的区别？<br>165.什么是并发和并行？<br>166.一个线程 1 让线程 2 去调用一个函数怎么实现？<br>167.解释什么是异步非阻塞？<br>168.threading.local 的作用？</p>
<h2 id="Git-面试题"><a href="#Git-面试题" class="headerlink" title="Git 面试题"></a>Git 面试题</h2><p>169.说说你知道的 git 命令<br>170.git 如何查看某次提交修改的内容</p>
]]></content>
      <categories>
        <category>收藏</category>
        <category>hide</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>Git笔记</title>
    <url>/20200408/git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Git 命令操作笔记<br>来源<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的官方网站</a><br>参考:</p>
<ul>
<li><a href="https://git-scm.com/book/zh/v2/" target="_blank" rel="noopener">Git Book</a></li>
<li><a href="https://git-scm.com/docs" target="_blank" rel="noopener">Git Reference</a><a id="more"></a>

</li>
</ul>
<h1 id="一、-安装"><a href="#一、-安装" class="headerlink" title="一、 安装"></a>一、 安装</h1><p><a href="#">安装步骤</a>略</p>
<ul>
<li>下载并安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a>.</li>
<li>或者前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝镜像 Git for Windows </a></li>
</ul>
<h1 id="二、-配置"><a href="#二、-配置" class="headerlink" title="二、 配置"></a>二、 配置</h1><p>安装完成后，修改用户名和地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"email@example.com"</span></span><br><span class="line"><span class="comment"># 查看用户名和地址</span></span><br><span class="line"><span class="comment">#git config user.name</span></span><br><span class="line"><span class="comment">#git config user.email</span></span><br></pre></td></tr></table></figure>

<h2 id="1-为什么是-global"><a href="#1-为什么是-global" class="headerlink" title="1. 为什么是--global"></a>1. 为什么是<code>--global</code></h2><blockquote><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置，每一个级别会覆盖上一级别的配置：</p>
<ol>
<li><code>/etc/gitconfig</code> 文件: 系统配置文件，作用于系统上每一个用户及他们仓库的通用配置。 可使用<code>--system</code>参数来读写该文件中的配置变量。（需要管理员或超级用户权限）</li>
<li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。 可使用<code>--global</code>参数读写此文件。</li>
<li><code>.git/config</code>文件：针对当前使用的仓库。可使用<code>--local</code>参数使 Git 强制读写此文件。（默认使用该参数）</li>
</ol>
<p>在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 <code>C:\Users\$USER</code> ）的 <code>.gitconfig</code> 文件。<br>Git 同样也会寻找 <code>/etc/gitconfig</code> 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。<br>如果你在 Windows 上使用 Git 2.x 以后的版本，那么还有一个系统级的配置文件，Windows XP 上在 <code>C:\Documents and Settings\All Users\Application Data\Git\config</code> ，Windows Vista 及更新的版本在 <code>C:\ProgramData\Git\config</code> 。此文件只能以管理员权限通过 <code>git config -f &lt;file&gt;</code> 来修改。</p>
<footer><strong>GitSCM</strong><cite><a href="https://git-scm.com/book/zh/v2/起步-初次运行-Git-前的配置" target="_blank" rel="noopener">初次运行 Git 前的配置</a></cite></footer></blockquote>


<h2 id="2-如何获得说明"><a href="#2-如何获得说明" class="headerlink" title="2. 如何获得说明"></a>2. 如何获得说明</h2><p>有三种等价的方法可以找到 Git 命令的综合手册（manpage）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line">man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure>
<p>例如：<code>git help config</code>，可以用 -h 选项获得更简明的 “help” 输出</p>
<h1 id="三、-创建版本库"><a href="#三、-创建版本库" class="headerlink" title="三、 创建版本库"></a>三、 创建版本库</h1><p>版本库又名仓库，可以理解成一个目录。</p>
<h2 id="1-在-空-目录下创建一个仓库"><a href="#1-在-空-目录下创建一个仓库" class="headerlink" title="1. 在(空)目录下创建一个仓库"></a>1. 在(空)目录下创建一个仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<div class="note info">
            <h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><code>.git</code>文件夹是用于跟踪管理版本库。</li><li>Git有两个区域，工作区和暂存区。每次修改文件，文件会进入工作区。</li></ol>
          </div>

<h2 id="2-提交到暂存区"><a href="#2-提交到暂存区" class="headerlink" title="2. 提交到暂存区"></a>2. 提交到暂存区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>


<blockquote><p>git add -A  提交所有变化<br>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)<br>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</p>
<footer><strong>CaseyWei</strong><cite><a href="https://blog.csdn.net/caseywei/article/details/90945295" target="_blank" rel="noopener">git add -A 和 git add . 的区别</a></cite></footer></blockquote>


<h2 id="3-保存至本地库"><a href="#3-保存至本地库" class="headerlink" title="3. 保存至本地库"></a>3. 保存至本地库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"..."</span></span><br></pre></td></tr></table></figure>

<h2 id="4-时刻掌握状态"><a href="#4-时刻掌握状态" class="headerlink" title="4. 时刻掌握状态"></a>4. 时刻掌握状态</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="5-推送至远程库"><a href="#5-推送至远程库" class="headerlink" title="5. 推送至远程库"></a>5. 推送至远程库</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-博客备份</title>
    <url>/20200402/hexo-%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="一、-安装hexo-git-backup插件"><a href="#一、-安装hexo-git-backup插件" class="headerlink" title="一、 安装hexo-git-backup插件"></a>一、 安装hexo-git-backup插件</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>版本是2.x.x使用这条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-git-backup@0.0.91 --save</span><br></pre></td></tr></table></figure>

<p>版本是3.x.x 或3+则使用这条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-更新"><a href="#2-更新" class="headerlink" title="2. 更新"></a>2. 更新</h2><p>如果使用–save进行安装，则必须在更新时先将其删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm remove hexo-git-backup</span><br><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>

<h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>修改<code>_config.yml</code>文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">backup:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure>

<h2 id="4-备份到云端"><a href="#4-备份到云端" class="headerlink" title="4. 备份到云端"></a>4. 备份到云端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo b</span><br></pre></td></tr></table></figure>

<ul>
<li>更多参见<a href="https://www.npmjs.com/package/hexo-git-backup" target="_blank" rel="noopener">npmjs</a>或<a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">GitHub</a></li>
</ul>
<h1 id="二、-以命令备份"><a href="#二、-以命令备份" class="headerlink" title="二、 以命令备份"></a>二、 以命令备份</h1><h2 id="1-需要备份的文件"><a href="#1-需要备份的文件" class="headerlink" title="1. 需要备份的文件"></a>1. 需要备份的文件</h2><ol>
<li><code>./source</code>资源文件夹，这里面包含了你写的文章的 markdown 源码，这个是最重要的。</li>
<li><code>./themes</code>主题文件夹，</li>
<li><code>./scaffolds</code>模板文件夹，这个文件夹里是创建文章时的模板。</li>
<li>配置文件，根目录下的几个配置文件，主要是 <code>_config.yml</code>、 <code>package.json</code>、 <code>.gitignore</code>。 </li>
</ol>
<h2 id="2-创建分支"><a href="#2-创建分支" class="headerlink" title="2. 创建分支"></a>2. 创建分支</h2><p>例如：在此创建了两个分支：<code>master</code> 与 <code>backup</code></p>
<ul>
<li>master 分支用来存放生成的静态网页</li>
<li>backup 分支用来存放网站的原始文件</li>
</ul>
<p>在本地设置<code>backup</code>为默认分支，而<code>_config.yml</code>中的<code>deploy</code>参数， 分支应为<code>master</code>；</p>
<p>依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">'...'</span></span><br><span class="line">git push –<span class="built_in">set</span>-upstream origin backup</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p><code>–set-upstream</code>是将本地分支<span class="label info">关联</span>到远程<code>backup</code>分支，</p>
          </div>
<p>提交原始文件到<code>backup</code>分支，</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>六大设计原则</title>
    <url>/20200518/%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>设计模式的六大原则有：</p>
<ul>
<li>Single Responsibility Principle：单一职责原则</li>
<li>Open Closed Principle：开闭原则</li>
<li>Liskov Substitution Principle：里氏替换原则</li>
<li>Law of Demeter：迪米特法则</li>
<li>Interface Segregation Principle：接口隔离原则</li>
<li>Dependence Inversion Principle：依赖倒置原则</li>
</ul>
<a id="more"></a>

<p>把这六个原则的首字母联合起来（两个 L 算做一个）就是 SOLID （solid，稳定的），其代表的含义就是这六个原则结合使用的好处：<strong>建立稳定、灵活、健壮的设计</strong>。</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><ul>
<li>书籍《设计模式之禅》</li>
<li><a href="https://www.jianshu.com/p/3268264ae581" target="_blank" rel="noopener">简书-六大设计原则(SOLID)</a></li>
<li><a href="https://www.jianshu.com/p/c3ce6762257c" target="_blank" rel="noopener">简书-六大设计原则之依赖倒置原则（DIP）</a><ul>
<li><strong>本文是整理这篇文章及其内链</strong></li>
</ul>
</li>
<li><a href="https://blog.csdn.net/rocketeerli/article/details/81585705" target="_blank" rel="noopener">CSDN-设计模式六大原则——SOLID</a></li>
</ul>
<h1 id="一、-单一职责原则"><a href="#一、-单一职责原则" class="headerlink" title="一、 单一职责原则"></a>一、 单一职责原则</h1><div class="note default no-icon">
            <p>There should never be more than one reason for a class to change.<br><em>一个类应该只有一个发生变化的原因</em></p>
          </div>

<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>单一职责原则（Single Responsibility Principle, SRP ），就是<strong>一个类只负责一个职责</strong>，降低类的复杂度，维护起来更加容易。<br>这个原则不仅仅局限于类，对于接口和方法也同样适用。通常，接口和方法的单一职责更容易实现。</p>
<h2 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h2><ul>
<li>代码的粒度降低了，类的复杂度降低了。</li>
<li>可读性提高了，每个类的职责都很明确，可读性自然更好。</li>
<li>可维护性提高了，可读性提高了，一旦出现 bug ，自然更容易找到他问题所在。</li>
<li>改动代码所消耗的资源降低了，更改的风险也降低了。</li>
</ul>
<h1 id="二、-开闭原则"><a href="#二、-开闭原则" class="headerlink" title="二、 开闭原则"></a>二、 开闭原则</h1><div class="note default no-icon">
            <p>Software entities like classes, modules and functions should be open for extension but closed for modification<br><em>一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭</em></p>
          </div>


<h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>开闭原则（Open Closed Principle, OCP）旨在如何建立稳定灵活的系统，只定义了对修改关闭，对扩展开放。</p>
<p>对软件原有代码进行修改，可能会给旧代码引入错误，也有可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现。</p>
<h2 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h2><p><strong>用抽象构建架构，用实现扩展细节。</strong>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保证架构的稳定。而软件中易变的细节，我们用从抽象派生的实现类来进行扩展，当软件需要发生变化时，我们只需要根据需求重新派生一个实现类来扩展就可以了，当然前提是抽象要合理，要对需求的变更有前瞻性和预见性。</p>
<h1 id="三、-里氏替换原则"><a href="#三、-里氏替换原则" class="headerlink" title="三、 里氏替换原则"></a>三、 里氏替换原则</h1><p><strong>所有引用基类的地方必须能透明地使用其子类的对象</strong></p>
<div class="note default no-icon">
            <p>Functions that use use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p>
          </div>


<h2 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>里氏替换原则（Liskov Substitution Principle, LSP    ）是指所有基类在的地方，都可以换成子类，程序还可以正常运行。<br>这个原则是与面向对象语言的继承特性密切相关，是为了弥补继承的缺陷。</p>
<div class="note info no-icon">
            <p><strong>在学习java类的继承时，我们知道继承有一些优点</strong>：</p><ul><li>子类拥有父类的所有方法和属性，从而可以减少创建类的工作量。</li><li>提高了代码的重用性。</li><li>提高了代码的扩展性，子类不但拥有了父类的所有功能，还可以添加自己的功能。</li></ul><p><strong>但有优点也同样存在缺点</strong>：</p><ul><li>继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法。</li><li>降低了代码的灵活性。因为继承时，父类会对子类有一种约束。</li><li>增强了耦合性。当需要对父类的代码进行修改时，必须考虑到对子类产生的影响。</li></ul>
          </div>

<h2 id="2-特点-1"><a href="#2-特点-1" class="headerlink" title="2. 特点"></a>2. 特点</h2><p>里氏替换原则对继承进行了规则上的约束，这种约束主要体现在四个方面：</p>
<ul>
<li>子类必须实现父类的抽象方法，但不得重写（覆盖）父类的非抽象（已实现）方法。</li>
<li>子类中可以增加自己特有的方法。</li>
<li>当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比- 父类方法的输入参数更宽松。(即只能重载不能重写)</li>
<li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li>
</ul>
<h1 id="四、-迪米特法则"><a href="#四、-迪米特法则" class="headerlink" title="四、 迪米特法则"></a>四、 迪米特法则</h1><div class="note default no-icon">
            <p>Talk only to your immediate friends and not to strangers</p>
          </div>

<p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p>
<h2 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>迪米特法则（Law of Demeter, LOD）要求限制软件实体之间通信的宽度和深度。</p>
<p>过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。它调以下两点：</p>
<ul>
<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>
<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>
</ul>
<h2 id="2-优点-1"><a href="#2-优点-1" class="headerlink" title="2. 优点"></a>2. 优点</h2><p>正确使用迪米特法则将有以下两个优点。</p>
<ul>
<li>降低了类之间的耦合度，提高了模块的相对独立性。</li>
<li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</li>
</ul>
<h1 id="五、-接口隔离原则"><a href="#五、-接口隔离原则" class="headerlink" title="五、 接口隔离原则"></a>五、 接口隔离原则</h1><div class="note default no-icon">
            <p>Clients should not be forced to depend upon interfaces that they don`t use.<br>The dependency of one class to another one should depend on the smallest possible.</p>
          </div>

<p>注：该原则中的接口，是一个泛泛而言的接口，不仅仅指Java中的接口，还包括其中的抽象类。</p>
<h2 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>接口隔离原则（Interface Segregation Principle, ISP）的定义：</p>
<ol>
<li>客户端不应该依赖它不需要的接口。</li>
<li>类间的依赖关系应该建立在最小的接口上。</li>
</ol>
<h2 id="2-优点-2"><a href="#2-优点-2" class="headerlink" title="2. 优点"></a>2. 优点</h2><p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。</p>
<ul>
<li>将臃肿庞大的<span class="label info">接口分解</span>为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li>
<li><span class="label info">接口隔离</span>提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</li>
<li>如果<span class="label info">接口的粒度大小定义合理</span>，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</li>
<li>使用<span class="label info">多个专门的接口</span>还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li>
<li>在项目工程中<span class="label info">减少代码冗余</span>。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</li>
</ul>
<h2 id="3-实现方法"><a href="#3-实现方法" class="headerlink" title="3. 实现方法"></a>3. 实现方法</h2><p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>
<ul>
<li>根据接口隔离原则拆分接口时，首先必须满足单一职责原则。</li>
<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>
<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>
<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>
</ul>
<h2 id="4-接口隔离原则和单一职责的区别"><a href="#4-接口隔离原则和单一职责的区别" class="headerlink" title="4. 接口隔离原则和单一职责的区别"></a>4. 接口隔离原则和单一职责的区别</h2><p>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</p>
<table>
<thead>
<tr>
<th align="center">&nbsp;</th>
<th align="center">接口隔离原则</th>
<th align="center">单一职责</th>
</tr>
</thead>
<tbody><tr>
<td align="center">注重</td>
<td align="center">职责</td>
<td align="center">对接口依赖的隔离</td>
</tr>
<tr>
<td align="center">主要</td>
<td align="center">约束类</td>
<td align="center">约束接口</td>
</tr>
<tr>
<td align="center">针对</td>
<td align="center">程序中的实现和细节</td>
<td align="center">抽象和程序整体框架的构建</td>
</tr>
</tbody></table>
<h1 id="六、-依赖倒置原则"><a href="#六、-依赖倒置原则" class="headerlink" title="六、 依赖倒置原则"></a>六、 依赖倒置原则</h1><div class="note default no-icon">
            <p>High level modules should not depend upon low level modules. Both should depend upon abstractions.<br>Abstractions should not depend upon details. Details should depend upon abstractions.</p>
          </div>

<h2 id="1-概念-5"><a href="#1-概念-5" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>依赖倒置原则（Dependence Inversion Principle）</p>
<ol>
<li>上层模块不应该依赖底层模块，它们都应该依赖于抽象。</li>
<li>抽象不应该依赖于细节，细节应该依赖于抽象。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>pip源切换</title>
    <url>/20200521/pip%E6%BA%90%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>pip默认的源服务器在国外，安装速度较慢，推荐使用国内的源。</p>
<a id="more"></a>

<h1 id="源列表"><a href="#源列表" class="headerlink" title="源列表"></a>源列表</h1><ul>
<li>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></li>
<li>中科大：<a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></li>
<li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li>
</ul>
<h1 id="一次性使用"><a href="#一次性使用" class="headerlink" title="一次性使用"></a>一次性使用</h1><p>可以在使用pip的时候加参数-i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-simpleui -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<h1 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h1><div class="tabs" id="pip源永久修改"><ul class="nav-tabs"><li class="tab active"><a href="#pip源永久修改-1">Linux & MacOS</a></li><li class="tab"><a href="#pip源永久修改-2">Windows</a></li></ul><div class="tab-content"><div class="tab-pane active" id="pip源永久修改-1"><p>linux下，修改 <code>~/.pip/pip.conf</code> (没有就创建一个)， 修改 <code>index-url</code> 为国内镜像地址，内容如下：</p>
<figure class="highlight bash"><figcaption><span>/.pip/pip.conf</span></figcaption><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="pip源永久修改-2"><p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件<code>pip.ini</code>，内容如下</p>
<figure class="highlight bash"><figcaption><span>pip.ini</span></figcaption><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
  </entry>
  <entry>
    <title>python依赖性管理工具概述[译]</title>
    <url>/20200602/python%E4%BE%9D%E8%B5%96%E6%80%A7%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%A6%82%E8%BF%B0-%E8%AF%91/</url>
    <content><![CDATA[<p>原文：<a href="https://modelpredict.com/python-dependency-management-tools" target="_blank" rel="noopener">python依赖性管理工具概述</a></p>
<p>一直分不清管理依赖的工具之间的区别？Pip, venv, Docker, conda, virtualenvwrapper, pipenv, …不知道用哪一个？为什么有这么多不同的工具？它们之间兼容吗？</p>
<a id="more"></a>

<p>Python在依赖项管理这方面很糟糕，但是一旦你理解了这些工具及其存在的原因，就会更容易地选择你最想要的工具，即使您不能在其他环境中选择您最喜欢的，也可以选择最适合的。<br>我将简要介绍每个工具，创建原因以及要解决的问题。在文章的最后，您可以找到一个表格，其中汇总了所有信息以及人们使用的常用设置。</p>
<p>跳转： <a href="#Pip">pip</a> | <a href="#Venv">venv</a> | <a href="#Pyenv">pyenv</a> | <a href="#Conda">conda</a> | <a href="#Pipenv">pipenv</a> | <a href="#Poetry">poetry</a> | <a href="#Docker">Docker</a>.<br><a href="#比较所有解决方案">比较所有解决方案</a> | <a href="#常规设置">常规设置</a></p>
<h2 id="Pip"><a href="#Pip" class="headerlink" title="Pip"></a>Pip</h2><p>Pip（package installer for python，python的软件包安装程序）是python领域中最基本的软件包安装程序。 大多数python安装程序中都预先安装了该软件，因此您可能不必自己安装它。<br>安装软件包就像运行pip install torch一样简单。 该命令与PyPI（The Python Package Index，Python包索引）进行通信，下载并安装软件包，使它在当前的python环境下可用。<br>这是一个非常原始的工具。它对不同的python版本或Jupyter内核一无所知。</p>
<p><em><img data-src="pip_install_requests.png" alt="Pip会将软件包安装在指向活动python安装所在的_site-packages_目录中。在这种情况下，它是由pyenv-〜/ .pyenv / versions / 3.6.3 / lib / python3.6 / site-packages激活的。"></em></p>
<p>Pip解决的问题：</p>
<ul>
<li>安装python包</li>
</ul>
<h2 id="Venv"><a href="#Venv" class="headerlink" title="Venv"></a>Venv</h2><p>venv是用于创建轻量级虚拟环境的工具。<br>最常见的用例是为每个应用程序创建环境。它可以确保应用程序之间不会共享软件包，也不会与系统的python安装共享软件包。每个环境都可以使用同一软件包的任何版本，并且它们不会冲突。</p>
<p><em><img data-src="venv_install_requests_marked.png" alt="激活虚拟环境将使以下pip安装属于该虚拟环境。您还可以看到在虚拟环境中运行的python将查看该虚拟环境中的站点包。"></em></p>
<p>venv解决的问题：</p>
<ul>
<li>在应用之间隔离包</li>
</ul>
<h3 id="venv和pip如何交互？"><a href="#venv和pip如何交互？" class="headerlink" title="venv和pip如何交互？"></a>venv和pip如何交互？</h3><p>它们都是标准python工具的一部分，可以解决非常不同的问题，并且可以很好地协同工作。鼓励您使用pip在虚拟环境中安装软件包。</p>
<h2 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h2><p>Python成为一种流行的语言，所有主要的操作系统都开始在它之上构建并将其捆绑在一起。这就是为什么您可以直接python在新安装的Linux或Mac OS上键入终端而无需自己安装终端的原因。<br>但是用户应用程序也是用python构建的。而且他们通常需要不同版本的python！结合使用这两种方法，需要根据应用程序以某种方式运行不同版本的python。<br>创建Pyenv是为了解决在同一台计算机上安装和切换不同版本的python的问题。<br>这是开发人员机器上的便捷工具，因为它保留了python的系统版本（需要OS才能正常运行），但是可以为不同的应用程序安装和切换不同版本（基于当前路径，用户等）。<br>这是在系统版本和3.6.3之间切换的示例。运行pyenv local 3.6.3会记住下次您导航到该目录时激活3.6.3版。</p>
<p><em><img data-src="pyenv_versions.png" alt="Pyenv允许为特定目录设置python版本。这样，您不必每次回到项目时都进行更改"></em></p>
<p>pyenv解决的问题：</p>
<ul>
<li>安装不同的python版本</li>
<li>在不同的上下文中使用不同的python版本</li>
</ul>
<h3 id="pyenv和pip如何交互？"><a href="#pyenv和pip如何交互？" class="headerlink" title="pyenv和pip如何交互？"></a>pyenv和pip如何交互？</h3><p>Pyenv和pip相辅相成。您可以将pyenv视为pip的容器/外壳。无论pyenv设置为什么，Pip都会为当前python版本安装软件包。实际上，来自两个环境的pip命令是不同的二进制文件，它们互不影响。</p>
<p><em><img data-src="pyenv_which_pip.png" alt="不同的python版本对pip3的解析方式不同。"></em></p>
<h2 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h2><p>你可能在Anaconda或miniconda知道这个工具<br>一旦科学界开始认真使用python，Python领域对软件包管理工具的需求就会增加。更具体地说，对于某些纯粹的计算工作负载，python变得太慢了，因此诞生了numpy和scipy。这些库不是真正用python编写的。它们是用C语言编写的，只是包装为python库。<br>编译此类库带来了一系列挑战，因为必须（或多或少）将它们编译在您的计算机上才能获得最佳性能，并与glibc之类的库正确链接。<br>Conda是作为用于管理科学界的python环境的多合一解决方案而引入的。<br>它采取了不同的方法。与在机器上使用脆弱的编译库过程不同，库是预编译的，并在您请求它们时才下载。不足的是，该解决方案附带了一个警告-conda不使用PyPI（Python包的最受欢迎索引）。<br>Conda拥有自己的带有多个渠道的包装指数（anaconda渠道由conda的创建者维护，并且是最可靠的渠道）。Anaconda频道不如PyPI完整，并且两个地方都存在的软件包通常比PyPI落后几个版本。其他渠道更新软件包的速度更快，但我强烈建议检查谁维护各自的软件包（通常不是库作者！）。</p>
<p><em><img data-src="conda_list.png" alt="Conda环境封装了python，非python二进制（openssl）和python（werkzeug）软件包。您会看到激活不同的环境可以交换所有这些。"></em></p>
<p>总之，Conda正在解决以下问题：</p>
<ul>
<li>管理不同的python版本</li>
<li>管理不同的环境</li>
<li>安装python包</li>
<li>编译和安装非python软件包（请考虑使用OpenSSL，CUDA驱动程序等）</li>
</ul>
<h3 id="什么是anaconda-和miniconda？"><a href="#什么是anaconda-和miniconda？" class="headerlink" title="什么是anaconda 和miniconda？"></a>什么是anaconda 和miniconda？</h3><p>Anaconda和miniconda是conda工具的不同发行版。Miniconda的目标是一切从简，它仅安装了python和conda工具。而Anaconda将安装额外的160多个软件包，这些软件包经常在数据科学工作流程中使用。<br>如果要严格控制运行的环境，建议安装miniconda并使用自底向上的方法构建环境。</p>
<h3 id="conda如何与pip和其他工具互动"><a href="#conda如何与pip和其他工具互动" class="headerlink" title="conda如何与pip和其他工具互动"></a>conda如何与pip和其他工具互动</h3><p>Conda是一个非常强大的工具，它解决了许多问题，因此经常在某些方面与其他工具发生冲突。虽然conda与其他工具（例如，使用pipenv）可以一起工作，但是需要对这两个工具（python软件包加载）有更深入的了解，而且并不经常这样使用。</p>
<p>我发现有两种可靠的conda设置：</p>
<ul>
<li>Conda作为多合一解决方案</li>
<li>Conda用于环境管理并为Python软件包安装二进制软件包+ pip（conda + pip的最佳做法）</li>
</ul>
<h2 id="Pipenv"><a href="#Pipenv" class="headerlink" title="Pipenv"></a>Pipenv</h2><p>Pipenv是由热门请求包的作者创建的一套开发工作流程工具。除了使普通的工作流更加流畅并根据需求管理文件（Pipfile）之外，pipenv还解决了以下问题：</p>
<ul>
<li>管理不同的python版本（通过pyenv，如果已安装）</li>
<li>管理不同的环境</li>
<li>安装python包</li>
<li>环境再现性</li>
</ul>
<p>它从PyPI加载程序包，因此不会遇到与Conda相同的问题。<br>Pipenv是第一个提出认真解决环境可再现性问题的工具。保存conda环境（environment.yml）和pip / venv（requirements.txt）的标准方法解决了部分问题：它们包含您已安装的版本化软件包，但不包含其依赖项的版本。这就为包括安全问题在内的几类错误留出了空间。</p>
<p><em><img data-src="pipenv_first_install.png" alt="Pipenv真的很容易使用。首次运行pipenv install时，它将创建一个虚拟环境并为您进行所有设置。它通过目录路径知道下次使用哪种环境。"></em></p>
<p>Pipenv通过维护Pipfile.lock文件来密封软件包版本，该文件包含虚拟环境中使用的所有软件包的特定版本。</p>
<h3 id="pipenv如何与pip和其他工具一起使用？"><a href="#pipenv如何与pip和其他工具一起使用？" class="headerlink" title="pipenv如何与pip和其他工具一起使用？"></a>pipenv如何与pip和其他工具一起使用？</h3><p>Pipenv是pip和其他几种工具的不错的包装，这意味着它与pip可以很好地交互。如果您使用<code>pipenv install &lt;package&gt;</code>而不是<code>pip install &lt;package&gt;</code>，则可以节省一些手动步骤（更改<code>Pipfile</code>和<code>Pipfile.lock</code>）。</p>
<h2 id="Poetry"><a href="#Poetry" class="headerlink" title="Poetry"></a>Poetry</h2><p>Poetry“简化了python包装和依赖管理”。Poetry与Pipenv最相似，并且它们经常争夺用户。诗歌要解决的主要问题是：</p>
<ul>
<li>管理不同的环境</li>
<li>安装python包</li>
<li>环境再现性</li>
<li>打包和发布python包</li>
</ul>
<p>您可以看到它与Pipenv没什么不同。建议与pyenv一起使用。完成此操作后，它可以解决pipenv遇到的所有问题，而且还有助于创建python软件包并将其发布到PyPI。</p>
<p><em><img data-src="poetry_new.png" alt="Poetry比pipenv更自以为是。例如，`poetry new`将创建一个最小的项目结构。在那之后，它们非常相似。"></em></p>
<h3 id="Poetry如何与其他工具互动？"><a href="#Poetry如何与其他工具互动？" class="headerlink" title="Poetry如何与其他工具互动？"></a>Poetry如何与其他工具互动？</h3><p>Poetry是pyenv的补充，它们共同构成了用于管理工作流的完整解决方案。与pipenv相同，它使用PyPI来安装软件包，因此一旦开始使用Poetry就无需使用pip。</p>
<h3 id="Pipenv-还是-poetry？"><a href="#Pipenv-还是-poetry？" class="headerlink" title="Pipenv 还是 poetry？"></a>Pipenv 还是 poetry？</h3><p>不止你一个人想知道为什么会有两个非常相似的工具。主要的技术差异是它们解析软件包的方式。这实际上是一个非常棘手的问题，而poetry在这一方面更胜一筹。当您安装新软件包时，它将更快地弄清它到底需要做什么，并且将更优雅地处理复杂的依赖关系图。<br>我的建议是，如果有人尚未针对您正在研究的项目做一个，那就选择其中任一个。</p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>Docker与python依赖管理无关，但是人们经常在相同的上下文中谈论它，因此绝对值得探索它的作用。<br>Docker是用于创建，运行和管理容器的工具。您可以将容器视为非常轻量级的虚拟机。没有虚拟化，但是它们与操作系统的其他部分是完全隔离的。它为打包生产软件的通用解决方案而被创建，并且以可复制、隔离的方式在云端中运行。<br>您可以运行我在Docker容器中介绍过的任何工具。Docker的优点在于，它给您提供的隔离避免了一些问题。例如，常规的设置是您在不同的容器中运行每个应用程序。这意味着您可以在其中安装不同的python版本，并且它们彼此之间不会影响。此外，由于应用程序是设计隔离的，因此无需任何虚拟环境管理。<br>Docker是一项伟大的创新，它发生在我们在生产环境中运行软件的方式上，但是我不建议将其作为开发机上python依赖管理问题的解决方案。<br>在将Docker用于开发环境时，人们会遇到很多问题：</p>
<ul>
<li>在Windows和Mac OS上，其性能明显下降</li>
<li>除了基本的conda / pipenv / poetry命令之外，还有很多东西要学习</li>
<li>在Docker容器中设置IDE以发现和调试应用程序依赖项通常并非易事，这使开发更加困难</li>
<li>安装与基础系统深度链接的库（例如CUDA驱动程序）可能会变得非常棘手</li>
</ul>
<p><em><img data-src="dockerfile.png" alt="Docker完全不了解python或软件包管理工具。这是从基本Python 3.6.3映像开始的Dockefile的示例。在docker容器中，您实际上可以使用上述任何解决方案。人们通常只使用pip来安装软件包。"></em></p>
<h2 id="比较所有解决方案"><a href="#比较所有解决方案" class="headerlink" title="比较所有解决方案"></a>比较所有解决方案</h2><table>
<thead>
<tr>
<th></th>
<th>安装python包</th>
<th>安装非python软件包</th>
<th>管理python版本</th>
<th>管理虚拟环境</th>
<th>环境再现性</th>
</tr>
</thead>
<tbody><tr>
<td>Pip</td>
<td>✅</td>
<td>✖ *</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>venv</td>
<td></td>
<td></td>
<td></td>
<td>✅</td>
<td></td>
</tr>
<tr>
<td>pyenv</td>
<td></td>
<td></td>
<td>✅</td>
<td></td>
<td></td>
</tr>
<tr>
<td>conda</td>
<td>✅</td>
<td>✅</td>
<td>✅*</td>
<td>✅</td>
<td></td>
</tr>
<tr>
<td>pipenv（+ pyenv）</td>
<td>✅</td>
<td>✅</td>
<td></td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>poetry（+ pyenv）</td>
<td>✅</td>
<td>✅</td>
<td></td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Docker</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>✅</td>
</tr>
</tbody></table>
<p>*Pip：pip无法处理非Python软件包的安装，但是pip wheel消除了在大多数体系结构上大多数库在本地编译软件包的需要<br>Conda：即使conda可以安装非python软件包，它也不能完全替换您的系统软件包管理器（yum，apt-get）。在EC2之类的平台上运行软件仍将需要在conda之外安装一些软件包。<br>Docker：由于Docker非常不了解Python，因此您需要在容器内使用其他工具来完成这些工作。</p>
<h2 id="常规设置"><a href="#常规设置" class="headerlink" title="常规设置"></a>常规设置</h2><h3 id="Pipenv（-pyenv）"><a href="#Pipenv（-pyenv）" class="headerlink" title="Pipenv（+ pyenv）"></a>Pipenv（+ pyenv）</h3><p>易于学习，出色的设置可用于管理依赖关系管理中的所有主要问题。强烈推荐。每当我建立一个新项目时，我都会使用它。</p>
<h3 id="Poetry（-pyenv）"><a href="#Poetry（-pyenv）" class="headerlink" title="Poetry（+ pyenv）"></a>Poetry（+ pyenv）</h3><p>与pipenv一样，它带来了很多好处，并且没有重大缺点。</p>
<h3 id="Conda-1"><a href="#Conda-1" class="headerlink" title="Conda"></a>Conda</h3><p>有些人仅使用conda。此设置的主要问题是，某些库在conda通道中不可用，因此您必须求助于使用conda + pip。</p>
<h3 id="Conda-pip"><a href="#Conda-pip" class="headerlink" title="Conda + pip"></a>Conda + pip</h3><p>通用设置，使用conda进行python版本管理，虚拟环境管理以及安装二进制依赖项。用于安装python软件包的Pip。不幸的是，我提到它有其自身的问题，conda通常是一个非常庞大的工具。<br>经常使用它是因为conda通过nb_conda_kernels扩展与Jupyter集成得很好。每当必须在其他人设置的环境（例如SageMaker）中使用conda时，我都会使用它。</p>
<h3 id="Pyenv-pip-venv"><a href="#Pyenv-pip-venv" class="headerlink" title="Pyenv + pip + venv"></a>Pyenv + pip + venv</h3><p>轻量级的设置来管理不同的python版本和虚拟环境。缺乏用于环境可再现性的解决方案，这对于可靠的生产操作是一个问题。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>包管理</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Django开发的博客</title>
    <url>/20200603/%E5%9F%BA%E4%BA%8Edjango%E5%BC%80%E5%8F%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> 是一个高级Python Web框架，鼓励快速开发和干净，实用的设计。由经验丰富的开发人员构建，它解决了Web开发的大部分麻烦，因此您可以专注于编写应用程序而无需重新造轮子。它是免费的而且开源的框架。</p>
</blockquote>
<a id="more"></a>



<h1 id="一、-开发环境"><a href="#一、-开发环境" class="headerlink" title="一、 开发环境"></a>一、 开发环境</h1><ul>
<li>Visual Studio</li>
<li>python3</li>
<li>Django 2.2</li>
</ul>
<h2 id="1-安装-Visual-Studio-环境"><a href="#1-安装-Visual-Studio-环境" class="headerlink" title="1. 安装 Visual Studio 环境"></a>1. 安装 Visual Studio 环境</h2><p>如果使用 Windows，建议尝试使用<a href="https://visualstudio.microsoft.com/zh-hans/vs/" target="_blank" rel="noopener">Visual Studio</a> 做 Django 开发</p>
<h2 id="2-安装-Python-环境"><a href="#2-安装-Python-环境" class="headerlink" title="2. 安装 Python 环境"></a>2. 安装 Python 环境</h2><p>具体安装请移步<a href="https://www.runoob.com/python3/python3-install.html" target="_blank" rel="noopener">菜鸟教程</a>,在此不做赘述。</p>
<p>安装速度较慢，推荐使用国内的源，<a href="/20200521/pip源切换">pip源切换</a>。</p>
<h2 id="3-安装-Python-虚拟环境"><a href="#3-安装-Python-虚拟环境" class="headerlink" title="3. 安装 Python 虚拟环境"></a>3. 安装 Python 虚拟环境</h2><p>编写新软件程序时，可能要修改其他软件所需的依赖或环境变量。为了避免这一步可能引起的问题，安装虚拟环境是必要的。虚拟环境把软件所需的全部依赖和环境变量包装到一个文件夹中，与电脑中的其他软件隔离开。</p>
<ul>
<li>安装<code>virtualenv</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个虚拟环境<code>[env_mysite]</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv [env_mysite]</span><br></pre></td></tr></table></figure>

<div class="note success">
            <p>等<code>virtualenv</code> 设置好新的虚拟环境之后，会看到一个名为 <code>\env_mysite</code> 的文件夹（或者为虚拟环境起的其他名称）。打开那个文件夹，会看到下述结构：</p><ul><li>\Include</li><li>\Lib</li><li>\Scripts</li><li>\src</li></ul>
          </div>
<ul>
<li>要将其激活虚拟环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env_mysite\scripts\activate</span><br></pre></td></tr></table></figure>

<p>这个命令会运行虚拟环境中 <code>\scripts</code> 文件夹里的 <code>activate</code> 脚本。你会发现，现在命令提示符变了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(env_mysite) C:\Users\Admin&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-其他命令"><a href="#4-其他命令" class="headerlink" title="4).  其他命令"></a>4).  其他命令</h3><div class="note info">
            <p>命令提示符开头的 (env_mysite) 是告诉你，你正在那个虚拟环境中。</p><ul><li>查看当前环境中所有软件包： <code>pip list</code> </li><li>停用当前虚拟环境： <code>env_mysite\scripts\deactivate</code> </li><li>统计所有软件包： <code>pip freeze &gt; freeze.txt</code> </li><li>安装所有必需的包： <code>pip install -r freeze.txt</code> </li></ul>
          </div>

<h2 id="4-安装-Django"><a href="#4-安装-Django" class="headerlink" title="4. 安装 Django"></a>4. 安装 Django</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1). 安装"></a>1). 安装</h3><p>安装<code>Djangos</code>最新稳定版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django</span><br><span class="line">pip install django==2.2.12 <span class="comment"># 明确了版本号</span></span><br></pre></td></tr></table></figure>

<h3 id="2-查看版本号"><a href="#2-查看版本号" class="headerlink" title="2). 查看版本号"></a>2). 查看版本号</h3><p>查看<code>Djangos</code>版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(env_mysite) C:\Users\Admin&gt; python -m django --version</span><br></pre></td></tr></table></figure>

<h2 id="5-Django-后台建设"><a href="#5-Django-后台建设" class="headerlink" title="5. Django 后台建设"></a>5. Django 后台建设</h2><p><a href="https://simpleui.88cto.com/simpleui/" target="_blank" rel="noopener">Simple UI</a>，一个基于Django Admin的现代化主题，基于element-ui+vue开发，可以作为后台管理。<a href="https://simpleui.88cto.com/docs/simpleui/QUICK.html" target="_blank" rel="noopener">快速入门</a>。</p>
<h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1). 安装"></a>1). 安装</h3><p>建议在虚拟环境下安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-simpleui</span><br></pre></td></tr></table></figure>

<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2). 配置"></a>2). 配置</h3><p>在自己项目的<code>settings.py</code>文件中<code>INSTALLED_APPS</code>的第一行加入<code>simpleui</code></p>
<figure class="highlight"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line"># Application definition</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    'simpleui',</span><br><span class="line">    'django.contrib.admin',</span><br><span class="line">    'django.contrib.auth',</span><br><span class="line">    'django.contrib.contenttypes',</span><br><span class="line">    'django.contrib.sessions',</span><br><span class="line">    'django.contrib.messages',</span><br><span class="line">    'django.contrib.staticfiles',</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3-升级"><a href="#3-升级" class="headerlink" title="3). 升级"></a>3). 升级</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-simpleui --upgrade</span><br></pre></td></tr></table></figure>

<h3 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4). 常见问题"></a>4). 常见问题</h3><ol>
<li>如果关闭<code>debug</code>模式后，请执行以下命令将<code>simpleui</code>静态文件静态文件克隆到根目录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>克隆静态文件出错 请在<code>settings.py</code>文件中加入：</li>
</ol>
<figure class="highlight bash"><figcaption><span>settings.py</span></figcaption><table><tr><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">"static"</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>其他问题请参考<a href="https://docs.djangoproject.com/zh-hans/2.2/" target="_blank" rel="noopener">django官方文档</a>。</li>
</ol>
<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><p>&emsp;<br>&emsp;&emsp;<a href="https://docs.djangoproject.com/zh-hans/2.1/" target="_blank" rel="noopener">Django 文档</a><br>&emsp;&emsp;<a href="https://docs.djangoproject.com/zh-hans/2.1/intro/" target="_blank" rel="noopener">Django 教程</a><br>&emsp;&emsp;<a href="https://www.cnblogs.com/zhangxinqi/p/8969006.html" target="_blank" rel="noopener">python3之Django基础篇</a><br>&emsp;&emsp;<a href="http://www.runoob.com/django/django-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a><br>&emsp;&emsp;<img data-src="/20190224/django%E5%88%9D%E6%AD%A5/%E7%B2%BE%E9%80%9ADjango.pdf" alt=""></p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>python 正则</title>
    <url>/20200720/python-%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<p>python 正则表达式，导入<code>re</code>模块。</p>
<a id="more"></a>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table>
<thead>
<tr>
<th align="left">转义字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>\A</code></td>
<td align="left"><em>只匹配字符串开始。</em></td>
</tr>
<tr>
<td align="left"><code>\b</code></td>
<td align="left">匹配单词的词首和词尾,r<code>&#39;\bclass\b&#39;</code></td>
</tr>
<tr>
<td align="left"><code>\B</code></td>
<td align="left">匹配空字符串，但不能在词的开头或者结尾</td>
</tr>
<tr>
<td align="left"><code>\d</code></td>
<td align="left">匹配数字</td>
</tr>
<tr>
<td align="left"><code>\D</code></td>
<td align="left">匹配任何非十进制数字的字符</td>
</tr>
<tr>
<td align="left"><code>\s</code></td>
<td align="left">匹配<code>[ \t\n\r\f\v]</code>等空白符</td>
</tr>
<tr>
<td align="left"><code>\S</code></td>
<td align="left">匹配任何非空白字符</td>
</tr>
<tr>
<td align="left"><code>\w</code></td>
<td align="left">匹配数字或字母<code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="left"><code>\W</code></td>
<td align="left">匹配任何不是单词字符的字符。 这与 \w 正相反。<code>[^a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td align="left"><code>\Z</code></td>
<td align="left">只匹配字符串尾</td>
</tr>
<tr>
<td align="left"><code>.</code></td>
<td align="left">匹配一个字符</td>
</tr>
<tr>
<td align="left"><code>[0-9a-zA-Z\_]</code></td>
<td align="left">匹配一个数字、字母或者下划线</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>*</code></td>
<td align="left">匹配0个或多个字符</td>
</tr>
<tr>
<td align="left"><code>+</code></td>
<td align="left">匹配1个或多个字符</td>
</tr>
<tr>
<td align="left"><code>?</code></td>
<td align="left">匹配0个或1个字符;非贪婪匹配，即尽可能少匹配</td>
</tr>
<tr>
<td align="left"><code>{n}</code></td>
<td align="left">匹配n个字符</td>
</tr>
<tr>
<td align="left"><code>{n,m}</code></td>
<td align="left">匹配n-m个字符</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>A|B</code></td>
<td align="left">匹配A或B</td>
</tr>
<tr>
<td align="left"><code>^</code></td>
<td align="left">表示行的开头 等同<code>\A</code></td>
</tr>
<tr>
<td align="left"><code>$</code></td>
<td align="left">表示行的结束 等同<code>\Z</code></td>
</tr>
<tr>
<td align="left"><code>()</code></td>
<td align="left">表示分组</td>
</tr>
</tbody></table>
<h2 id="re函数"><a href="#re函数" class="headerlink" title="re函数"></a>re函数</h2><table>
<thead>
<tr>
<th align="left">re函数</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>re.match()</code></td>
<td align="left">方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。</td>
</tr>
<tr>
<td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).groups(default=None)</code></td>
<td align="left">返回一个元组，包含所有匹配的子组，在样式中出现的从1到任意多的组合。 default 参数用于不参与匹配的情况，默认为 None。</td>
</tr>
<tr>
<td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).group([n])</code></td>
<td align="left">返回被 RE 匹配的字符串，默认n为0,等同<code>re.match(r&#39;&#39;,&#39;&#39;)[0]</code></td>
</tr>
<tr>
<td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).start()</code></td>
<td align="left">返回匹配开始的位置</td>
</tr>
<tr>
<td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).end()</code></td>
<td align="left">返回匹配结束的位置</td>
</tr>
<tr>
<td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).span()</code></td>
<td align="left">返回一个元组包含匹配 [开始,结束) 的位置</td>
</tr>
<tr>
<td align="left"><code>re.search(r&#39;&#39;,&#39;&#39;)</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>re.split(r&#39;\s+&#39;, &#39;a b   c&#39;)</code></td>
<td align="left">切分字符串</td>
</tr>
<tr>
<td align="left"><code>re.compile(r&#39;&#39;)</code></td>
<td align="left">预编译正则表达式</td>
</tr>
<tr>
<td align="left"><code>re.findall(r&#39;&#39;,&#39;&#39;)</code></td>
<td align="left">将所有匹配的结果作为元组组成列表</td>
</tr>
<tr>
<td align="left"><code>re.finditer(r&#39;&#39;,&#39;&#39;)</code></td>
<td align="left">将所有匹配的结果作为迭代器返回</td>
</tr>
<tr>
<td align="left"><code>re.sub(r&#39;&#39;, A, B, n))</code></td>
<td align="left">把B字符串中的匹配项替换成A字符串，匹配n次，默认为0即全部替换</td>
</tr>
</tbody></table>
<h2 id="编译标志"><a href="#编译标志" class="headerlink" title="编译标志"></a>编译标志</h2><table>
<thead>
<tr>
<th align="left">编译标志</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>re.S</code> / [DOTALL]</td>
<td align="left">使 . 匹配包括换行在内的所有字符</td>
</tr>
<tr>
<td align="left"><code>re.I</code> / [IGNORECASE]</td>
<td align="left">使匹配对大小写不敏感</td>
</tr>
<tr>
<td align="left"><code>re.M</code> / [MULTILINE]</td>
<td align="left">多行匹配，影响 <code>^</code> 和 <code>$</code></td>
</tr>
<tr>
<td align="left"><code>re.L</code> / [LOCALE]</td>
<td align="left">做本地化识别（locale-aware）匹配</td>
</tr>
<tr>
<td align="left"><code>re.X</code> / [VERBOSE]</td>
<td align="left">更清晰地组织和缩进 RE，允许将注释<code>&quot;#&quot;</code>写入 RE，该符号不能在字符串或反斜杠之后</td>
</tr>
</tbody></table>
<h2 id="高级用法–？的使用"><a href="#高级用法–？的使用" class="headerlink" title="高级用法–？的使用"></a>高级用法–？的使用</h2><table>
<thead>
<tr>
<th align="left">(?…)</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>(?aiLmsux)</code></td>
<td align="left">正则表达式内的编译标志，<br>例子： <code>re.match(r&#39;(?i)(ab)c&#39;,&#39;aBc&#39;).group(1)</code></td>
</tr>
<tr>
<td align="left"><code>(?:...)</code></td>
<td align="left">正则括号的非捕获版本，可理解为忽略该分组，<br>例子： <code>re.match(r&#39;(?i:aB)&#39;,&#39;aB00&#39;).groups()</code></td>
</tr>
<tr>
<td align="left"><code>(?P&lt;name&gt;...)</code></td>
<td align="left">命名组合，引用组合的方式<br>1.正则式 <code>(?P=name)</code> 《==》<code>\1</code> 。比如 <code>(?P&lt;name&gt;[&#39;&quot;]).*?(?P=name)</code> <br>2.处理匹配对象m， <code>m.group(&#39;name&#39;)</code> 等<br>3.传递到 <code>re.sub()</code> 里的 <code>repl</code> 参数中， <code>\g&lt;quote&gt;</code> 《==》 <code>\g&lt;1&gt;</code> 《==》 <code>\1</code></td>
</tr>
<tr>
<td align="left"><code>(?P=name)</code></td>
<td align="left">反向引用一个命名组合；<br>它匹配前面那个叫 name 的命名组中匹配到的串同样的字串。</td>
</tr>
<tr>
<td align="left"><code>(?#...)</code></td>
<td align="left">注释；里面的内容会被忽略。</td>
</tr>
<tr>
<td align="left"><code>(?=...)</code></td>
<td align="left">前瞻性断言，匹配时的判断条件，<br>比如 <code>hello (?=world)</code> 只有在后面是 <code>&#39;world&#39;</code> 的时候匹配 <code>&#39;hello &#39;</code></td>
</tr>
<tr>
<td align="left"><code>(?!...)</code></td>
<td align="left">否定超前断言，前视取反，<br>比如 <code>hello (?!world)</code> 只有在后面不是 <code>&#39;world&#39;</code> 的时候匹配 <code>&#39;hello &#39;</code></td>
</tr>
<tr>
<td align="left"><code>(?&lt;=...)</code></td>
<td align="left">肯定断言，正向后视断定</td>
</tr>
<tr>
<td align="left"><code>(?&lt;!...)</code></td>
<td align="left">否定后视断言，后视断定取非，</td>
</tr>
<tr>
<td align="left"><code>(?(id/name)yes-pattern|no-pattern)</code></td>
<td align="left">判断 <code>id</code> 或 <code>name</code> 存在。<br>比如， <code>(&lt;)?(\w+@\w+(?:\.\w+)+)(?(1)&gt;|$)</code> 是一个email样式匹配</td>
</tr>
</tbody></table>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><blockquote>
<p>来源：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664#%E5%B0%8F%E7%BB%93" target="_blank" rel="noopener">廖雪峰的python教程</a></p>
</blockquote>
<h3 id="验证Email地址的正则表达式，"><a href="#验证Email地址的正则表达式，" class="headerlink" title="验证Email地址的正则表达式，"></a>验证Email地址的正则表达式，</h3><ul>
<li><code>someone@gmail.com</code></li>
<li><code>bill.gates@microsoft.com</code></li>
</ul>
<figure class="highlight python"><figcaption><span>代码参考</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># re 模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_email</span><span class="params">(addr)</span>:</span></span><br><span class="line">    m = re.match(<span class="string">r'^[\w\.]+@[a-zA-Z]+\.com$'</span>,addr)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> m <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_email2</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">	匹配'&lt;user@host.com&gt;' 或 'user@host.com'</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    m = re.match(<span class="string">r'(&lt;)?(\w+@\w+(?:\.\w+)+)(?(1)&gt;|$)'</span>,addr)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> m <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">'someone@gmail.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">'bill.gates@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">'bob#example.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">'mr-bob@example.com'</span>)</span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="可以提取出带名字的Email地址："><a href="#可以提取出带名字的Email地址：" class="headerlink" title="可以提取出带名字的Email地址："></a>可以提取出带名字的Email地址：</h3><ul>
<li><code>&lt;Tom Paris&gt; tom@voyager.org</code> =&gt; <code>Tom Paris</code></li>
<li><code>bob@example.com</code> =&gt; <code>bob</code></li>
</ul>
<figure class="highlight python"><figcaption><span>代码参考</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># re 模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_of_email</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.match(<span class="string">r'\&lt;?([\w\s]+)\&gt;?\s?(\w*)\@'</span>,addr).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_of_email2</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.match(<span class="string">r'(&lt;)?([\w\s]+)(?(1)(?:&gt; \w+))@'</span>,addr).group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'&lt;Tom Paris&gt; tom@voyager.org'</span>) == <span class="string">'Tom Paris'</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'tom@voyager.org'</span>) == <span class="string">'tom'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>python日期时间</title>
    <url>/20200721/python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>python 内置的几个关于时间的模块，<code>time</code> <code>timeit</code> <code>datetime</code> <code>calendar</code></p>
<a id="more"></a>
<hr>
<h2 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h2><figure class="highlight python"><figcaption><span>time 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># time 模块</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. time.time() </span></span><br><span class="line">print(time.time()) <span class="comment"># time.time() 返回当前时间戳</span></span><br><span class="line"><span class="comment"># &gt;: 1624126357</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. time.localtime() </span></span><br><span class="line">print(time.localtime()) <span class="comment"># time.localtime() 返回当前时间结构元组</span></span><br><span class="line"><span class="comment"># &gt;: time.struct_time(tm_year=2021, tm_mon=6, tm_mday=20, tm_hour=2, tm_min=12, tm_sec=37, tm_wday=6, tm_yday=171, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. time.ctime()  时间戳-&gt;日期</span></span><br><span class="line">print(time.ctime()) <span class="comment"># time.ctime() 返回当前日期</span></span><br><span class="line"><span class="comment"># &gt;: Sun Jun 20 02:12:37 2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. time.asctime() 结构元组-&gt;日期</span></span><br><span class="line">print(time.asctime((<span class="number">2021</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">37</span>, <span class="number">6</span>, <span class="number">171</span>, <span class="number">0</span>))) <span class="comment"># time.asctime() 返回一个可读的形式</span></span><br><span class="line"><span class="comment"># &gt;: Sun Jun 20 02:12:37 2021</span></span><br><span class="line"></span><br><span class="line">print(time.ctime(<span class="number">1624126357</span>)) <span class="comment"># 返回该时间戳的日期</span></span><br><span class="line"><span class="comment"># &gt;: Sun Jun 20 02:12:37 2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. tiem.gmtime() 时间戳-&gt;结构元组</span></span><br><span class="line">print(tiem.gmtime(<span class="number">1624126357.0</span>)) <span class="comment"># </span></span><br><span class="line"><span class="comment"># &gt;: time.struct_time(tm_year=2021, tm_mon=6, tm_mday=20, tm_hour=2, tm_min=12, tm_sec=37, tm_wday=6, tm_yday=171, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. time.mktime() 结构元组-&gt;时间戳</span></span><br><span class="line">print(time.mktime( (<span class="number">2021</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">37</span>, <span class="number">6</span>, <span class="number">171</span>, <span class="number">0</span>) )) <span class="comment"># time.mktime() 返回时间结构元组的时间戳</span></span><br><span class="line"><span class="comment"># &gt;: 1624126357.0</span></span><br><span class="line"></span><br><span class="line">print(time.localtime(<span class="number">1624126357</span>)) <span class="comment"># 返回传入的时间戳的时间结构元组</span></span><br><span class="line"><span class="comment"># &gt;: time.struct_time(tm_year=2021, tm_mon=6, tm_mday=20, tm_hour=2, tm_min=12, tm_sec=37, tm_wday=6, tm_yday=171, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. time.strftime() 时间元组-&gt;指定的格式</span></span><br><span class="line">print(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,)) <span class="comment"># time.strftime() 格式化输出当前时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. time.strptime() 指定的格式-&gt;时间元组</span></span><br><span class="line">print(time.strptime(<span class="string">"30 Nov 00"</span>, <span class="string">"%d %b %y"</span>))</span><br><span class="line"><span class="comment"># &gt;: time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1) </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间日期格式化符号：https://www.runoob.com/python/att-time-strptime.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. time.sleep(:int)</span></span><br><span class="line">time.sleep(<span class="number">2</span>) <span class="comment"># time.sleep(2) selenium中常用的休眠，休眠2秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10. time.perf_counter()</span></span><br><span class="line">T1 = time.perf_counter()</span><br><span class="line"><span class="comment">#______假设下面是程序部分______</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>*<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">T2 =time.perf_counter()</span><br><span class="line">print(<span class="string">'程序运行时间:%s毫秒'</span> % ((T2 - T1)*<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11. time.process_time()</span></span><br><span class="line">T1 = time.process_time() <span class="comment"># time.process_time() 不包括sleep()休眠时间；需要调用两次，做差值</span></span><br><span class="line"><span class="comment">#______假设下面是程序部分______</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>*<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">T2 =time.process_time()</span><br><span class="line">print(<span class="string">'程序在CPU运行时间:%s毫秒'</span> % ((T2 - T1)*<span class="number">1000</span>))</span><br></pre></td></tr></table></figure>

<h2 id="timeit-模块"><a href="#timeit-模块" class="headerlink" title="timeit 模块"></a>timeit 模块</h2><figure class="highlight python"><figcaption><span>timeit 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># timeit 模块 性能分析</span></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="comment"># 待测试的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(range(<span class="number">111</span>))</span><br><span class="line"><span class="comment"># stmt 需要测试的函数或语句，字符串形式</span></span><br><span class="line"><span class="comment"># setup 运行的环境，本例子中表示 if __name__ == '__main__':</span></span><br><span class="line"><span class="comment"># number 被测试的函数或语句，执行的次数，本例表示执行100000次add()。省缺则默认是10000次</span></span><br><span class="line"><span class="comment"># repeat 测试做100次</span></span><br><span class="line"><span class="comment"># 综上：此函数表示 测试 在if __name__ == '__main__'的条件下，执行100000次add()消耗的时间，并把这个测试做100次,并求出平均值</span></span><br><span class="line">t = timeit.timeit(stmt=<span class="string">"add()"</span>, setup=<span class="string">"from __main__ import add"</span>, number=<span class="number">100000</span>)</span><br><span class="line">t = timeit.repeat(stmt=<span class="string">"add()"</span>, setup=<span class="string">"from __main__ import add"</span>, number=<span class="number">100000</span>, repeat=<span class="number">100</span>)</span><br><span class="line">print(t)</span><br><span class="line">print(sum(t) / len(t))</span><br></pre></td></tr></table></figure>

<h2 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h2><figure class="highlight python"><figcaption><span>datetime 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># datetime 模块 性能分析</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. datetime.now()</span></span><br><span class="line">print(datetime.now()) <span class="comment"># datetime.now() 返回当前日期和时间 [datetime 类型]</span></span><br><span class="line"><span class="comment"># &gt;: 2021-06-20 02:12:37</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. datetime()</span></span><br><span class="line">print(datetime(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">37</span>, <span class="number">6</span>)) <span class="comment"># datetime() 返回指定日期和时间 [datetime 类型]</span></span><br><span class="line"><span class="comment"># &gt;: 2021-06-20 02:12:37.000006</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. datetime().timestamp()</span></span><br><span class="line">print(datetime(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">37</span>, <span class="number">6</span>).timestamp())  <span class="comment"># datetime().timestamp() [datetime 类型]转换为本地时区timestamp</span></span><br><span class="line"><span class="comment"># &gt;: 1624126357.000006</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. datetime.fromtimestamp(t)</span></span><br><span class="line">t = datetime(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">37</span>, <span class="number">6</span>).timestamp()</span><br><span class="line">print(datetime.fromtimestamp(t)) <span class="comment"># datetime.fromtimestamp(t) 本地时区timestamp[t]转换为[datetime 类型]</span></span><br><span class="line"><span class="comment"># &gt;: 2021-06-20 02:12:37.000006</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. datetime.utcfromtimestamp(t)</span></span><br><span class="line">t = datetime(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">37</span>, <span class="number">6</span>).timestamp()</span><br><span class="line">print(datetime.utcfromtimestamp(t)) <span class="comment"># datetime.utcfromtimestamp(t) UTC标准时区timestamp[t]转换为[datetime 类型]</span></span><br><span class="line"><span class="comment"># &gt;: 2021-06-19 18:12:37.000006</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. strptime()</span></span><br><span class="line">print(datetime.strptime(<span class="string">'2021-6-20 02:12:37'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)) <span class="comment"># datetime.strptime() 字符串日期和时间转成[datetime 类型].格式说明: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior</span></span><br><span class="line"><span class="comment"># &gt;: 2021-06-20 02:12:37</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. strftime()</span></span><br><span class="line">dt = datetime(<span class="number">2021</span>,<span class="number">6</span>,<span class="number">20</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">37</span>,<span class="number">6</span>)</span><br><span class="line">print(dt.strftime(<span class="string">'''</span></span><br><span class="line"><span class="string">本地时间</span></span><br><span class="line"><span class="string">%c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">星期 , 月 , 日 , 日期 ,时:分:秒</span></span><br><span class="line"><span class="string">%A(%a), %B(%b) %d , %x , %X</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">日期时间24小时制</span></span><br><span class="line"><span class="string">%d/%m/%y %H:%M:%S %z</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">日期时间12小时制</span></span><br><span class="line"><span class="string">%Y-%m-%d %p. %I:%M:%S</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第 %j 天</span></span><br><span class="line"><span class="string">第 %U 个星期, 星期 %w [日始0-6]</span></span><br><span class="line"><span class="string">第 %W 个星期, 星期 %u [一始1-7]</span></span><br><span class="line"><span class="string">'''</span>)) <span class="comment"># datetime.strftime() [datetime 类型]转成字符串日期和时间.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. timedelta</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line">dt = datetime(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">37</span>, <span class="number">6</span>)</span><br><span class="line">dt + timedelta(hours=<span class="number">10</span>) <span class="comment"># 对日期和时间进行加减,可以直接用+和-运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. timezone</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line">tz_utc_8 = timezone(timedelta(hours=<span class="number">8</span>)) <span class="comment"># 创建时区UTC+8:00</span></span><br><span class="line">now = datetime.now()</span><br><span class="line">dt = now.replace(tzinfo=tz_utc_8) <span class="comment"># 强制设置为UTC+8:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. astimezone</span></span><br><span class="line">utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc) <span class="comment"># 获取UTC时间，并强制设置时区为UTC+0:00:</span></span><br><span class="line">bj_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>))) <span class="comment"># astimezone()将转换时区为北京时间:</span></span><br><span class="line">tokyo_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">9</span>))) <span class="comment"># 将转换时区为东京时间</span></span><br><span class="line">tokyo_dt2 = bj_dt.astimezone(timezone(timedelta(hours=<span class="number">9</span>))) <span class="comment"># 将bj_dt转换时区为东京时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ** 假设你获取了用户输入的日期和时间如2015-1-21 9:01:30，以及一个时区信息如UTC+5:00，均是str，请编写一个函数将其转换为timestamp：</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone, timedelta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_timestamp</span><span class="params">(dt_str, tz_str)</span>:</span></span><br><span class="line">    i_utc = int(re.match( <span class="string">r'UTC(.*):00'</span>, tz_str).group(<span class="number">1</span>))</span><br><span class="line">    tz_utc = timezone(timedelta(hours=i_utc))</span><br><span class="line">    dt= datetime.strptime(dt_str, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    dt = dt.replace(tzinfo=tz_utc) <span class="comment"># 强制设置为UTC+X:00</span></span><br><span class="line">    <span class="keyword">return</span> dt.timestamp()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">t1 = to_timestamp(<span class="string">'2015-6-1 08:10:30'</span>, <span class="string">'UTC+7:00'</span>)</span><br><span class="line"><span class="keyword">assert</span> t1 == <span class="number">1433121030.0</span>, t1</span><br><span class="line"></span><br><span class="line">t2 = to_timestamp(<span class="string">'2015-5-31 16:10:30'</span>, <span class="string">'UTC-09:00'</span>)</span><br><span class="line"><span class="keyword">assert</span> t2 == <span class="number">1433121030.0</span>, t2</span><br><span class="line"></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="calendar-模块"><a href="#calendar-模块" class="headerlink" title="calendar 模块"></a>calendar 模块</h2><figure class="highlight python"><figcaption><span>calendar 模块</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># calendar 模块 处理年历和月历</span></span><br><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. calendar.calendar(year,w=2,l=1,c=6) </span></span><br><span class="line">print(calendar.calendar(<span class="number">2021</span>,w=<span class="number">2</span>,l=<span class="number">1</span>,c=<span class="number">7</span>)) <span class="comment"># 3个月一行，间隔距离为c，每日宽度间隔为w字符，l是每星期行数。每行长度为21* W+18+2* C</span></span><br><span class="line"><span class="comment"># 相当于 calendar.prcal(year,w=2,l=1,c=6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. calendar.month(year,month,w=2,l=1)</span></span><br><span class="line">print(calendar.month(<span class="number">2021</span>,<span class="number">6</span>,w=<span class="number">2</span>,l=<span class="number">1</span>)) <span class="comment"># 一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。</span></span><br><span class="line"><span class="comment"># 相当于 calendar.prmonth(year,month,w=2,l=1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. calendar.weekday(year,month,day)</span></span><br><span class="line">print(calendar.weekday(<span class="number">2021</span>,<span class="number">6</span>,<span class="number">20</span>)) <span class="comment"># calendar.weekday() 0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。</span></span><br><span class="line"><span class="comment"># &gt;: 6 # 解释：星期日</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. calendar.firstweekday()</span></span><br><span class="line">print(calendar.firstweekday()) <span class="comment"># calendar.firstweekday() 返回当前每周起始日期的设置,默认返回0，即星期一</span></span><br><span class="line"><span class="comment"># &gt;: 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. calendar.isleap(year)</span></span><br><span class="line">print(calendar.isleap(<span class="number">2020</span>)) <span class="comment"># calendar.isleap(year) 闰年返回 True，否则为 false。</span></span><br><span class="line"><span class="comment"># &gt;: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. calendar.leapdays(y1,y2)</span></span><br><span class="line">calendar.leapdays(<span class="number">1900</span>,<span class="number">2020</span>) <span class="comment"># 返回在[Y1，Y2)两年之间的闰年总数</span></span><br><span class="line"><span class="comment"># &gt;: 29</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. calendar.monthrange(year,month)</span></span><br><span class="line">print(calendar.monthrange(<span class="number">2021</span>,<span class="number">6</span>))</span><br><span class="line"><span class="comment"># &gt;: (1,30) # 解释：1 表示 2021 年 6 月份的第一天是周一，30 表示 2021 年 6 月份总共有 30 天。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8. calendar.setfirstweekday(weekday)</span></span><br><span class="line">calendar.setfirstweekday(<span class="number">1</span>) <span class="comment"># 设置每周的起始日期码。0（星期一）到6（星期日）。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django的CMS框架</title>
    <url>/20200604/django%E7%9A%84cms%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>Mezzanine 是一个功能强大，一致且灵活的内容管理平台。Mezzanine 使用Django框架构建，提供了一个简单但高度可扩展的体系结构。</p>
</blockquote>
<ul>
<li><a href="https://github.com/stephenmcd/mezzanine/" target="_blank" rel="noopener">On GitHub</a></li>
<li><a href="http://mezzanine.jupo.org/" target="_blank" rel="noopener">官方网站</a></li>
<li><a href="http://mezzanine.jupo.org/docs/overview.html" target="_blank" rel="noopener">开发文档</a></li>
</ul>
<a id="more"></a>

<ul>
<li><a href="https://github.com/nsleep/mblog" target="_blank" rel="noopener">我的项目地址</a></li>
<li><a href="https://simon-mblog.herokuapp.com/" target="_blank" rel="noopener">我的演示</a></li>
</ul>
<h1 id="一、-开始"><a href="#一、-开始" class="headerlink" title="一、 开始"></a>一、 开始</h1><p>环境：<code>python3</code></p>
<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install mezzanine</span><br></pre></td></tr></table></figure>

<h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mezzanine-project project_name</span><br><span class="line"><span class="built_in">cd</span> project_name</span><br><span class="line">python manage.py createdb --noinput</span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>该<code>createdb</code>命令是使用Django命令的快捷方式 <code>migrate</code>，该命令还将安装一些演示内容，例如联系表格，图片库等。如果您想省略此步骤，请将该<code>--nodata</code>选项与<code>createdb</code>一起使用。</p>
          </div>

<h2 id="3-静态文件"><a href="#3-静态文件" class="headerlink" title="3. 静态文件"></a>3. 静态文件</h2><p>对于静态文件（包括JavaScript和CSS文件等），官方是这样解释的</p>
<blockquote>
<p>Django在生产环境中部署时不提供静态内容，而将其留给面向公众的Web服务器，这绝对是完成此工作的最佳工具。</p>
</blockquote>
<p>这时静态文件在（虚拟）环境下<code>\Lib\site-packages\mezzanine\core\static</code>，执行下列命令可以将文件直接存储在项目中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br><span class="line">python manage.py collecttemplates</span><br></pre></td></tr></table></figure>



<h2 id="4-主题"><a href="#4-主题" class="headerlink" title="4. 主题"></a>4. 主题</h2><p><a href="http://mezzanine.jupo.org/docs/overview.html#themes" target="_blank" rel="noopener">主题</a></p>
<h2 id="5-第三方插件"><a href="#5-第三方插件" class="headerlink" title="5. 第三方插件"></a>5. 第三方插件</h2><p><a href="http://mezzanine.jupo.org/docs/overview.html#third-party-plug-ins" target="_blank" rel="noopener">第三方插件</a></p>
<h2 id="6-示例站点"><a href="#6-示例站点" class="headerlink" title="6. 示例站点"></a>6. 示例站点</h2><p><a href="http://mezzanine.jupo.org/docs/overview.html#sites-using-mezzanine" target="_blank" rel="noopener">示例站点</a></p>
<h2 id="7-常见问题"><a href="#7-常见问题" class="headerlink" title="7. 常见问题"></a>7. 常见问题</h2><p><a href="http://mezzanine.jupo.org/docs/frequently-asked-questions.html#templates" target="_blank" rel="noopener">常见问题</a></p>
]]></content>
      <tags>
        <tag>Django</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用heroku遇到的问题</title>
    <url>/20200604/%E4%BD%BF%E7%94%A8heroku%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>使用<code>Mezzanine</code>做了一个<a href="../Django的CMS框架">博客</a>，部署到<code>heroku</code>时遇到了一些问题，此篇以作记录。</p>
<a id="more"></a>



<h2 id="1-无法完成github项目的部署-H12错误"><a href="#1-无法完成github项目的部署-H12错误" class="headerlink" title="1. 无法完成github项目的部署-H12错误"></a>1. 无法完成github项目的部署-H12错误</h2><blockquote>
<p>项目根目录必须包含<code>app.json</code>、<code>requirements.txt</code>和<code>Procfile</code>，可选<code>Procfile.windows</code>和<code>runtime.txt</code>。</p>
</blockquote>
<figure class="highlight json"><figcaption><span>app.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"name"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"description"</span>,</span><br><span class="line">  <span class="attr">"image"</span>: <span class="string">"heroku/python"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"https://github.com/YOURNAME/repository"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"python"</span>, <span class="string">"django"</span>, <span class="string">"Mezzanine"</span> ],</span><br><span class="line">  <span class="attr">"addons"</span>: [ <span class="string">"heroku-postgresql"</span> ],</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"SECRET_KEY"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"The secret key for the Django application."</span>,</span><br><span class="line">      <span class="attr">"generator"</span>: <span class="string">"secret"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"environments"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: &#123;</span><br><span class="line">      <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"test-setup"</span>: <span class="string">"python manage.py collectstatic --noinput"</span>,</span><br><span class="line">        <span class="attr">"test"</span>: <span class="string">"python manage.py test"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">Mezzanine&#x3D;&#x3D;4.3.1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><figcaption><span>Procfile</span></figcaption><table><tr><td class="code"><pre><span class="line">web: python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><figcaption><span>Procfile.windows</span></figcaption><table><tr><td class="code"><pre><span class="line">web: python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">python-3.7.5</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-Application-error"><a href="#2-Application-error" class="headerlink" title="2. Application error"></a>2. Application error</h2><blockquote>
<p>Error R10 (Boot timeout) -&gt; Web process failed to bind to $PORT within 60 seconds of launch</p>
</blockquote>
<p>也许是数据库的问题？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku create [APP_NAME] <span class="comment"># 创建APP</span></span><br><span class="line"></span><br><span class="line">git push heroku master <span class="comment"># 创建分支</span></span><br><span class="line"></span><br><span class="line">heroku run python manage.py migrate <span class="comment"># 远端生成数据库</span></span><br><span class="line">heroku ps:scale web=1</span><br><span class="line">heroku open</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>在<code>requirement.txt</code>文件中加入<code>gunicorn</code>，使用这个库开启Web服务，修改项目目录下的<code>Procfile</code>文件（mblog是我的项目里应用的名称，在该应用下应该存在<code>wsgi.py</code>文件）</p><figure class="highlight bash"><figcaption><span>Procfile</span></figcaption><table><tr><td class="code"><pre><span class="line">web: gunicorn mblog.wsgi --<span class="built_in">log</span>-file -</span><br></pre></td></tr></table></figure>
          </div>


<h2 id="3-no-such-table-django-site"><a href="#3-no-such-table-django-site" class="headerlink" title="3. no such table: django_site"></a>3. no such table: django_site</h2><p>尝试生成远端数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku run python manage.py migrate</span><br><span class="line">heroku run python manage.py makemigrations</span><br><span class="line">heroku run python manage.py createdb --noinput</span><br><span class="line">heroku run python manage.py syncdb <span class="comment">#（在Django 1.9中已删除）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>setting.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># heroku 只支持postgrespool数据库 来自：https://www.jianshu.com/p/610c670eabed</span></span><br><span class="line"><span class="keyword">import</span> dj_database_url</span><br><span class="line">DATABASES[<span class="string">'default'</span>] = dj_database_url.config()</span><br><span class="line">···</span><br><span class="line"><span class="keyword">import</span> django_heroku</span><br><span class="line">django_heroku.settings(locals())</span><br></pre></td></tr></table></figure>


<h2 id="4-如果看到发现变量不对可以使用如下命令打印变量"><a href="#4-如果看到发现变量不对可以使用如下命令打印变量" class="headerlink" title="4. 如果看到发现变量不对可以使用如下命令打印变量"></a>4. 如果看到发现变量不对可以使用如下命令打印变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku run <span class="built_in">echo</span> \<span class="variable">$JDBC_DATABASE_URL</span></span><br></pre></td></tr></table></figure>

<h2 id="5-删除默认数据库，添加MySQL数据库"><a href="#5-删除默认数据库，添加MySQL数据库" class="headerlink" title="5. 删除默认数据库，添加MySQL数据库"></a>5. 删除默认数据库，添加MySQL数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">heroku addons:destroy heroku-postgresql</span><br><span class="line">heroku addons:create cleardb:ignite</span><br><span class="line">heroku config <span class="comment"># 过程中可以使用 config 命令查看数据库 URL 是否修改成功</span></span><br></pre></td></tr></table></figure>

<h2 id="6-postgresql-无法连接"><a href="#6-postgresql-无法连接" class="headerlink" title="6. postgresql 无法连接"></a>6. postgresql 无法连接</h2><p>错误类似于</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">could not connect to postgres error: no pg_hba.conf entry <span class="keyword">for</span> host <span class="string">"1.198.47.212"</span>, user <span class="string">"ijhjecdqztyvfo"</span>, database <span class="string">"d66rrjcr414em1"</span>, SSL off</span><br></pre></td></tr></table></figure>

<p>解决方法取自于<a href="https://devcenter.heroku.com/articles/heroku-postgresql#connecting-in-node-js" target="_blank" rel="noopener">Connecting in Node.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Client &#125; = <span class="built_in">require</span>(<span class="string">'pg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> Client(&#123;</span><br><span class="line">  connectionString: process.env.DATABASE_URL,</span><br><span class="line">  ssl: &#123;</span><br><span class="line">    rejectUnauthorized: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.connect();</span><br><span class="line"></span><br><span class="line">client.query(<span class="string">'SELECT table_schema,table_name FROM information_schema.tables;'</span>, (err, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row <span class="keyword">of</span> res.rows) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(row));</span><br><span class="line">  &#125;</span><br><span class="line">  client.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>如果指定<code>PGSSLMODE</code>配置变量，则可以省略<code>ssl</code> 配置对象: <code>heroku config:set PGSSLMODE=no-verify</code></p>
          </div>
<h2 id="X-可能会用到的命令"><a href="#X-可能会用到的命令" class="headerlink" title="X. 可能会用到的命令"></a>X. 可能会用到的命令</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser <span class="comment"># 创建超级管理员，帐号登录 admin 后台</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地分支 master 提交到 heroku </span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> -u</span></span><br><span class="line">git commit -m  <span class="string">"commit"</span></span><br><span class="line">git push heroku master</span><br><span class="line"></span><br><span class="line">heroku <span class="keyword">run</span><span class="bash"> python manage.py collectstatic --noinput</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>收藏</title>
    <url>/20190609/%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<a id="more"></a>

<ul>
<li><input disabled="" type="checkbox"> <p><a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫-在线制作ico图标</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo的Next主题详细配置</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://zhuanlan.zhihu.com/p/71164003?from_voters_page=true" target="_blank" rel="noopener">Github+Hexo一站式部署个人博客 (原创)</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://github.com/liaoyajun/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://hfanss.com/2018/腾讯云COS-本地图片上传.html" target="_blank" rel="noopener">腾讯云COS图床制作</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://hfanss.com/2018/hexo%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo博客常用插件及教程</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.mscoder.cn/program/hexo-disable-scrollbar/" target="_blank" rel="noopener">Next主题 禁用代码段.code pre滚动条以及自动换行</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.jianshu.com/p/5017abb0d0a2" target="_blank" rel="noopener">Hexo 美化</a> </p>
<blockquote>
<p>/layout/_partials/header/brand.swig<br>/source/css/_custom/custom.styl<br>/source/js/custom.js<br>/layout/_script/commons.swig</p>
</blockquote>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://blog.csdn.net/qq_36759224/article/details/86936453" target="_blank" rel="noopener">免费CDN：jsDelivr+Github 使用方法</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://theme-next.org/docs/tag-plugins/#Centered-Quote" target="_blank" rel="noopener">Tag Plugins</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.jianshu.com/p/b8255a630d46" target="_blank" rel="noopener">为hexo博客添加基于gitment评论功能</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.npmjs.com/package/hexo-related-popular-posts" target="_blank" rel="noopener">npm.hexo-related-popular-posts.</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.npmjs.com/package/hexo-generator-feed" target="_blank" rel="noopener">npm.hexo-generator-feed</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">npm.hexo-generator-search</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://www.npmjs.com/package/hexo-symbols-count-time" target="_blank" rel="noopener">npm.hexo-symbols-count-time</a></p>
</li>
<li><input checked="" disabled="" type="checkbox"> <p><del><a href="https://blog.csdn.net/weixin_34416754/article/details/88678485" target="_blank" rel="noopener">一篇文章玩转世界最强音乐Spotify API操作</a> 或者<a href="https://www.jianshu.com/p/f6c84b9cf37b" target="_blank" rel="noopener">看简书</a> ~</del></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://hexo.zhangaming.com/case/3d" target="_blank" rel="noopener">超炫的HTML5 3D效果</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://hexo.io/docs/tag-plugins" target="_blank" rel="noopener">Hexo-Tag Plugins</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://theme-next.org/docs/tag-plugins/" target="_blank" rel="noopener">NexT-Tag Plugins</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://theme-next.org/docs/tag-plugins/note" target="_blank" rel="noopener">NexT-Note</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></p>
</li>
<li><input disabled="" type="checkbox"> <p><a href="http://musicapi.leanapp.cn/" target="_blank" rel="noopener">网易云音乐 API</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/20190420/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h1><!-- TOC -->

<ul>
<li><a href="#前言">前言</a></li>
<li><a href="#第一部分数据结构">第一部分：数据结构</a><ul>
<li><a href="#一线性表">一、线性表</a></li>
<li><a href="#二栈和队列">二、栈和队列</a></li>
<li><a href="#三树和二叉树">三、树和二叉树</a><ul>
<li><a href="#1-红黑树">1. 红黑树</a></li>
<li><a href="#2-二叉树">2. 二叉树</a><ul>
<li><a href="#二分查找法">二分查找法</a></li>
<li><a href="#二叉树遍历">二叉树遍历</a></li>
</ul>
</li>
<li><a href="#3-二分搜索树">3. 二分搜索树</a><ul>
<li><a href="#深度优先遍历前序中序后序遍历">深度优先遍历（前序、中序、后序遍历）</a></li>
<li><a href="#广度优先遍历层序遍历">广度优先遍历（层序遍历）</a></li>
</ul>
</li>
<li><a href="#4-avl树">4. AVL树</a></li>
<li><a href="#5-b和b">5. B和B+</a></li>
</ul>
</li>
<li><a href="#四字符串和数组">四、字符串和数组</a></li>
</ul>
</li>
<li><a href="#第二部分算法思想">第二部分：算法思想</a><ul>
<li><a href="#一排序">一、排序</a><ul>
<li><a href="#1-选择排序selection-sort">1. 选择排序（Selection Sort）</a></li>
<li><a href="#2-插入排序insertion-sort">2. 插入排序（Insertion Sort）</a></li>
<li><a href="#3-冒泡排序bubble-sort">3. 冒泡排序（Bubble Sort）</a></li>
<li><a href="#4-希尔排序shell-sort">4. 希尔排序（Shell Sort）</a></li>
<li><a href="#5-归并排序merge-sort">5. 归并排序（Merge Sort）</a></li>
<li><a href="#6-快速排序quick-sort">6. 快速排序（Quick Sort）</a><ul>
<li><a href="#1-普通快速排序">1. 普通快速排序</a></li>
<li><a href="#2-双路快速排序">2. 双路快速排序</a></li>
<li><a href="#3-三路快速排序">3. 三路快速排序</a></li>
</ul>
</li>
<li><a href="#7-堆排序heap-sort">7. 堆排序（Heap Sort）</a><ul>
<li><a href="#1-堆">1. 堆</a></li>
<li><a href="#2-上浮和下沉">2. 上浮和下沉</a></li>
<li><a href="#3插入元素">3.插入元素</a></li>
<li><a href="#4-删除最大元素">4. 删除最大元素</a></li>
<li><a href="#5-堆排序">5. 堆排序</a></li>
<li><a href="#6-堆排序的应用top-k问题">6. 堆排序的应用——Top K问题</a></li>
</ul>
</li>
<li><a href="#8-计数排序和流排序">8. 计数排序和流排序</a></li>
<li><a href="#9-排序算法总结">9. 排序算法总结</a></li>
</ul>
</li>
<li><a href="#二递归和回溯法">二、递归和回溯法</a><ul>
<li><a href="#1-例题">1. 例题</a></li>
<li><a href="#2-排列问题">2. 排列问题</a></li>
<li><a href="#3-组合问题">3. 组合问题</a></li>
<li><a href="#4-回溯法的剪枝">4. 回溯法的剪枝</a></li>
<li><a href="#5-二维平面回溯法">5. 二维平面回溯法</a></li>
<li><a href="#6-floodfill算法">6. floodfill算法</a></li>
</ul>
</li>
<li><a href="#三动态规划">三、动态规划</a><ul>
<li><a href="#1-斐波那契数列">1. 斐波那契数列</a><ul>
<li><a href="#11-递归方式自顶向下">1.1 递归方式（自顶向下）</a></li>
<li><a href="#12-记忆化搜索自底向上">1.2 记忆化搜索（自底向上）</a></li>
<li><a href="#13-动态规划">1.3 动态规划</a></li>
</ul>
</li>
<li><a href="#2-背包问题">2. 背包问题</a><ul>
<li><a href="#1记忆化搜索">（1）记忆化搜索</a></li>
<li><a href="#2动态规划">（2）动态规划</a></li>
<li><a href="#3动态规划优化思路1">（3）动态规划优化思路1</a></li>
<li><a href="#4动态规划优化思路2">（4）动态规划优化思路2</a></li>
<li><a href="#5背包问题更多变种">（5）背包问题更多变种</a></li>
</ul>
</li>
<li><a href="#3-最长上升子序列">3. 最长上升子序列</a></li>
<li><a href="#4-最长公共子序列">4. 最长公共子序列</a></li>
</ul>
</li>
<li><a href="#四贪心算法">四、贪心算法</a><ul>
<li><a href="#1-assign-cookies">1. assign-cookies</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#第三部分面试指南">第三部分：面试指南</a><ul>
<li><a href="#1-判单链表是否对称">1. 判单链表是否对称</a></li>
<li><a href="#2-合并两个有序数组成一个有序数组">2. 合并两个有序数组成一个有序数组</a></li>
<li><a href="#3-求二叉树中值为x的结点的层号">3. 求二叉树中值为x的结点的层号</a></li>
<li><a href="#阿里面经onenote">阿里面经OneNote</a></li>
</ul>
</li>
<li><a href="#第四部分参考资料">第四部分：参考资料</a></li>
</ul>
<!-- /TOC -->
<p>[TOC]</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文将系统总结算法面试和经典数据结构相关知识点，在这里分成 【数据结构】 和 【算法】 两部分展开。这里将展示主要的核心知识点，关于代码面试的Leetcode习题请转向代码仓库：<a href="https://github.com/frank-lam/interview_code" target="_blank" rel="noopener">Interview-code</a></p>
<ul>
<li><p>阅读书籍</p>
<ul>
<li>《算法4》</li>
<li>《程序员代码面试指南》</li>
<li>《剑指Offer》</li>
</ul>
</li>
<li><p>学习课程</p>
<ul>
<li>刘宇波：玩转数据结构，从入门到进阶</li>
<li>刘宇波：程序员的内功修炼，学好算法与数据结构</li>
<li>刘宇波：玩转算法面试 leetcode题库分门别类详细解析</li>
</ul>
</li>
<li><p>在线OJ</p>
<ul>
<li><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">Leetcode中国版</a></li>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a></li>
</ul>
</li>
</ul>
<h1 id="第一部分：数据结构"><a href="#第一部分：数据结构" class="headerlink" title="第一部分：数据结构"></a>第一部分：数据结构</h1><h2 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a>一、线性表</h2><ul>
<li>数组</li>
<li>链表</li>
</ul>
<h2 id="二、栈和队列"><a href="#二、栈和队列" class="headerlink" title="二、栈和队列"></a>二、栈和队列</h2><h2 id="三、树和二叉树"><a href="#三、树和二叉树" class="headerlink" title="三、树和二叉树"></a>三、树和二叉树</h2><h3 id="1-2-3树"><a href="#1-2-3树" class="headerlink" title="1. 2-3树"></a>1. 2-3树</h3><h3 id="2-红黑树"><a href="#2-红黑树" class="headerlink" title="2. 红黑树"></a>2. 红黑树</h3><p>红黑树的特性: </p>
<p>（1）每个节点或者是黑色的，或者是红色的</p>
<p>（2）根节点是黑色的</p>
<p>（3）每个叶子节点（NIL，最后的空结点）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！] </p>
<p>（4）如果一个节点是红色的，那么他的孩子结点都是黑色的</p>
<p>（5）从任意一个节点到叶子节点，经过的黑色节点是一样的。[这里也就可以得到插入的节点必然为红色]</p>
<p>红黑树(一)之 原理和算法详细介绍 - 如果天空不死 - 博客园<br><a href="http://www.cnblogs.com/skywang12345/p/3245399.html" target="_blank" rel="noopener">http://www.cnblogs.com/skywang12345/p/3245399.html</a></p>
<p>JCFInternals/5-TreeSet and TreeMap.md at 049c84bb65a3114ba4b8355d83c490fb9b26c6af · CarpenterLee/JCFInternals<br><a href="https://github.com/CarpenterLee/JCFInternals/blob/049c84bb65a3114ba4b8355d83c490fb9b26c6af/markdown/5-TreeSet%20and%20TreeMap.md" target="_blank" rel="noopener">https://github.com/CarpenterLee/JCFInternals/blob/049c84bb65a3114ba4b8355d83c490fb9b26c6af/markdown/5-TreeSet%20and%20TreeMap.md</a></p>
<h3 id="3-二叉树"><a href="#3-二叉树" class="headerlink" title="3. 二叉树"></a>3. 二叉树</h3><h4 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h4><h4 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h4><h3 id="4-二分搜索树"><a href="#4-二分搜索树" class="headerlink" title="4.. 二分搜索树"></a>4.. 二分搜索树</h3><h4 id="深度优先遍历（前序、中序、后序遍历）"><a href="#深度优先遍历（前序、中序、后序遍历）" class="headerlink" title="深度优先遍历（前序、中序、后序遍历）"></a>深度优先遍历（前序、中序、后序遍历）</h4><h4 id="广度优先遍历（层序遍历）"><a href="#广度优先遍历（层序遍历）" class="headerlink" title="广度优先遍历（层序遍历）"></a>广度优先遍历（层序遍历）</h4><h3 id="5-AVL树"><a href="#5-AVL树" class="headerlink" title="5. AVL树"></a>5. AVL树</h3><h3 id="6-B和B"><a href="#6-B和B" class="headerlink" title="6. B和B+"></a>6. B和B+</h3><h2 id="四、字符串和数组"><a href="#四、字符串和数组" class="headerlink" title="四、字符串和数组"></a>四、字符串和数组</h2><h1 id="第二部分：算法思想"><a href="#第二部分：算法思想" class="headerlink" title="第二部分：算法思想"></a>第二部分：算法思想</h1><h2 id="一、排序"><a href="#一、排序" class="headerlink" title="一、排序"></a>一、排序</h2><h3 id="1-选择排序（Selection-Sort）"><a href="#1-选择排序（Selection-Sort）" class="headerlink" title="1. 选择排序（Selection Sort）"></a>1. 选择排序（Selection Sort）</h3><p>选择出数组中的最小元素，将它与数组的第一个元素交换位置。再从剩下的元素中选择出最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。 </p>
<p><img data-src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015224719590-1433219824.gif" alt=""></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 寻找[i, n)区间里的最小值的索引</span></span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[minIndex] &gt; arr[j])&#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap( arr , i , minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>算法分析</strong></p>
<p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>
<h3 id="2-插入排序（Insertion-Sort）"><a href="#2-插入排序（Insertion-Sort）" class="headerlink" title="2. 插入排序（Insertion Sort）"></a>2. 插入排序（Insertion Sort）</h3><p>插入排序从左到右进行，每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左部数组依然有序。</p>
<p>第 j 元素是通过不断向左比较并交换来实现插入过程：当第 j 元素小于第 j - 1 元素，就将它们的位置交换，然后令 j 指针向左移动一个位置，不断进行以上操作。</p>
<p><img data-src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015225645277-1151100000.gif" alt=""></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>])</span><br><span class="line">                swap(arr, j, j - <span class="number">1</span>); <span class="comment">// 大量的交换会消耗时间</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进版插入排序（减少了数组元素的操作次数）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">better_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> e = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e &lt; arr[j - <span class="number">1</span>])</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j] = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>算法分析</strong></p>
<p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h3 id="3-冒泡排序（Bubble-Sort）"><a href="#3-冒泡排序（Bubble-Sort）" class="headerlink" title="3. 冒泡排序（Bubble Sort）"></a>3. 冒泡排序（Bubble Sort）</h3><p>通过从左到右不断交换相邻逆序的相邻元素，在一轮的交换之后，可以让未排序的元素上浮到右侧。</p>
<p>在一轮循环中，如果没有发生交换，就说明数组已经是有序的，此时可以直接退出。</p>
<p><img data-src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif" alt=""></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">// 从最后一位开始确定</span></span><br><span class="line">        <span class="keyword">boolean</span> swapped = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                swapped = <span class="keyword">true</span>;</span><br><span class="line">                swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!swapped)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p>
<p><strong>算法描述</strong></p>
<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<p><img data-src="https://images2018.cnblogs.com/blog/849589/201803/849589-20180331170017421-364506073.gif" alt=""></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> h = n / <span class="number">2</span>; h &gt; <span class="number">0</span>; h = h / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 内部是一个插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i = i + h) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> e = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt; <span class="number">0</span>; j = j - h) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e &lt; arr[j - h])</span><br><span class="line">                    arr[j] = arr[j - h];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 希尔排序2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="comment">// 计算 increment sequence: 1, 4, 13, 40, 121, 364, 1093...</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; n / <span class="number">3</span>) h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// h-sort the array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... 使用插入排序</span></span><br><span class="line">            <span class="keyword">int</span> e = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= h &amp;&amp; e &lt; arr[j - h]; j -= h)</span><br><span class="line">                arr[j] = arr[j - h];</span><br><span class="line">            arr[j] = e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>算法分析</strong></p>
<p>对于大规模的数组，插入排序很慢，因为它只能交换相邻的元素，每次只能将逆序数量减少 1。</p>
<p>希尔排序的出现就是为了改进插入排序的这种局限性，它通过交换不相邻的元素，每次可以将逆序数量减少大于 1。</p>
<p>希尔排序使用插入排序对间隔 h 的序列进行排序。通过不断减小 h，最后令 h=1，就可以使得整个数组是有序的。</p>
<h3 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h3><p>归并排序的思想是将数组分成两部分，分别进行排序，然后归并起来。把长度为n的输入序列分成两个长度为n/2的子序列；对这两个子序列分别采用归并排序；将两个排序好的子序列合并成一个最终的排序序列。</p>
<p><img data-src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230557043-37375010.gif" alt=""></p>
<p><strong>代码实现</strong></p>
<blockquote>
<p>1.归并方法</p>
<p>归并方法将数组中两个已经排序的部分归并成一个。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    __MergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">__MergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    __MergeSort(arr, l, mid);</span><br><span class="line">    __MergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">    merge(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将arr[l...mid]和arr[mid+1...r]两部分进行归并</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] aux = Arrays.copyOfRange(arr, l, r + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span></span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;  <span class="comment">// 如果左半部分元素已经全部处理完毕</span></span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;   <span class="comment">// 如果右半部分元素已经全部处理完毕</span></span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &lt; aux[j - l]) &#123;  <span class="comment">// 左半部分所指元素 &lt; 右半部分所指元素</span></span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 左半部分所指元素 &gt;= 右半部分所指元素</span></span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.自底向上归并排序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = arr.length;</span><br><span class="line">    <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz += sz)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + sz &lt; N; i += sz + sz)</span><br><span class="line">            merge(arr, i, i + sz - <span class="number">1</span>, Math.min(i + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h3><p>快速排序可以说是20世纪最伟大的算法之一了。相信都有所耳闻，它的速度也正如它的名字那样，是一个非常快的算法了。当然它也后期经过了不断的改进和优化，才被公认为是一个值得信任的非常优秀的算法。</p>
<p><img data-src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230936371-1413523412.gif" alt=""></p>
<p><strong>代码实现</strong></p>
<h4 id="1-普通快速排序"><a href="#1-普通快速排序" class="headerlink" title="1. 普通快速排序"></a>1. 普通快速排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归使用快速排序,对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> p = partition(arr,l,r);</span><br><span class="line">    QuickSort(arr,l,p-<span class="number">1</span>);</span><br><span class="line">    QuickSort(arr,p+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组通过p分割成两部分</span></span><br><span class="line"><span class="comment">// 对arr[l...r]部分进行partition操作</span></span><br><span class="line"><span class="comment">// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] &gt; arr[p]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    swap(arr, l, (<span class="keyword">int</span>) (Math.random() % (r - l + <span class="number">1</span>)) + l);  <span class="comment">// 加入这一行变成随机快速排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v = arr[l];</span><br><span class="line">    <span class="keyword">int</span> j = l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = j +<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; v)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            swap(arr,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr,l,j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快速排序是原地排序，不需要辅助数组，但是递归调用需要辅助栈。</p>
<p>快速排序最好的情况下是每次都正好能将数组对半分，这样递归调用次数才是最少的。这种情况下比较次数为 CN=2CN/2+N，复杂度为 O(NlogN)。</p>
<p>最坏的情况下，第一次从最小的元素切分，第二次从第二小的元素切分，如此这般。因此最坏的情况下需要比较 N2/2。为了防止数组最开始就是有序的，在进行快速排序时需要随机打乱数组。</p>
<h4 id="2-双路快速排序"><a href="#2-双路快速排序" class="headerlink" title="2. 双路快速排序"></a>2. 双路快速排序</h4><p>若果数组中含有大量重复的元素，则partition很可能把数组划分成两个及其不平衡的两部分，时间复杂度退化成O(n²)。这时候应该把小于v和大于v放在数组两端。</p>
<p><img data-src="pics/partition2.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双路快速排序的partition</span></span><br><span class="line"><span class="comment">// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] &gt; arr[p]</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span></span><br><span class="line">    <span class="comment">// swap(arr, l, (int) (Math.random() % (r - l + 1)) + l);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v = arr[l];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arr[l+1...i) &lt;= v; arr(j...r] &gt;= v</span></span><br><span class="line">    <span class="keyword">int</span> i = l + <span class="number">1</span>, j = r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意这里的边界, arr[i].compareTo(v) &lt; 0, 不能是arr[i].compareTo(v) &lt;= 0</span></span><br><span class="line">        <span class="comment">// 思考一下为什么?</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= r &amp;&amp; arr[i] &lt; v)</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这里的边界, arr[j].compareTo(v) &gt; 0, 不能是arr[j].compareTo(v) &gt;= 0</span></span><br><span class="line">        <span class="comment">// 思考一下为什么?</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= l + <span class="number">1</span> &amp;&amp; arr[j] &gt; v)</span><br><span class="line">            j--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于上面的两个边界的设定, 有的同学在课程的问答区有很好的回答:)</span></span><br><span class="line">        <span class="comment">// 大家可以参考: http://coding.imooc.com/learn/questiondetail/4920.html</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        swap(arr, i, j);</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归使用快速排序,对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort2Ways</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于小规模数组, 使用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> p = partition(arr, l, r);</span><br><span class="line">    QuickSort2Ways(arr, l, p - <span class="number">1</span>);</span><br><span class="line">    QuickSort2Ways(arr, p + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-三路快速排序"><a href="#3-三路快速排序" class="headerlink" title="3. 三路快速排序"></a>3. 三路快速排序</h4><p>数组分成三个部分，大于v 等于v 小于v</p>
<p>在具有大量重复键值对的情况下使用三路快排</p>
<p><img data-src="pics/partition3.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归使用快速排序,对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort3Ways</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span></span><br><span class="line">    swap( arr, l, (<span class="keyword">int</span>)(Math.random()*(r-l+<span class="number">1</span>)) + l );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v = arr[l];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lt = l;     <span class="comment">// arr[l+1...lt] &lt; v</span></span><br><span class="line">    <span class="keyword">int</span> gt = r + <span class="number">1</span>; <span class="comment">// arr[gt...r] &gt; v</span></span><br><span class="line">    <span class="keyword">int</span> i = l+<span class="number">1</span>;    <span class="comment">// arr[lt+1...i) == v</span></span><br><span class="line">    <span class="keyword">while</span>( i &lt; gt )&#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[i] &lt; v)&#123;</span><br><span class="line">            swap( arr, i, lt+<span class="number">1</span>);</span><br><span class="line">            i ++;</span><br><span class="line">            lt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( arr[i] &gt; v )&#123;</span><br><span class="line">            swap( arr, i, gt-<span class="number">1</span>);</span><br><span class="line">            gt --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// arr[i] == v</span></span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap( arr, l, lt );</span><br><span class="line"></span><br><span class="line">    QuickSort3Ways(arr, l, lt-<span class="number">1</span>);</span><br><span class="line">    QuickSort3Ways(arr, gt, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h3><h4 id="1-堆"><a href="#1-堆" class="headerlink" title="1. 堆"></a>1. 堆</h4><p>堆的某个节点的值总是大于等于子节点的值，并且堆是一颗完全二叉树。</p>
<p>堆可以用数组来表示，因为堆是完全二叉树，而完全二叉树很容易就存储在数组中。位置 k 的节点的父节点位置为 k/2，而它的两个子节点的位置分别为 2k 和 2k+1。这里不使用数组索引为 0 的位置，是为了更清晰地描述节点的位置关系。</p>
<p><img data-src="pics/heap.png" alt=""></p>
<h4 id="2-上浮和下沉"><a href="#2-上浮和下沉" class="headerlink" title="2. 上浮和下沉"></a>2. 上浮和下沉</h4><p>在堆中，当一个节点比父节点大，那么需要交换这个两个节点。交换后还可能比它新的父节点大，因此需要不断地进行比较和交换操作，把这种操作称为<strong>上浮（ShiftUp）</strong>。</p>
<p><img data-src="pics/shiftup_heap.png" alt=""> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( k &gt; <span class="number">1</span> &amp;&amp; data[k/<span class="number">2</span>] &lt; data[k]))&#123;</span><br><span class="line">        swap(k, k/<span class="number">2</span>);</span><br><span class="line">        k /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>类似地，当一个节点比子节点来得小，也需要不断地向下进行比较和交换操作，把这种操作称为<strong>下沉（Shift Down）</strong>。一个节点如果有两个子节点，应当与两个子节点中最大那么节点进行交换。</p>
<p><img data-src="pics/shiftdown_heap.png" alt=""> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( <span class="number">2</span>*k &lt;= count )&#123; <span class="comment">// 当前结点有左孩子</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>*k; <span class="comment">// 在此轮循环中,data[k]和data[j]交换位置</span></span><br><span class="line">        <span class="keyword">if</span>( j+<span class="number">1</span> &lt;= count &amp;&amp; data[j+<span class="number">1</span>] &gt; data[j] )</span><br><span class="line">            j ++;</span><br><span class="line">        <span class="comment">// data[j] 是 data[2*k]和data[2*k+1]中的最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( data[k] &gt;= data[j] ) </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-插入元素"><a href="#3-插入元素" class="headerlink" title="3.插入元素"></a>3.插入元素</h4><p>将新元素放到数组末尾，然后上浮到合适的位置。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向最大堆中插入一个新的元素 item</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count + <span class="number">1</span> &lt;= capacity;</span><br><span class="line">    data[count+<span class="number">1</span>] = item;</span><br><span class="line">    count ++;</span><br><span class="line">    shiftUp(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-删除最大元素"><a href="#4-删除最大元素" class="headerlink" title="4. 删除最大元素"></a>4. 删除最大元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">extractMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    Item ret = data[<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    swap( <span class="number">1</span> , count );</span><br><span class="line">    count --;</span><br><span class="line">    shiftDown(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5. 堆排序"></a>5. 堆排序</h4><p>由于堆可以很容易得到最大的元素并删除它，不断地进行这种操作可以得到一个递减序列。如果把最大元素和当前堆中数组的最后一个元素交换位置，并且不删除它，那么就可以得到一个从尾到头的递减序列，从正向来看就是一个递增序列。因此很容易使用堆来进行排序。并且堆排序是原地排序，不占用额外空间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用一个额外的最大堆, 直接在原数组上进行原地的堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对整个arr数组使用HeapSort1排序</span></span><br><span class="line">    <span class="comment">// HeapSort1, 将所有的元素依次添加到堆中, 在将所有元素从堆中依次取出来, 即完成了排序</span></span><br><span class="line">    <span class="comment">// 无论是创建堆的过程, 还是从堆中依次取出元素的过程, 时间复杂度均为O(nlogn)</span></span><br><span class="line">    <span class="comment">// 整个堆排序的整体时间复杂度为O(nlogn)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort1</span><span class="params">(Comparable[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        MaxHeap&lt;Comparable&gt; maxHeap = <span class="keyword">new</span> MaxHeap&lt;Comparable&gt;(n);</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            maxHeap.insert(arr[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = n-<span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )</span><br><span class="line">            arr[i] = maxHeap.extractMax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只通过shiftDown操作进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(Comparable[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意，此时我们的堆是从0开始索引的</span></span><br><span class="line">        <span class="comment">// 从(最后一个元素的索引-1)/2开始</span></span><br><span class="line">        <span class="comment">// 最后一个元素的索引 = n-1</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = (n-<span class="number">1</span>-<span class="number">1</span>)/<span class="number">2</span> ; i &gt;= <span class="number">0</span> ; i -- )</span><br><span class="line">            shiftDown2(arr, n, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt; <span class="number">0</span> ; i-- )&#123; <span class="comment">// 这个的目的是让序列从小到大排序</span></span><br><span class="line">            swap( arr, <span class="number">0</span>, i);</span><br><span class="line">            shiftDown2(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换堆中索引为i和j的两个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        Object t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始的shiftDown过程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="number">2</span>*k+<span class="number">1</span> &lt; n )&#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>( j+<span class="number">1</span> &lt; n &amp;&amp; arr[j+<span class="number">1</span>].compareTo(arr[j]) &gt; <span class="number">0</span> )</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( arr[k].compareTo(arr[j]) &gt;= <span class="number">0</span> )<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            swap( arr, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化的shiftDown过程, 使用赋值的方式取代不断的swap,</span></span><br><span class="line">    <span class="comment">// 该优化思想和我们之前对插入排序进行优化的思路是一致的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDown2</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Comparable e = arr[k];</span><br><span class="line">        <span class="keyword">while</span>( <span class="number">2</span>*k+<span class="number">1</span> &lt; n )&#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>( j+<span class="number">1</span> &lt; n &amp;&amp; arr[j+<span class="number">1</span>].compareTo(arr[j]) &gt; <span class="number">0</span> )</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( e.compareTo(arr[j]) &gt;= <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            arr[k] = arr[j];</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[k] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 HeapSort</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">10</span>, <span class="number">91</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        HeapSort.sort2(arr);</span><br><span class="line">        PrintHelper.printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-堆排序的应用——Top-K问题"><a href="#6-堆排序的应用——Top-K问题" class="headerlink" title="6. 堆排序的应用——Top K问题"></a>6. 堆排序的应用——Top K问题</h4><p>例如，有1亿个浮点数，如何找出其中最大的10000个？（B326）</p>
<h3 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8. 计数排序"></a>8. 计数排序</h3><p><a href="https://www.cnblogs.com/freedom314/p/5847092.html" target="_blank" rel="noopener">https://www.cnblogs.com/freedom314/p/5847092.html</a></p>
<h3 id="9-排序算法总结"><a href="#9-排序算法总结" class="headerlink" title="9. 排序算法总结"></a>9. 排序算法总结</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">平均时间复杂度</th>
<th align="center">原地排序</th>
<th align="center">额外空间</th>
<th align="center">稳定排序</th>
</tr>
</thead>
<tbody><tr>
<td align="center">插入排序</td>
<td align="center">O(n^2)</td>
<td align="center">√</td>
<td align="center">O(1)</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">归并排序</td>
<td align="center">O(nlogn)</td>
<td align="center">×</td>
<td align="center">O(n)</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">快速排序</td>
<td align="center">O(nlogn)</td>
<td align="center">√</td>
<td align="center">O(logn)</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">堆排序</td>
<td align="center">O(nlogn)</td>
<td align="center">√</td>
<td align="center">O(1)</td>
<td align="center">×</td>
</tr>
</tbody></table>
<p>稳定排序：对于相等的元素，在排序后，原来靠前的元素依然靠前。相等元素的相对位置没有发生变化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过⾃自定义⽐比较函数，让排序算法不不存在稳定性的问题。</span></span><br><span class="line">bool operator&lt;(<span class="keyword">const</span> Student&amp; otherStudent)&#123;</span><br><span class="line">    <span class="keyword">return</span> score != otherStudent.score ?</span><br><span class="line">    score &gt; otherStudent.score :</span><br><span class="line">    name &lt; otherStudent.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p><img data-src="pics/sort_algorithm_analyze.png" alt=""> </p>
<h2 id="二、递归和回溯法"><a href="#二、递归和回溯法" class="headerlink" title="二、递归和回溯法"></a>二、递归和回溯法</h2><h3 id="1-例题"><a href="#1-例题" class="headerlink" title="1. 例题"></a>1. 例题</h3><h3 id="2-排列问题"><a href="#2-排列问题" class="headerlink" title="2. 排列问题"></a>2. 排列问题</h3><h3 id="3-组合问题"><a href="#3-组合问题" class="headerlink" title="3. 组合问题"></a>3. 组合问题</h3><h3 id="4-回溯法的剪枝"><a href="#4-回溯法的剪枝" class="headerlink" title="4. 回溯法的剪枝"></a>4. 回溯法的剪枝</h3><h3 id="5-二维平面回溯法"><a href="#5-二维平面回溯法" class="headerlink" title="5. 二维平面回溯法"></a>5. 二维平面回溯法</h3><h3 id="6-floodfill算法"><a href="#6-floodfill算法" class="headerlink" title="6. floodfill算法"></a>6. floodfill算法</h3><h2 id="三、动态规划"><a href="#三、动态规划" class="headerlink" title="三、动态规划"></a>三、动态规划</h2><p>递归和动态规划都是将原问题拆成多个子问题然后求解，他们之间最本质的区别是，动态规划保存了子问题的解，避免重复计算。 </p>
<p>动态规划一般可分为4类：</p>
<ol>
<li>线性动规</li>
<li>区域动规</li>
<li>树形动规</li>
<li>背包动规</li>
</ol>
<p>以<code>198. House Robber</code>为例，动态规划的<strong>状态定义</strong>和<strong>状态转移方程</strong>如下：</p>
<p>注意其中对状态的<strong>定义</strong>：</p>
<ul>
<li>考虑偷取 [x…n-1] 范围⾥里里的房子 （函数的定义）</li>
</ul>
<p>根据对状态的定义，决定状态的<strong>转移</strong>：</p>
<ul>
<li><p>f(0) = max{ v(0) + f(2) , v(1) + f(3) , v(2) + f(4) , … ,v(n-3) + f(n-1) , v(n-2),v(n-1) }</p>
<p>(状态转移方程)</p>
</li>
</ul>
<p><img data-src="pics/dynamic_programming.png" alt=""></p>
<h3 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1. 斐波那契数列"></a>1. 斐波那契数列</h3><h4 id="1-1-递归方式（自顶向下）"><a href="#1-1-递归方式（自顶向下）" class="headerlink" title="1.1 递归方式（自顶向下）"></a>1.1 递归方式（自顶向下）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">( <span class="keyword">int</span> n )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( n == <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( n == <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">fib(<span class="number">42</span>) = <span class="number">267914296</span></span><br><span class="line">time : <span class="number">1949</span> ms</span><br><span class="line"><span class="function">run function <span class="title">fib</span><span class="params">()</span> 866988873 times.</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-记忆化搜索（自底向上）"><a href="#1-2-记忆化搜索（自底向上）" class="headerlink" title="1.2 记忆化搜索（自底向上）"></a>1.2 记忆化搜索（自底向上）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(memo, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> fib(n, memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] memo)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(memo[n] == -<span class="number">1</span>)</span><br><span class="line">        memo[n] = fib(n - <span class="number">1</span>, memo) + fib(n - <span class="number">2</span>, memo);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">fib(<span class="number">1000</span>) = <span class="number">1556111435</span></span><br><span class="line">time : <span class="number">1</span> ms</span><br><span class="line"><span class="function">run function <span class="title">fib</span><span class="params">()</span> 1999 times.</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-动态规划"><a href="#1-3-动态规划" class="headerlink" title="1.3 动态规划"></a>1.3 动态规划</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(memo, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    memo[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    memo[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= n ; i ++)</span><br><span class="line">        memo[i] = memo[i - <span class="number">1</span>] + memo[i - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2-背包问题"><a href="#2-背包问题" class="headerlink" title="2. 背包问题"></a>2. 背包问题</h3><p>先得到该问题的局部解然后扩展到全局问题解。</p>
<p>我们可以假设一个B(k,C) 方法，第k件物品，当前背包所剩下的容量C（初始则C=W）情况下，能够偷的最大价值量。</p>
<p>B( i , c ) = max{ F( i - 1 , C ) ,  v(i) + F( i - 1, C - w[i] ) };</p>
<h4 id="（1）记忆化搜索"><a href="#（1）记忆化搜索" class="headerlink" title="（1）记忆化搜索"></a>（1）记忆化搜索</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 记忆化搜索</span></span><br><span class="line"><span class="comment"> * 时间复杂度: O(n * C) 其中n为物品个数; C为背包容积</span></span><br><span class="line"><span class="comment"> * 空间复杂度: O(n * C)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution01</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] memo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = w.length;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="keyword">int</span>[n][C + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            Arrays.fill(memo[i],-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bestValue(w, v, n - <span class="number">1</span>, C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用 [0...index]的物品,填充容积为c的背包的最大价值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">bestValue</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> i, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || C &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (memo[i][C] != -<span class="number">1</span>) <span class="comment">// 记忆化搜索</span></span><br><span class="line">            <span class="keyword">return</span> memo[i][C];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        res = bestValue(w, v, i - <span class="number">1</span>, C);</span><br><span class="line">        <span class="keyword">if</span> (C &gt;= w[i])</span><br><span class="line">            res = max(res, v[i] + bestValue(w, v, i - <span class="number">1</span>, C - w[i]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> memo[i][C] = res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] w = &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] v = &#123;<span class="number">10</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution01().knapsack(w, v, <span class="number">10</span>));</span><br><span class="line">        System.out.println(<span class="string">"count of bestValue() exec："</span> + count);</span><br><span class="line">        PrintHelper.print2DArray(memo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（2）动态规划"><a href="#（2）动态规划" class="headerlink" title="（2）动态规划"></a>（2）动态规划</h4><div align="center"> <img data-src="pics/knapsack-01.png" width=""/></div><br/>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态规划</span></span><br><span class="line"><span class="comment"> * 时间复杂度: O(n * C) 其中n为物品个数; C为背包容积</span></span><br><span class="line"><span class="comment"> * 空间复杂度: O(n * C)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = w.length;</span><br><span class="line">        <span class="keyword">int</span>[][] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n][C + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || C == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= C; j++)</span><br><span class="line">            memo[<span class="number">0</span>][j] = (j &gt;= w[<span class="number">0</span>] ? v[<span class="number">0</span>] : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= C; j++) &#123;</span><br><span class="line">                memo[i][j] = memo[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= w[i]) &#123;</span><br><span class="line">                    memo[i][j] = max(memo[i][j], v[i] + memo[i - <span class="number">1</span>][j - w[i]]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> memo[n - <span class="number">1</span>][C];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] w = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] v = &#123;<span class="number">6</span>, <span class="number">10</span>, <span class="number">12</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> C = <span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution02().knapsack(w, v, C));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（3）动态规划优化思路1"><a href="#（3）动态规划优化思路1" class="headerlink" title="（3）动态规划优化思路1"></a>（3）动态规划优化思路1</h4><p>优化思路：第i行元素只依赖于第i-1行元素，理论上，只需要保持两行元素即可</p>
<div align="center"> <img data-src="pics/knapsack-optimized1.png" width=""/></div><br/>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 动态规划改进: 滚动数组</span></span><br><span class="line"><span class="comment">/// 时间复杂度: O(n * C) 其中n为物品个数; C为背包容积</span></span><br><span class="line"><span class="comment">/// 空间复杂度: O(C), 实际使用了2*C的额外空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack01</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(w == <span class="keyword">null</span> || v == <span class="keyword">null</span> || w.length != v.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid w or v"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(C &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"C must be greater or equal to zero."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = w.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || C == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] memo = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][C + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= C ; j ++)</span><br><span class="line">            memo[<span class="number">0</span>][j] = (j &gt;= w[<span class="number">0</span>] ? v[<span class="number">0</span>] : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= C ; j ++)&#123;</span><br><span class="line">                memo[i % <span class="number">2</span>][j] = memo[(i-<span class="number">1</span>) % <span class="number">2</span>][j];</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= w[i])</span><br><span class="line">                    memo[i % <span class="number">2</span>][j] = Math.max(memo[i % <span class="number">2</span>][j], v[i] + memo[(i-<span class="number">1</span>) % <span class="number">2</span>][j - w[i]]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> memo[(n-<span class="number">1</span>) % <span class="number">2</span>][C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（4）动态规划优化思路2"><a href="#（4）动态规划优化思路2" class="headerlink" title="（4）动态规划优化思路2"></a>（4）动态规划优化思路2</h4><div align="center"> <img data-src="pics/knapsack-optimized2.png" width=""/></div><br/>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 动态规划改进</span></span><br><span class="line"><span class="comment">/// 时间复杂度: O(n * C) 其中n为物品个数; C为背包容积</span></span><br><span class="line"><span class="comment">/// 空间复杂度: O(C), 只使用了C的额外空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack01</span><span class="params">(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] v, <span class="keyword">int</span> C)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(w == <span class="keyword">null</span> || v == <span class="keyword">null</span> || w.length != v.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid w or v"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(C &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"C must be greater or equal to zero."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = w.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || C == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[C+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt;= C ; j ++)</span><br><span class="line">            memo[j] = (j &gt;= w[<span class="number">0</span>] ? v[<span class="number">0</span>] : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = C ; j &gt;= w[i] ; j --)</span><br><span class="line">                memo[j] = Math.max(memo[j], v[i] + memo[j - w[i]]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> memo[C];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（5）背包问题更多变种"><a href="#（5）背包问题更多变种" class="headerlink" title="（5）背包问题更多变种"></a>（5）背包问题更多变种</h4><ul>
<li>多重背包问题：每个物品不不⽌止1个，有num(i)个</li>
<li>完全背包问题：每个物品可以⽆无限使⽤用</li>
<li>多维费⽤用背包问题：要考虑物品的体积和重量量两个维度？</li>
<li>物品间加⼊入更更多约束：物品间可以互相排斥；也可以互相依赖</li>
</ul>
<h3 id="3-最长上升子序列"><a href="#3-最长上升子序列" class="headerlink" title="3. 最长上升子序列"></a>3. 最长上升子序列</h3><p><strong>Longest Increasing Subsequence (LIS)</strong></p>
<p><strong>【Leetcode 300】最长上升子序列</strong> </p>
<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>
<p><strong>示例:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">10</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>,<span class="number">18</span>]</span><br><span class="line">输出: <span class="number">4</span> </span><br><span class="line">解释: 最长的上升子序列是 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>]，它的长度是 <span class="number">4</span>。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</li>
<li>你算法的时间复杂度应该为 O(<em>n2</em>) 。</li>
</ul>
<p><strong>进阶:</strong> 你能将算法的时间复杂度降低到 O(<em>n</em> log <em>n</em>) 吗?</p>
<p>LIS( i ) 表示以第 i 个数字为结尾的最长上升子序列的长度</p>
<p>LIS( i ) 表示 [0…i] 的范围内，选择数字nums[i]可以获得的最长上升子序列的长度</p>
<p>LIS ( i )  =   max<sub>j&lt;i</sub>( 1 + LIS( j ) if nums[i] &gt; nums[j] )</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(memo, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i])</span><br><span class="line">                    memo[i] = max(memo[i] , memo[j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            res = max(memo[i],res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution().lengthOfLIS(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里思考一个问题：在上面的代码中只求解出了上升子序列的长度，那么如何求出具体的上升子序列呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; LISindex = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 记录一下有几个上升子序列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; lengthOfLIS(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; resList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">        Arrays.fill(memo, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i])</span><br><span class="line">                    memo[i] = max(memo[i], memo[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res = max(memo[i], res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (memo[i] == res)</span><br><span class="line">                LISindex.add(i); <span class="comment">// 遍历一下最长子序列最后一位是谁，统计一共有多少个子序列</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> lastIndex : LISindex) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> nowMemoCount = memo[lastIndex];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lastIndex; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nowMemoCount - memo[i] == <span class="number">1</span> || nowMemoCount - memo[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    list.add(nums[i]);</span><br><span class="line">                    nowMemoCount--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            resList.add(reverseList(list));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">reverseList</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; newList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            newList.add(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution2().lengthOfLIS(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-最长公共子序列"><a href="#4-最长公共子序列" class="headerlink" title="4. 最长公共子序列"></a>4. 最长公共子序列</h3><p><strong>Longest Common Sequence (LCS)</strong>：给出两个字符串S1和S2，求这两个字符串的最长公共子序列的长度</p>
<p>LCS( m , n ) S1[0…m] 和 S2[0…n] 的最长公共子序列的长度</p>
<p><strong>S1[m] == S2[n] :</strong>  </p>
<p>LCS(m,n) = 1 + LCS(m-1,n-1) </p>
<p><strong>S1[m] != S2[n] :</strong>   </p>
<p>LCS(m,n) = max( LCS(m-1,n) , LCS(m,n-1) )</p>
<div align="center"> <img data-src="pics/LCS.png" width=""/></div><br/>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最长公共子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LCS</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bestLength(s1, s2, s1.length() - <span class="number">1</span>, s2.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bestLength</span><span class="params">(String s1, String s2, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lcs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (s1.charAt(m) == s2.charAt(n)) &#123;</span><br><span class="line">            lcs = <span class="number">1</span> + bestLength(s1, s2, m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lcs = max(bestLength(s1, s2, m - <span class="number">1</span>, n), bestLength(s1, s2, m, n - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lcs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Solution3().LCS(<span class="string">"ABCDEE"</span>, <span class="string">"ABDCEE"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>参考资料：</p>
<ul>
<li><a href="https://www.cnblogs.com/Christal-R/p/Dynamic_programming.html" target="_blank" rel="noopener">动态规划解决01背包问题 - Christal_R - 博客园</a></li>
<li><a href="http://new-play.tudou.com/v/XMTQ3MzI0NzI2OA==.html?spm=a2h0k.8191414.0.0&from=s1.8-1-1.2&f=28521433" target="_blank" rel="noopener">【经典算法】01背包问题_土豆视频</a></li>
</ul>
<h2 id="四、贪心算法"><a href="#四、贪心算法" class="headerlink" title="四、贪心算法"></a>四、贪心算法</h2><h3 id="1-assign-cookies"><a href="#1-assign-cookies" class="headerlink" title="1. assign-cookies"></a>1. assign-cookies</h3><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<p><strong>注意：</strong></p>
<p>你可以假设胃口值为正。<br>一个小朋友最多只能拥有一块饼干。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，<span class="number">3</span>个孩子的胃口值分别是：<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是<span class="number">1</span>，你只能让胃口值是<span class="number">1</span>的孩子满足。</span><br><span class="line">所以你应该输出<span class="number">1</span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">解释: </span><br><span class="line">你有两个孩子和三块小饼干，<span class="number">2</span>个孩子的胃口值分别是<span class="number">1</span>,<span class="number">2</span>。</span><br><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span><br><span class="line">所以你应该输出<span class="number">2.</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = g.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = s.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[j] &gt;= g[i])&#123;</span><br><span class="line">                    res ++;</span><br><span class="line">                    s[j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res =  <span class="keyword">new</span> Solution().findContentChildren(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>&#125;);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h1 id="第三部分：面试指南"><a href="#第三部分：面试指南" class="headerlink" title="第三部分：面试指南"></a>第三部分：面试指南</h1><h2 id="1-判单链表是否对称"><a href="#1-判单链表是否对称" class="headerlink" title="1. 判单链表是否对称"></a>1. 判单链表是否对称</h2><blockquote>
<p>网易有道面经</p>
</blockquote>
<p><strong>原题</strong>：设单链表中存放着 n 个字符，设计算法并判断字符是否中心对称，如 “xyzzyx” 是中心对称的。</p>
<p><strong>思路1</strong>：可先将字符串中的全部字符进栈，然后再将栈中的字符逐个与链表中的字符进行比较，如全部相等，则为中心对称。</p>
<p><strong>思路2</strong>：将单链表的前一半元素依次入栈，遍历到单链表的后一半元素的第一个元素时，便从栈中弹出一个元素，对它们俩开始比较。</p>
<ul>
<li>若相等，则将链表中的下一个元素与栈中再次弹出的元素进行比较，直至单链表到末尾，而且如果此时栈也为空栈，则可得出此单链表是中心对称的结论；</li>
<li>若不相等，则单链表不是中心对称。</li>
</ul>
<h2 id="2-合并两个有序数组成一个有序数组"><a href="#2-合并两个有序数组成一个有序数组" class="headerlink" title="2. 合并两个有序数组成一个有序数组"></a>2. 合并两个有序数组成一个有序数组</h2><blockquote>
<p>金山云面经</p>
</blockquote>
<p>有两种实现思路：</p>
<ol>
<li><p>定义一个新数组，长度为两个数组长度之和，将两个数组都 copy 到新数组，然后排序。</p>
</li>
<li><p>给两个数组分别定义一个下标，最大长度是数组长度减一，按位循环比较两个数组，较小元素的放入新数组，下标加一（注意，较大元素对应的下标不加一），直到某一个下标超过数组长度时退出循环，此时较短数组已经全部放入新数组，较长数组还有部分剩余，最后将剩下的部分元素放入新数组，大功告成。</p>
</li>
</ol>
<h2 id="3-求二叉树中值为x的结点的层号"><a href="#3-求二叉树中值为x的结点的层号" class="headerlink" title="3. 求二叉树中值为x的结点的层号"></a>3. 求二叉树中值为x的结点的层号</h2><blockquote>
<p>金山云面经</p>
</blockquote>
<p>思路：利用访问二叉树的路径过程求解（PS：这里不是说遍历过程，是访问过程，无论前中后序遍历，访问过程都是要经过通一结点三次），利用level变量记录访问过程中的层号，递归返回要减一；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">char</span> ElementType;</span><br><span class="line">typedef struct TNode *Position;</span><br><span class="line">typedef Position BinTree;</span><br><span class="line">struct TNode&#123;</span><br><span class="line">    ElementType Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">CreatBinTree</span><span class="params">()</span></span>; <span class="comment">/* 实现细节忽略 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level_in_x</span><span class="params">(BinTree BT,<span class="keyword">char</span> x,<span class="keyword">int</span> level)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">    BinTree BT = CreatBinTree();</span><br><span class="line">    level_in_x(BT,<span class="string">'H'</span>,level);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态建树</span></span><br><span class="line"><span class="function">BinTree <span class="title">CreatBinTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BinTree pa = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree pb = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree pc = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree pd = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree pe = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree pf = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree pg = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree ph = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line">    BinTree pi = (BinTree)malloc(sizeof(struct TNode));</span><br><span class="line"></span><br><span class="line">    pa-&gt;Data = <span class="string">'A'</span>;</span><br><span class="line">    pb-&gt;Data = <span class="string">'B'</span>;</span><br><span class="line">    pc-&gt;Data = <span class="string">'C'</span>;</span><br><span class="line">    pd-&gt;Data = <span class="string">'D'</span>;</span><br><span class="line">    pe-&gt;Data = <span class="string">'E'</span>;</span><br><span class="line">    pf-&gt;Data = <span class="string">'F'</span>;</span><br><span class="line">    pg-&gt;Data = <span class="string">'G'</span>;</span><br><span class="line">    ph-&gt;Data = <span class="string">'H'</span>;</span><br><span class="line">    pi-&gt;Data = <span class="string">'I'</span>;</span><br><span class="line"></span><br><span class="line">    pa-&gt;Left = pb; pa-&gt;Right = pc;</span><br><span class="line">    pb-&gt;Left = pd; pb-&gt;Right = pf;</span><br><span class="line">    pc-&gt;Left = pg; pc-&gt;Right = pi;</span><br><span class="line">    pd-&gt;Left = NULL; pd-&gt;Right = NULL;</span><br><span class="line">    pe-&gt;Left = NULL; pe-&gt;Right = NULL;</span><br><span class="line">    pf-&gt;Left = pe; pf-&gt;Right = NULL;</span><br><span class="line">    pg-&gt;Left = NULL; pg-&gt;Right = ph;</span><br><span class="line">    ph-&gt;Left = NULL; ph-&gt;Right = NULL;</span><br><span class="line">    pi-&gt;Left = NULL; pi-&gt;Right = NULL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level_in_x</span><span class="params">(BinTree BT,<span class="keyword">char</span> x,<span class="keyword">int</span> level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (BT == NULL)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(BT-&gt;Data == x)&#123;</span><br><span class="line">        printf(<span class="string">"x in %d"</span>,level);</span><br><span class="line">    &#125;</span><br><span class="line">    level++;</span><br><span class="line">    level_in_x(BT-&gt;Left,x,level);</span><br><span class="line">    level_in_x(BT-&gt;Right,x,level);</span><br><span class="line">    level--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="阿里面经OneNote"><a href="#阿里面经OneNote" class="headerlink" title="阿里面经OneNote"></a>阿里面经OneNote</h2><ol>
<li>如何判断一个单链表是否有环？  </li>
<li>快速排序，过程，复杂度？什么情况下适用，什么情况下不适用？ </li>
<li>什么是二叉平衡树，如何插入节点，删除节点 </li>
<li>二分搜索的过程 </li>
<li>归并排序的过程？时间复杂度？空间复杂度？ </li>
<li>给你一万个数，如何找出里面所有重复的数？用所有你能想到的方法，时间复杂度和空间复杂度分别是多少 </li>
<li>给你一个数组，如何里面找到和为K的两个数 </li>
<li>100000个数找出最小或最大的10个？ </li>
<li>一堆数字里面继续去重，要怎么处理？阅读 RFC2616 文档，即 HTTP/1.1 规范，输入某个网址，利用 Java 的 Socket 发送 HTTP请求，特别要求能够解码 chunked 编码，观察文档中的伪代码实现，自己用Java代码实现，将解析后的整个html文档输出到控制台上，不要求关注太多细节。(就是不允许用httpclient的jar包，自行实现这个jar包类似的功能) </li>
</ol>
<h1 id="第四部分：参考资料"><a href="#第四部分：参考资料" class="headerlink" title="第四部分：参考资料"></a>第四部分：参考资料</h1><ul>
<li><a href="http://www.cnblogs.com/skywang12345/p/3603935.html" target="_blank" rel="noopener">数据结构与算法系列 目录 - 如果天空不死 - 博客园</a></li>
<li><a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/%E7%AE%97%E6%B3%95.md#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">Interview-Notebook/算法.md at master · CyC2018/Interview-Notebook</a></li>
<li><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener">十大经典排序算法</a></li>
<li><a href="https://visualgo.net/en" target="_blank" rel="noopener">VisuAlgo - visualising data structures and algorithms through animation</a> </li>
<li><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">Data Structure Visualization</a></li>
<li><a href="https://www.cnblogs.com/chenhuan001/p/5866916.html" target="_blank" rel="noopener">海量数据处理：十道面试题与十个海量数据处理方法总结 - chenhuan001 - 博客园</a></li>
</ul>
]]></content>
      <categories>
        <category>收藏</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
</search>
