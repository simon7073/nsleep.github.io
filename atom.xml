<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon</title>
  
  <subtitle>玄之又玄，众妙之门</subtitle>
  <link href="https://blog.simon7.top/atom.xml" rel="self"/>
  
  <link href="https://blog.simon7.top/"/>
  <updated>2023-02-23T03:10:04.000Z</updated>
  <id>https://blog.simon7.top/</id>
  
  <author>
    <name>Simon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>标签和分类有什么区别？</title>
    <link href="https://blog.simon7.top/20230223/%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%86%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <id>https://blog.simon7.top/20230223/%E6%A0%87%E7%AD%BE%E5%92%8C%E5%88%86%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</id>
    <published>2023-02-23T03:10:04.000Z</published>
    <updated>2023-02-23T03:10:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客或网站上，标签和分类都是用来对文章进行分类和组织的方式，但它们有不同的用途和区别。</p><span id="more"></span><p>目的不同：分类是用来将文章分成不同的主题或类别，让读者可以更轻松地找到他们感兴趣的内容；标签则是用来描述文章内容或主题的关键词，让读者可以更方便地通过搜索或浏览方式找到相关的文章。</p><p>层次不同：分类是具有层次结构的，每个分类都可以有多个子分类，这样可以更好地组织和管理文章；而标签没有层次结构，每个标签都是独立的。</p><p>使用频率不同：分类一般数量较少，使用频率也比较低，<strong>每个文章只能分到一个分类下</strong>；而标签数量较多，使用频率比较高，一个文章可以有多个标签。</p><p>总体来说，分类用于对文章进行粗略的整理和归类，而标签则用于对文章进行更精细的描述和细致的归档，两者结合可以更好地组织和管理博客或网站的内容。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;博客或网站上，标签和分类都是用来对文章进行分类和组织的方式，但它们有不同的用途和区别。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Github 使用指南</title>
    <link href="https://blog.simon7.top/20230223/github-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://blog.simon7.top/20230223/github-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2023-02-23T02:40:15.000Z</published>
    <updated>2023-02-23T02:40:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一.-介绍">一. 介绍</h1><p>Github是一个全球最大的代码托管平台，也是一个开源软件开发社区，它为程序员、开发者和团队提供了一个基于互联网的集中式代码管理工具。它使用Git作为基础技术，并提供了一系列功能强大的协作和开发工具，例如问题跟踪、代码审核、版本控制、分支管理等等。</p><p>Github最初是由美国程序员Tom Preston-Werner和Chris Wanstrath以及P. J.Hyett在2008年4月创建的，当时它只是一个简单的Web应用程序，用于管理和分享代码。随着开源软件的普及和互联网的发展，Github迅速成为全球最受欢迎的代码托管平台之一，目前拥有超过6000万的开发者和超过1.5亿个代码仓库。<!--Github的成功不仅在于它提供了高效的代码托管服务，还在于它建立了一个开源软件开发的社交平台，让程序员和开发者可以互相学习、交流、分享代码和项目。通过Github，开发者可以方便地查找和使用其他人的代码、发布自己的开源项目、协作开发、提出和解决问题等等。同时，Github也支持私有仓库，使得商业和个人项目也能够方便地使用它的服务。Github是现代软件开发的核心工具之一，它的影响力已经超越了代码托管平台本身，成为了一个文化现象。越来越多的开发者和团队选择使用Github来进行软件开发和协作，它也被越来越多的企业和组织用作内部协作和知识管理工具。--></p><span id="more"></span><h2 id="主要用途">主要用途</h2><ol type="1"><li>代码托管：开发者可以将代码存储在Github上，并通过Git进行版本控制和协作开发。</li><li>项目管理：Github提供了强大的项目管理功能，包括任务分配、问题追踪和代码审核等。</li><li>文档管理：开发者可以使用Github来存储和共享文档，如API文档、用户手册等。</li><li>博客托管：开发者可以使用GithubPages来搭建静态博客，将博客页面托管在Github上。</li><li>开源社区：Github是一个开源社区，开发者可以通过贡献开源项目来提升自己的技能和声誉。</li></ol><h2 id="优势">优势</h2><ol type="1"><li>分布式版本控制：Github使用Git进行版本控制，具有分布式版本控制的优势，可以避免单点故障和数据丢失。</li><li>开放性和透明度：Github是一个开源社区，任何人都可以访问和查看公开的项目和代码，提高了透明度和开放性。</li><li>协作和共享：Github提供了强大的协作和共享功能，开发者可以轻松地与团队成员、同行和其他开发者协作开发。</li><li>社区和生态系统：Github是一个庞大的开源社区，包括众多开源项目和开发者，开发者可以从中受益，并提高自己的技能和经验。</li><li>强大的工具和服务：Github提供了许多强大的工具和服务，如CI/CD、自动化部署、代码审核、问题追踪和Wiki等，可以帮助开发者提高效率和质量。</li></ol><h2 id="github的基本概念">Github的基本概念</h2><p>仓库(repository)：指存储项目代码和文件的地方。一个仓库可以包含多个文件和文件夹，并记录项目历史和版本信息。分支(branch)：指在仓库中创建的一个代码版本。通过创建分支，可以在不影响主干代码的情况下进行实验和修改。提交(commit)：指将修改过的文件和文件夹保存到仓库中的操作。每个提交都会包含一条描述修改内容的信息。合并(merge)：指将一个分支的代码合并到另一个分支或主干代码中的操作。发布(Release)：指的是将特定版本的代码或文件打包并发布到GitHub，这些版本可以用来对外发布项目的稳定版本、发布更新等。发布(publish)：一般指将静态网站发布到 GitHub Pages。 拉取请求(pullrequest)：指在 Github上发起的一项合并请求，通常由分支的创建者向项目的维护者发起，请求合并分支代码到主干分支。问题(Issue)：指在 Github上的一个问题跟踪系统，可以用于报告软件缺陷、请求新功能或讨论项目问题等。派生(Fork)：指的是复制某个仓库到自己的 GitHub帐号下。在自己的帐号下进行修改、提交变更等操作不会影响到原始的项目。如果希望你所做的修改能够贡献给原始项目，你可以提交Pull Request 给原作者，让他来评审并接受你的修改。 （发布） GithubPages：是 GitHub 提供的一项免费的静态网站托管服务。</p><h1 id="二准备工作">二、准备工作</h1><ol type="1"><li>注册Github账号。<a href="https://github.com/">链接</a></li><li>安装Git客户端。<a href="https://git-scm.com/downloads">链接</a></li><li>生成SSH密钥</li></ol><h2 id="git-客户端配置">git 客户端配置</h2><p>在命令行终端输入<code>git --version</code>命令，如果能够显示Git的版本号，则说明Git客户端已经成功安装。</p><ol type="1"><li>设置Git客户端的用户信息，包括用户名和电子邮件地址。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"your_name"</span>   <span class="token comment"># nsleep</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"your_email"</span> <span class="token comment"># simoncq@163.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>设置默认文本编辑器 如果没有设置默认的文本编辑器，Git会使用系统默认的文本编辑器，例如 Vim。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.editor <span class="token string">"vim"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>设置默认分支 将默认分支设置为其他分支，例如 <code>main</code> 分支。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> init.defaultBranch main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>其他配置 还有一些其他的 Git 配置可以进行，例如设置颜色输出、配置 Git对换行符的处理等等。 可以使用以下命令来查看当前的 Git 配置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>在安装Git客户端后，可以选择性的安装一个可视化图形软件辅助git使用，例如：1. Sourcetree 2. GitKraken 3. GitHub Desktop 4. Tower</p><h2 id="生成ssh密钥">生成SSH密钥</h2><p>为了方便本地访问Github，创建ssh密钥，并将公钥[<code>%USERPROFILE%/.ssh/id_rsa.pub</code>]上传<ahref="https://github.com/settings/ssh/new">Github ssh keys</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"your_email"</span> <span class="token comment"># 创建密钥对</span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com <span class="token comment"># 测试添加ssh是否成功  -v 显示详细信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更多参见<ahref="https://help.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh">GithubDocs</a></li></ul><h1 id="三github-基本操作">三、Github 基本操作</h1><h2 id="创建仓库repository">创建仓库(repository)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="克隆clone仓库到本地">克隆(clone)仓库到本地</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/<span class="token operator">&lt;</span>YourName<span class="token operator">></span>/YourRepoName.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在本地进行修改和提交">在本地进行修改和提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 暂存</span><span class="token function">git</span> <span class="token function">add</span> README.md<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 提交本地仓库</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Update Messages"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将本地提交推送push到github">将本地提交推送(push)到Github</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加远程版本库</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/<span class="token operator">&lt;</span>YourName<span class="token operator">></span>/YourRepoName.git<span class="token comment"># 推送</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看提交历史">查看提交历史</h2><p>查看当前分支的提交历史</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看某个特定分支的提交历史</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token operator">&lt;</span>branch-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>&lt;branch-name&gt;</code> 是要查看的分支的名称。</p><p><code>git log</code> 命令支持许多选项和参数，例如使用<code>--author</code> 选项按作者筛选提交记录，使用 <code>--since</code>和 <code>--until</code> 选项按时间段筛选提交记录等等。可以通过运行<code>git log --help</code> 命令来查看所有选项和参数的帮助信息。</p><h2 id="撤销提交">撤销提交</h2><p>撤销提交有两种情况：一种是撤销本地未推送到远程仓库的提交，另一种是撤销已经推送到远程仓库的提交。</p><h3id="撤销本地未推送到远程仓库的提交">撤销本地未推送到远程仓库的提交</h3><p>如果你在本地提交了代码，但是还没有推送到远程仓库，可以使用以下两种方法撤销提交：</p><ol type="1"><li>使用 git reset命令。该命令会将当前分支指向指定的提交，并且将代码库重置为该提交的状态。如果不带参数，则默认将当前分支指向上一次提交。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD~1   <span class="token comment"># 撤销上一次提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用 git revert命令。该命令会创建一个新的提交来撤销指定的提交。这种方法不会删除任何历史记录。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert HEAD   <span class="token comment"># 撤销上一次提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="撤销已经推送到远程仓库的提交">撤销已经推送到远程仓库的提交</h3><p>如果你已经将代码推送到远程仓库，并且其他人已经对该提交进行了修改，那么就需要使用<code>git revert</code> 命令来创建一个新的提交来撤销之前的提交。</p><ol type="1"><li>首先使用 <code>git log</code> 命令查看要撤销的提交的哈希值。</li><li>然后使用 <code>git revert &lt;commit-hash&gt;</code>命令创建一个新的提交。</li><li>最后使用 <code>git push</code> 命令将新的提交推送到远程仓库。</li></ol><h2 id="分支管理">分支管理</h2><p>常用的分支管理命令包括：</p><ul><li>git branch：列出所有分支，以及当前所在的分支。</li><li>git branch [branch name]：新建一个分支。</li><li>git checkout [branch name]：切换到指定分支。</li><li>git checkout -b [branch name]：新建一个分支，并切换到该分支。</li><li>git merge [branch name]：将指定分支合并到当前分支。</li><li>git branch -d [branch name]：删除指定分支。</li><li>git branch -D [branch name]：强制删除指定分支。</li></ul><h1 id="github的相关工具和服务">Github的相关工具和服务</h1><p>Github Desktop Travis CI Codecov Coveralls</p><h1 id="常见问题解答">常见问题解答</h1><h2 id="如何解决冲突conflict">如何解决冲突(conflict)</h2><p>在 Git中，冲突通常发生在两个分支上进行了相同文件的更改，并且尝试将这两个分支合并（merge）时发生。为了解决冲突，可以按照以下步骤进行：</p><ul><li>运行 <code>git status</code> 命令，查看冲突的文件。</li><li>打开冲突的文件，查看冲突的位置。Git会在冲突的地方插入一些标记，标识出两个不同的更改。</li><li>修改文件，解决冲突。根据实际情况选择保留、删除或修改其中一个或两个更改。</li><li>保存文件。</li><li>运行 <code>git add</code> 命令，将冲突文件标记为已解决。</li><li>运行 <code>git commit</code> 命令，提交合并后的更改。</li><li>如果需要，推送(push)到远程仓库。</li></ul><h2 id="如何回退commit-revert">如何回退(commit revert)</h2><p>在 Git 中，要回退（revert）一个提交（commit），可以使用<code>git revert</code>命令。该命令并不会删除之前的提交。因此，在回退一个提交之后，如果需要彻底删除这个提交，可以使用<code>git reset</code> 命令或者 <code>git rebase</code>命令。但是，这样做会导致历史提交记录被修改，不建议在公共仓库中执行这样的操作。</p><ul><li>使用 git log 命令查看最近的提交历史，找到需要回退的提交的 SHA-1标识符。</li><li>然后，可以使用 <code>git revert</code> 命令指定需要回退的提交的SHA-1 标识符。</li></ul><h2id="如何合并merge和推送push分支">如何合并(merge)和推送(push)分支</h2><p>步骤如下： 1. 首先，切换到目标分支，例如主分支 <code>main</code>：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 2. 将要合并的分支 <code>feature</code> 合并到当前分支<code>main</code> 上： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果出现冲突，需要解决冲突后再执行合并操作。 3.将合并后的更改推送到远程仓库： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 如果第一次推送，需要使用-u 参数设置上游分支： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果推送过程中提示需要拉取最新代码，请先拉取最新代码：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master <span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="如何通过pull-request进行协作和代码审核">如何通过PullRequest进行协作和代码审核</h2><p>一般步骤： 1.Fork源代码仓库到自己的账户下，然后将代码仓库clone到本地。 2.创建一个新分支，基于最新的远程代码。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> new-branch origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 3.在新分支上进行修改和提交。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"commit message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> 4.将新分支推送到自己的远程仓库中。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin new-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 5.在Github上创建一个PullRequest，选择要合并到的目标分支，写明详细的修改内容和描述，向目标分支的仓库管理员请求代码审核。代码审核人员检查代码，提出修改意见，或者在PR页面中进行评论讨论。如果代码审核通过，管理员就可以将该PR合并到目标分支。6. 删除本地分支。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> new-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 7.更新自己的仓库到最新版本，以便下次开发。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch upstream<span class="token function">git</span> merge upstream/master<span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 其中<code>upstream</code> 指的是一个远程仓库的地址</p><h2 id="crlf-报错问题">CRLF 报错问题</h2><p>首先问题出在不同操作系统所使用的换行符是不一样的，下面罗列一下三大主流操作系统的换行符：<code>Uinx/Linux</code>采用换行符 LF 表示下一行（LF：LineFeed，换行）；<code>Dos</code>和<code>Windows</code>采用<code>回车+换行</code>CRLF表示下一行（CRLF:CarriageReturn LineFeed，中文意思是回车换行）；<code>Mac OS</code>采用回车<code>CR</code>表示下一行（CR：CarriageReturn，回车）。</p><p>当错误出现的时候，可以执行下面命令： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><code>core.autocrlf</code> 有三个值: 为 true 时，Git 会将你 add的所有文件视为文本文件，将结尾的 CRLF 转换为LF，而 checkout时会再将文件的LF格式转为 CRLF 格式。 为 false 时，line endings不做任何改变，文本文件保持其原来的样子。 为 input 时，add 时 Git 会把CRLF 转换为 LF，而 check 时仍旧为 LF，所以 Windows操作系统不建议设置此值。 <!--<details><summary>CRLF 问题(折叠)</summary><blockquote>    首先问题出在不同操作系统所使用的换行符是不一样的，下面罗列一下三大主流操作系统的换行符：    <br/>Uinx/Linux采用换行符LF表示下一行（LF：LineFeed，换行）；    <br/>Dos和Windows采用回车+换行CRLF表示下一行（CRLF: CarriageReturn LineFeed，中文意思是回车换行）；    <br/>Mac OS采用回车CR表示下一行（CR：CarriageReturn，回车）。    <br/><br/>为true时，Git会将你 add 的所有文件视为文本文件，将结尾的CRLF转换为LF，而checkout时会再将文件的LF格式转为CRLF格式。    <br/>为false时，line endings不做任何改变，文本文件保持其原来的样子。    <br/>为input时，add时Git会把CRLF转换为LF，而check时仍旧为LF，所以Windows操作系统不建议设置此值。</blockquote></details>--></p><h2 id="ssl-证书错误">SSL 证书错误</h2><p>当错误出现的时候，可以执行下面命令： <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslVerify <span class="token boolean">false</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> https.sslVerify <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2id="如何手动验证证书并将其添加到-git-的信任列表中">如何手动验证证书并将其添加到Git 的信任列表中？</h2><ul><li>在浏览器中打开网站，并单击地址栏中的锁形图标。</li><li>选择“证书”或“证书信息”选项。</li><li>在“证书”窗口中选择“详细信息”选项卡。</li><li>在“详细信息”选项卡中，选择“证书颁发机构”/“证书层次结构”字段下的网址，点击“导出”，保存类型为“证书链”(<em>.pem,</em>.crt)。</li><li>输入命令<br /><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslCAInfo /path/to/github.crt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一.-介绍&quot;&gt;一. 介绍&lt;/h1&gt;
&lt;p&gt;Github是一个全球最大的代码托管平台，也是一个开源软件开发社区，它为程序员、开发者和团队提供了一个基于互联网的集中式代码管理工具。它使用Git作为基础技术，并提供了一系列功能强大的协作和开发工具，例如问题跟踪、代码审核、版本控制、分支管理等等。&lt;/p&gt;
&lt;p&gt;Github最初是由美国程序员Tom Preston-Werner和Chris Wanstrath以及P. J.
Hyett在2008年4月创建的，当时它只是一个简单的Web应用程序，用于管理和分享代码。随着开源软件的普及和互联网的发展，Github迅速成为全球最受欢迎的代码托管平台之一，目前拥有超过6000万的开发者和超过1.5亿个代码仓库。
&lt;!--
Github的成功不仅在于它提供了高效的代码托管服务，还在于它建立了一个开源软件开发的社交平台，让程序员和开发者可以互相学习、交流、分享代码和项目。通过Github，开发者可以方便地查找和使用其他人的代码、发布自己的开源项目、协作开发、提出和解决问题等等。同时，Github也支持私有仓库，使得商业和个人项目也能够方便地使用它的服务。

Github是现代软件开发的核心工具之一，它的影响力已经超越了代码托管平台本身，成为了一个文化现象。越来越多的开发者和团队选择使用Github来进行软件开发和协作，它也被越来越多的企业和组织用作内部协作和知识管理工具。
--&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="教程" scheme="https://blog.simon7.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Github" scheme="https://blog.simon7.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>延长Pycharm的试用时间</title>
    <link href="https://blog.simon7.top/20220714/%E5%BB%B6%E9%95%BFpycharm%E7%9A%84%E8%AF%95%E7%94%A8%E6%97%B6%E9%97%B4/"/>
    <id>https://blog.simon7.top/20220714/%E5%BB%B6%E9%95%BFpycharm%E7%9A%84%E8%AF%95%E7%94%A8%E6%97%B6%E9%97%B4/</id>
    <published>2022-07-14T11:03:31.000Z</published>
    <updated>2022-07-14T11:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考自<ahref="https://zhile.io/2021/11/29/ja-netfilter-javaagent-lib.html">介绍一个”牛逼闪闪”开源库：ja-netfilter</a><br /><strong>仅做使用说明</strong><br /><span id="more"></span> 我下载的是<ahref="https://jetbra.in/s">热心大佬</a>打好的压缩包，相信你会找到的。<br />或者在<ahref="./jetbra.zip">此处</a>下载，可能需要先执行里面的卸载脚本。</p><h1 id="操作指南">操作指南</h1><ol type="1"><li>为整个文件夹找个合适的位置（尽量不要放在桌面或者C盘根目录）<br /></li><li>在“许可证”窗口中注销 jb 帐户<br /></li><li>配置 vmoptions<ol type="1"><li>自动（推荐）<br />macOS 或 Linux：执行 <code>scripts/install.sh</code> 文件<br />Windows：执行 <code>scripts\install-current-user.vbs</code>（对于当前用户）或者<code>scripts\install-all-users.vbs</code>（适用于所有用户）<br /></li><li>手动<br />找到 *.vmoptions 文件并在文件内添加<code>-javaagent:/path/to/ja-netfilter.jar=jetbrains</code>（绝对路径）<br /></li></ol></li><li>使用页面上的密钥https://jetbra.in/5d84466e31722979266057664941a71893322460<br /></li><li>插件 <code>mymap</code> 自 2022.1 版起已弃用。 或可查询 <ahref="https://github.com/zfkun/ja-netfilter-mymap-plugin">ja-netfilter-mymap-plugin</a></li><li>不用关心激活时间，是 fallback license，不会过期</li></ol><div class="note success"><p>尽情享受吧~</p></div><h1 id="其他的配置">其他的配置</h1><p><del>我没有去了解这个的作用</del><br />JBR17：<br />将这两行添加到您的 vmoptions文件中：（对于手动，没有任何空白字符）<br />--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED<br />--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</p><div class="note success"><h4 id="最后的话">最后的话：</h4><ul><li>只做个人学习研究之用，不得用于商业用途！<br /></li><li>若资金允许，请点击<ahref="https://www.jetbrains.com/idea/buy/">链接</a>购买正版，谢谢合作！<br /></li><li>学生凭学生证可<ahref="https://sales.jetbrains.com/hc/zh-cn/articles/%20-07154369-%E5%AD%A6%E7%94%9F%E6%8E%88%E6%9D%83%E7%94%B3%E8%AF%B7%E6%96%B9%E5%BC%8F">免费申请</a>正版授权！<br /></li><li>创业公司可<ahref="https://www.jetbrains.com/shop/eform/startup">5折购买</a>正版授权！</li></ul></div><h1 id="参考">参考</h1><ul><li>https://zhile.io/<br /></li><li>https://gitee.com/ja-netfilter/ja-netfilter<br /></li><li>https://gitee.com/ja-netfilter/ja-netfilter-sample-plugin</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文参考自&lt;a
href=&quot;https://zhile.io/2021/11/29/ja-netfilter-javaagent-lib.html&quot;&gt;介绍一个”牛逼闪闪”开源库：ja-netfilter&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;仅做使用说明&lt;/strong&gt;&lt;br /&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>狼人杀双身份生成</title>
    <link href="https://blog.simon7.top/20220707/%E7%8B%BC%E4%BA%BA%E6%9D%80%E5%8F%8C%E8%BA%AB%E4%BB%BD%E7%94%9F%E6%88%90/"/>
    <id>https://blog.simon7.top/20220707/%E7%8B%BC%E4%BA%BA%E6%9D%80%E5%8F%8C%E8%BA%AB%E4%BB%BD%E7%94%9F%E6%88%90/</id>
    <published>2022-07-07T13:01:25.000Z</published>
    <updated>2022-07-07T13:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>身份牌有： 预言家 女巫 猎人 白神 守卫 禁言长老 小狼 <em>2 隐狼 盗贼村民 </em>6</p><p>玩家8人，每人两张，两牌皆有村民牌者为金宝宝，有狼人牌者为狼人，设计一个程序完成面杀发牌及游戏过程 <span id="more"></span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''规则：    1 玩家8人，每人两张    2 两牌皆有村民牌者为金宝宝    3 有狼人牌者为狼人    4 两张牌不能同时为狼人和预言家    5 至少有一个金宝宝    6 盗贼作为复制牌，可以视作手中的另一张身份牌。当另一个身份是村民时，视为一个金宝宝狼3 贼1 民6 预1 其他'''</span><span class="token keyword">import</span> random<span class="token keyword">from</span> random <span class="token keyword">import</span> shuffleres <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 基本身份（除盗贼外）</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'预言家'</span><span class="token punctuation">,</span><span class="token string">'女巫'</span><span class="token punctuation">,</span><span class="token string">'猎人'</span><span class="token punctuation">,</span><span class="token string">'白神'</span><span class="token punctuation">,</span><span class="token string">'守卫'</span><span class="token punctuation">,</span><span class="token string">'禁言长老'</span><span class="token punctuation">,</span><span class="token string">'小狼'</span><span class="token punctuation">,</span><span class="token string">'隐狼'</span><span class="token punctuation">,</span><span class="token string">'村民'</span><span class="token punctuation">]</span><span class="token comment"># 盗贼 选择的另一张身份</span>bad_guy <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>bad_guy<span class="token punctuation">,</span> <span class="token string">'盗贼'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 盗贼 为【狼 民 预 其他】</span><span class="token keyword">if</span> bad_guy <span class="token operator">==</span> <span class="token string">'预言家'</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'预言家'</span><span class="token punctuation">)</span>    p <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'小狼'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'村民'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'村民'</span><span class="token punctuation">,</span><span class="token string">'村民'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     <span class="token comment"># 盗贼 为【狼 民 其他】</span>    p<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'预言家'</span><span class="token punctuation">)</span>    prophet <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">[</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> p <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token string">'狼'</span> <span class="token keyword">in</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>prophet<span class="token punctuation">,</span> <span class="token string">'预言家'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 补充身份牌</span>    <span class="token keyword">if</span>  bad_guy <span class="token operator">!=</span> <span class="token string">'村民'</span><span class="token punctuation">:</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'村民'</span><span class="token punctuation">,</span><span class="token string">'村民'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        p <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'小狼'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'村民'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        p <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'小狼'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'村民'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span>    <span class="token comment"># 删除盗贼和预言家的另一身份牌</span>    p<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>bad_guy<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>prophet<span class="token punctuation">)</span><span class="token comment"># 打乱身份牌</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment"># 两两一组 作为将要发到玩家手中的牌</span>res <span class="token operator">+=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token comment"># 随机发放</span><span class="token comment">#random.shuffle(res)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;身份牌有： 预言家 女巫 猎人 白神 守卫 禁言长老 小狼 &lt;em&gt;2 隐狼 盗贼
村民 &lt;/em&gt;6&lt;/p&gt;
&lt;p&gt;玩家8人，每人两张，两牌皆有村民牌者为金宝宝，有狼人牌者为狼人，
设计一个程序完成面杀发牌及游戏过程</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>简述从 Github 构建 Conda R包</title>
    <link href="https://blog.simon7.top/20220119/%E7%AE%80%E8%BF%B0%E4%BB%8E-github-%E6%9E%84%E5%BB%BA-conda-r%E5%8C%85/"/>
    <id>https://blog.simon7.top/20220119/%E7%AE%80%E8%BF%B0%E4%BB%8E-github-%E6%9E%84%E5%BB%BA-conda-r%E5%8C%85/</id>
    <published>2022-01-19T09:02:00.000Z</published>
    <updated>2022-01-19T09:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>示例/目的：安装R包 <strong>NMF</strong> 环境：<em>CentOS 7 ,Miniconda3, R 4.1.2 .</em></p></blockquote><span id="more"></span><h1 id="正文">正文</h1><p>当前 conda 里最新的 <code>r-nmf</code>包版本是<code>0.21</code>，而<code>Github</code>中的版本是 <code>0.30</code>,我所安装的某R包需要依赖 <code>nmf&gt;=0.23</code></p><p>为了容易复现，将创建一个新的 conda环境，同时也建议单独把构建环境隔离出来。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> conda-build conda-build conda-verifyconda skeleton cran https://github.com/renozao/NMFconda build <span class="token parameter variable">-c</span> conda-forge <span class="token parameter variable">-c</span> bioconda <span class="token parameter variable">--R</span> <span class="token number">4.1</span>.2 r-nmfconda <span class="token function">install</span> <span class="token parameter variable">-n</span> r-base <span class="token parameter variable">-c</span> <span class="token variable">$&#123;CONDA_PREFIX&#125;</span>/conda-bld r-nmf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><ol type="1"><li>在名为 <strong>conda-build</strong> 环境里安装<code>conda-build</code> 包 和<code>conda-verify（可选）</code></li><li><code>conda skeleton cran</code> 将构建一个R包的骨架包（skeletonpackage <a href="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a>），会从 Github缓存裸存储库（barerepository），并在家目录<code>~/</code>准备conda-build配方（condarecipe<a href="#fn2" class="footnote-ref" id="fnref2"role="doc-noteref"><sup>2</sup></a>）</li><li>准备完成就可以用<code>conda build</code>创建conda包，此处声明了依赖的源有conda-forge和bioconda，且使用4.1.2版本的R编译。</li><li>最后用<code>conda install</code>安装就可以了。此处生成的conda包的路径是<code>/opt/miniconda3/envs/conda-build/conda-bld</code>，环境变量<code>$&#123;CONDA_PREFIX&#125;</code>是当前所激活的虚拟环境的路径。</li></ol><h1 id="备注">备注</h1><p>详细信息可以查 conda的<a href="https://docs.conda.io">官方文档</a>/<a href="https://github.com/conda/conda">Github</a>/各种 issue 或者<code>conda 命令 --help</code></p><blockquote><p><a href="https://github.com/conda/conda">conda Github</a> <ahref="https://github.com/renozao/NMF">NMF Github</a> <ahref="https://anaconda.org/conda-forge/r-nmf">r-nmf anaconda</a> <ahref="https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/index.html">conda-build官方文档</a> <ahref="https://blog.csdn.net/SimonC17/article/details/122583145#t4">我常用的conda 环境--.condarc的配置</a></p></blockquote><section class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p>在官方文档中查看 <ahref="https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-r-pkgs.html#building-a-simple-package-with-conda-skeleton-cran">skeletonpackage</a><a href="#fnref1" class="footnote-back"role="doc-backlink">↩︎</a></p></li><li id="fn2" role="doc-endnote"><p>此处conda recipe为<code>~/r-nmf</code>，目录下有<code>bld.bat</code><code>build.sh</code> <code>meta.yaml</code> 三个文件<a href="#fnref2"class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;示例/目的：安装R包 &lt;strong&gt;NMF&lt;/strong&gt; 环境：&lt;em&gt;CentOS 7 ,
Miniconda3, R 4.1.2 .&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="Github" scheme="https://blog.simon7.top/tags/Github/"/>
    
    <category term="Conda" scheme="https://blog.simon7.top/tags/Conda/"/>
    
  </entry>
  
  <entry>
    <title>常用的Conda配置和操作</title>
    <link href="https://blog.simon7.top/20220119/%E5%B8%B8%E7%94%A8%E7%9A%84conda%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://blog.simon7.top/20220119/%E5%B8%B8%E7%94%A8%E7%9A%84conda%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C/</id>
    <published>2022-01-19T08:16:50.000Z</published>
    <updated>2022-01-19T08:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用的系统">使用的系统</h1><p>以 Linux 环境为标准，windows环境另作标记说明。 # 使用的软件 miniconda， 麻雀虽小，五脏俱全！ <span id="more"></span> # 用户管理 创建 miniconda组，并将用户添加到附属组。 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> miniconda<span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-G</span> miniconda username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> # 下载安装更改<code>/opt</code>权限，安装包下载到<code>/opt/download</code>，安装到<code>/opt/miniconda3</code><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> :miniconda /opt<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">2775</span> <span class="token parameter variable">-R</span> /opt<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/download<span class="token function">wget</span> <span class="token parameter variable">-P</span> /opt/download/  <span class="token parameter variable">-c</span> https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh<span class="token function">bash</span> /opt/download/miniconda3.sh<span class="token comment"># PATH: /opt/miniconda3</span><span class="token comment"># conda init : no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="修改镜像">修改镜像</h1><p>修改文件<code>/opt/miniconda3/.condarc</code>，末尾是代理设置，和一句更新命令<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ssl_verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">show_channel_urls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">report_errors</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">auto_activate_base</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">always_yes</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">channels</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> bioconda  <span class="token punctuation">-</span> conda<span class="token punctuation">-</span>forge  <span class="token punctuation">-</span> defaults<span class="token key atrule">default_channels</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<span class="token key atrule">custom_channels</span><span class="token punctuation">:</span>  <span class="token key atrule">conda-forge</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">msys2</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">bioconda</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">menpo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">pytorch</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">pytorch-lts</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">simpleitk</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<span class="token comment"># proxy_servers:</span><span class="token comment">#     http: http://127.0.0.1:10808</span><span class="token comment">#     https: http://127.0.0.1:10808</span><span class="token comment"># conda clean -i &amp;&amp; conda update --all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h1 id="清理并更新-conda">清理并更新 conda</h1><p>-a 所有/ -i 索引/ -p 没有在使用的包/ -t 缓存的.tar文件/ -q安静模式/-y 钝角√ <pre class="line-numbers language-none"><code class="language-none">conda clean -a &amp;&amp; conda update --all conda update -base conda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;使用的系统&quot;&gt;使用的系统&lt;/h1&gt;
&lt;p&gt;以 Linux 环境为标准，windows环境另作标记说明。 # 使用的软件 miniconda
， 麻雀虽小，五脏俱全！</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="Conda" scheme="https://blog.simon7.top/tags/Conda/"/>
    
  </entry>
  
  <entry>
    <title>简述新电脑开荒</title>
    <link href="https://blog.simon7.top/20211103/%E7%AE%80%E8%BF%B0%E6%96%B0%E7%94%B5%E8%84%91%E5%BC%80%E8%8D%92/"/>
    <id>https://blog.simon7.top/20211103/%E7%AE%80%E8%BF%B0%E6%96%B0%E7%94%B5%E8%84%91%E5%BC%80%E8%8D%92/</id>
    <published>2021-11-03T08:01:21.000Z</published>
    <updated>2021-11-03T08:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>给人开荒赚钱，给己开荒省钱！临近双十一，手下的笔记本也该更新换代了，就把自己的开荒操作大致记录下来，<strong>具体软件使用不是本文重点</strong>。有大厂出品的软件，也有一些小而巧的<ahref="https://www.appinn.com/">小众软件</a></p><span id="more"></span><ol type="1"><li><p>常规操作（获得较新的系统环境）Windows激活，Office激活，系统分区，系统更新，软件卸载，软件更新，驱动更新，漏洞补丁，还有电脑图标，启动项等等，在此没必要再造轮子，就不一一叙述。</p></li><li><p>安全防护（获得较习惯的安全环境，以个人习惯为准） Windows防护：关闭所有功能。 原厂防护：关闭自启，未卸载电脑管家：安装到C盘。（其他软件到D盘）</p></li><li><p>安装V2ray（获得更好的网络环境，通过某些VPN才能让scoop更好地连接Github<del>小声哔哔Free</del> ）由于不可抗力，在此也不能详细叙述，<del>一本github各位好自为之</del> 。提前配置 conda,git,scoop ：创建文件<code>C:\Users\&lt;USER&gt;\.condarc</code>参考 <ahref="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a></p><p><pre class="line-numbers language-none"><code class="language-none">ssl_verify: falseshow_channel_urls: truereport_errors: falseauto_activate_base: truealways_yes: truechannels:  - defaultsdefault_channels:  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;r  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;msys2custom_channels:  conda-forge: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  msys2: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  bioconda: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  menpo: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  pytorch: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  simpleitk: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloudproxy_servers:    http: http:&#x2F;&#x2F;127.0.0.1:10808    https: http:&#x2F;&#x2F;127.0.0.1:10808<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 创建文件<code>C:\Users\&lt;USER&gt;\.gitconfig</code><pre class="line-numbers language-none"><code class="language-none">[core]autocrlf &#x3D; false[http]sslVerify &#x3D; falseproxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:10808[https]sslVerify &#x3D; falseproxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:10808<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 修改<code>C:\Windows\System32\drivers\etc\hosts</code>参考<ahref="https://github.com/521xueweihan/GitHub520">github520</a></p></li><li><p>安装 <code>Scoop</code> （获得更干净的软件环境）自己去安装这个确实需要一点先验知识，所以还是要记录下。 以管理员权限运行<code>PowerShell</code>，并执行下面代码。</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$env</span>:SCOOP<span class="token operator">=</span><span class="token string">'D:\Scoop'</span><span class="token punctuation">[</span>environment<span class="token punctuation">]</span>::setEnvironmentVariable<span class="token punctuation">(</span><span class="token string">'SCOOP'</span>,<span class="token variable">$env</span>:SCOOP,<span class="token string">'User'</span><span class="token punctuation">)</span>set-executionpolicy remotesigned <span class="token parameter variable">-scope</span> currentuserSet-ItemProperty <span class="token string">'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem'</span> <span class="token parameter variable">-Name</span> <span class="token string">'LongPathsEnabled'</span> <span class="token parameter variable">-Value</span> <span class="token number">1</span>Invoke-Expression <span class="token punctuation">(</span>New-Object System.Net.WebClient<span class="token punctuation">)</span>.DownloadString<span class="token punctuation">(</span><span class="token string">'https://get.scoop.sh'</span><span class="token punctuation">)</span><span class="token comment"># 设置全局（如果需要）</span><span class="token comment"># $env:SCOOP_GLOBAL='D:\GlobalScoopApps'</span><span class="token comment"># [environment]::setEnvironmentVariable('SCOOP_GLOBAL',$env:SCOOP_GLOBAL,'Machine')</span><span class="token comment"># 检查 scoop</span>scoop checkup<span class="token comment"># scoop update *</span><span class="token comment"># scoop update scoop</span>scoop <span class="token function">install</span> <span class="token function">git</span> aria2 <span class="token comment"># 同时自动下载 7zip</span><span class="token comment"># 添加三个 bucket</span>scoop bucket <span class="token function">rm</span> extras <span class="token punctuation">;</span><span class="token punctuation">;</span> scoop bucket <span class="token function">add</span> extrasscoop bucket <span class="token function">add</span> <span class="token function">java</span>scoop bucket <span class="token function">add</span> dorado https://github.com/chawyehsu/dorado <span class="token comment"># scoop 代理</span>scoop config <span class="token function">rm</span> proxy <span class="token punctuation">;</span><span class="token punctuation">;</span> scoop config proxy <span class="token number">127.0</span>.0.1:10808<span class="token comment"># 关于 git 代理</span><span class="token comment"># git config --global http.proxy http://127.0.0.1:10808</span><span class="token comment"># git config --global https.proxy http://127.0.0.1:10808</span><span class="token comment"># git config --global --unset http.proxy</span><span class="token comment"># git config --global --unset https.proxy</span><span class="token comment"># 以上安装完成。以下看个人需求。</span>scoop <span class="token function">install</span> <span class="token function">sudo</span> <span class="token function">curl</span> scoop <span class="token function">install</span> vscode miniconda3 <span class="token comment">#conda clean --packages</span><span class="token comment">#conda clean --all</span><span class="token comment">#conda update --all</span><span class="token comment">#conda update -n base conda</span>scoop <span class="token function">install</span> motrix <span class="token comment"># 下载工具</span>scoop <span class="token function">install</span> mactype-np <span class="token comment"># 字体优化工具</span>scoop <span class="token function">install</span> potplayer <span class="token comment"># 视频播放器</span>scoop <span class="token function">install</span> quicklook <span class="token comment"># 快速预览工具</span>scoop <span class="token function">install</span> snipaste <span class="token comment"># 截图工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>安装 <code>Everything</code> + <code>Wox</code>（获得更强大的搜索环境）</p></li><li><p>其他 聊天（QQ/Tim/微信/腾讯会议） 输入法（搜狗） 浏览器（Chrome）视频（QQ影音） PE（BalenaEther） 远程（向日葵，蒲公英）压缩（bandizip<code>6.x版本无广告</code>）编程（SourceTree/Fiddler/Navicat） 学术（PDF阅读器，知云文献翻译，CAJViewer，EasyConnect，SciHub）网盘（百度网盘、阿里云盘、OneDriver）还有一点点（Xmind、Notion）</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;给人开荒赚钱，给己开荒省钱！
临近双十一，手下的笔记本也该更新换代了，就把自己的开荒操作大致记录下来，&lt;strong&gt;具体软件使用不是本文重点&lt;/strong&gt;。有大厂出品的软件，也有一些小而巧的&lt;a
href=&quot;https://www.appinn.com/&quot;&gt;小众软件&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>没有文件扩展名 Vbs</title>
    <link href="https://blog.simon7.top/20211102/%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D-vbs/"/>
    <id>https://blog.simon7.top/20211102/%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D-vbs/</id>
    <published>2021-11-02T02:24:03.000Z</published>
    <updated>2021-11-02T02:24:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方式一">方式一</h2><p>注册表中<code>HKEY_CLASSES_ROOT\.vbs</code> 将数据设置为<code>vbsfile</code> <span id="more"></span> <img src="vbs-1.jpg" /></p><hr /><h2 id="方式二">方式二</h2><p>创建文件<code>tmp.reg</code> <pre class="line-numbers language-none"><code class="language-none">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\.vbs]@&#x3D;&quot;vbsfile&quot;[HKEY_CLASSES_ROOT\.vbs\PersistentHandler]@&#x3D;&quot;&#123;5e941d80-bf96-11cd-b579-08002b30bfeb&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="方式三">方式三</h2><p>找到文件: <code>C:\WINDOWS\inf\wsh.inf</code>， 右键“安装”；开始→运行行里输入:<br /><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">regsvr32 urlmon.dll shdocvw.dll jscript.dll vbscript.dll /s <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;方式一&quot;&gt;方式一&lt;/h2&gt;
&lt;p&gt;注册表中&lt;code&gt;HKEY_CLASSES_ROOT\.vbs&lt;/code&gt; 将数据设置为
&lt;code&gt;vbsfile&lt;/code&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Vbs" scheme="https://blog.simon7.top/tags/Vbs/"/>
    
  </entry>
  
  <entry>
    <title>R 实现元素排列与组合</title>
    <link href="https://blog.simon7.top/20211027/r-%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/"/>
    <id>https://blog.simon7.top/20211027/r-%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/</id>
    <published>2021-10-27T06:25:38.000Z</published>
    <updated>2021-10-27T06:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="r-实现元素排列与组合">R 实现元素排列与组合</h1><p>实现组合(combination)可以使用<code>combn(x,n)</code>，大多时候需要转置<code>t(combn(x,n))</code>，<code>x</code>可以是向量或数字。</p><p>实现元素全排列(permutation)就自己参考一部分<code>combn()</code>函数写了一个<code>permt</code>。<code>x</code>可以是向量或数字。<span id="more"></span> <pre class="line-numbers language-r" data-language="r"><code class="language-r">permt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>is.numeric<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> length<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1L</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> trunc<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> x <span class="token operator">&lt;-</span> seq_len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  y <span class="token operator">=</span> data.frame<span class="token punctuation">(</span><span class="token string">'v1'</span> <span class="token operator">=</span> x<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> return<span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">:</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    y <span class="token operator">=</span> as.data.frame<span class="token punctuation">(</span>      cbind<span class="token punctuation">(</span>        colname <span class="token operator">=</span> rep<span class="token punctuation">(</span>x<span class="token punctuation">,</span> each<span class="token operator">=</span>nrow<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        y      <span class="token punctuation">)</span>    <span class="token punctuation">)</span>    names<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">[</span>names<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'colname'</span><span class="token punctuation">]</span> <span class="token operator">&lt;-</span> paste0<span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  y<span class="token punctuation">&#125;</span><span class="token comment">#  一个萝卜一个坑。萝卜白菜仨个坑：</span>permt<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>permt<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>permt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;r-实现元素排列与组合&quot;&gt;R 实现元素排列与组合&lt;/h1&gt;
&lt;p&gt;实现组合(combination)可以使用&lt;code&gt;combn(x,n)&lt;/code&gt;，大多时候需要转置&lt;code&gt;t(combn(x,n))&lt;/code&gt;，&lt;code&gt;x&lt;/code&gt;可以是向量或数字。&lt;/p&gt;
&lt;p&gt;实现元素全排列(permutation)就自己参考一部分&lt;code&gt;combn()&lt;/code&gt;函数写了一个&lt;code&gt;permt&lt;/code&gt;。&lt;code&gt;x&lt;/code&gt;可以是向量或数字。</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R语言" scheme="https://blog.simon7.top/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>TodoMVC应用</title>
    <link href="https://blog.simon7.top/20211018/todomvc%E5%BA%94%E7%94%A8/"/>
    <id>https://blog.simon7.top/20211018/todomvc%E5%BA%94%E7%94%A8/</id>
    <published>2021-10-18T06:14:28.000Z</published>
    <updated>2021-10-18T06:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用VueJs实现官方的 <a href="http://todomvc.com/">TodoMVC</a>示例，将其数据存储到后端数据库，并部署上线。 <ahref="https://vuejs.org/v2/examples/todomvc.html">示例</a></p><span id="more"></span><ul><li><a href="https://github.com/nsleep/todomvc">我的项目地址</a></li><li><a href="https://simon-todomvc.herokuapp.com/">我的演示</a></li></ul><blockquote><p>环境 Git、Node、npm、heroku</p></blockquote><h1 id="一-todomvc-应用">一、 TodoMVC 应用</h1><h2 id="下载模板">1. 下载模板</h2><p>GitHub<ahref="https://github.com/tastejs/todomvc-app-template">下载</a>模板</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:tastejs/todomvc-app-template.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取支持文件">2. 获取支持文件</h2><p>通过<code>npm</code>下载模板的CSS和JS文件，以及之后要用到的<code>Vue.js</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> todomvc-app-template<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> <span class="token function">install</span> vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用vuejs实现todo">3. 使用Vuejs实现Todo</h2><p>主要修改<code>js/app.js</code>和<code>index.html</code>两个文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>js/app.js</span></div><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 数据</span>    <span class="token keyword">let</span> todos<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'睡觉'</span><span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'打豆豆'</span><span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/*/ 全局自定义指令,自动获取焦点    Vue.directive('focus', &#123;        inserted: function (el) &#123;              el.focus();        &#125;    &#125;);*/</span>    <span class="token comment">// vue实例</span>    window<span class="token punctuation">.</span>app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#todoapp'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">todos</span><span class="token operator">:</span>todos<span class="token punctuation">,</span>            <span class="token literal-property property">currentEditing</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token literal-property property">filterState</span><span class="token operator">:</span><span class="token string">'all'</span><span class="token punctuation">,</span>            <span class="token literal-property property">toggleAllstate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">leftCount</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">.</span>length            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">filterTodos</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string">'active'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'completed'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 全选的联动效果</span>            <span class="token function-variable function">toggleState</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 添加任务</span>            <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> todoText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>todoText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> lastTodo<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> id<span class="token operator">=</span>lastTodo<span class="token operator">?</span>lastTodo<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span>id<span class="token punctuation">,</span>                    <span class="token literal-property property">title</span><span class="token operator">:</span>todoText<span class="token punctuation">,</span>                    <span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 点击全部完成或者未完成</span>            <span class="token function">toggleAll</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> checked<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>completed<span class="token operator">=</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 删除单个任务项</span>            <span class="token function">removeTodo</span><span class="token punctuation">(</span><span class="token parameter">delIndex<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>delIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 显示所有未完成任务数(删除所有已完成)</span>            <span class="token function">removeAllDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">;</span><span class="token comment">//return true,即item.completed为false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 保存编辑项</span>            <span class="token function">saveEdit</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> editText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果为空,直接删除这个item</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>editText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 如果不为空,修改title的值,然后去除eiditing样式</span>                item<span class="token punctuation">.</span>title<span class="token operator">=</span>editText<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>currentEditing<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 局部自定义属性</span>            <span class="token literal-property property">editingFocus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">focus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 路由状态切换</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> hash<span class="token operator">=</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'all'</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>app<span class="token punctuation">.</span>filterState<span class="token operator">=</span>hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 页面第一次进来,保持状态</span>    window<span class="token punctuation">.</span><span class="token function">onhashchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><div class="caption"><span>index.html</span></div><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Template • TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-app-css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- CSS overrides - remove if you don't need it --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/app.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>What needs to be done?<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>addTodo<span class="token punctuation">'</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This section should be hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>todos.length<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleAll<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleState<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mark all as complete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- These are here just to show the structure of the list items --></span><span class="token comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --></span><span class="token comment">&lt;!-- vue列表渲染 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) of filterTodos<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;completed:item.completed,editing:item===currentEditing&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.completed<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">@dblclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentEditing=item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeTodo(index,$event)<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.title<span class="token punctuation">'</span></span> <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.esc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>currentEditing=null<span class="token punctuation">'</span></span> <span class="token attr-name">v-editing-focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item===currentEditing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This footer should hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This should be `0 items left` by default --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>&#123;&#123;leftCount&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 个待办<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Remove this if you don't implement routing --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState==='all'&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState==='active'&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>未完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState==='completed'&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/completed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Hidden if no completed items are left ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear-completed<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeAllDone<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>清除已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Double-click to edit a todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Remove</span> <span class="token attr-name">the</span> <span class="token attr-name">below</span> <span class="token attr-name">line</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Template by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://sindresorhus.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sindre Sorhus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Change</span> <span class="token attr-name">this</span> <span class="token attr-name">out</span> <span class="token attr-name">with</span> <span class="token attr-name">your</span> <span class="token attr-name">name</span> <span class="token attr-name">and</span> <span class="token attr-name">url</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Created by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>you<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Part of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Scripts here. Don't remove ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，完成了本地Todo。</p><h2 id="配置本地服务">4. 配置本地服务</h2><p>由于要在<code>heroku</code>上部署，这一节将使用<code>Node</code>创建<code>Web</code>服务。本节有一部分参考<ahref="https://github.com/heroku/node-js-getting-started.git">heroku的项目</a>，使用的是Web 开发框架<a href="https://www.expressjs.com.cn/">Express</a></p><p>通过<code>npm</code>下载<code>express</code>和<code>ejs</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express<span class="token function">npm</span> <span class="token function">install</span> ejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在项目根目录下添加<code>index.js</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">5000</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span> <span class="token constant">PORT</span> <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示</p><pre><code>Listening on 5000</code></pre><p>打开 <a href="http://localhost:5000">http://localhost:5000</a>或者<ahref="http://127.0.0.1:5000">http://127.0.0.1:5000</a>访问本地服务，使用本地IP也是可以的。</p><h2 id="部署到heroku">5. 部署到heroku</h2><p>部署之前需要在项目根目录添加一个文件<code>Procfile</code></p><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>Procfile</span></div><code class="language-bash">web: <span class="token function">node</span> index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="通过github部署">1). 通过GitHub部署</h3><p>先上传到<code>Github</code>，然后登录<ahref="https://dashboard.heroku.com/apps">heroku网站</a>在web控制台配置里配置即可。</p><h3 id="直接在本地上传部署">2). 直接在本地上传部署</h3><p>下载<ahref="https://devcenter.heroku.com/articles/heroku-cli#download-and-install">HerokuCLI</a></p><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>Windows命令</span></div><code class="language-bash">heroku create ::创建<span class="token function">git</span> push heroku master ::部署heroku ps:scale <span class="token assign-left variable">web</span><span class="token operator">=</span><span class="token number">1</span> ::运行实例heroku <span class="token function">open</span> ::打开预览heroku logs <span class="token parameter variable">--tail</span> ::网站运行日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他可能用到的</p><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>Windows命令</span></div><code class="language-bash">heroku <span class="token builtin class-name">local</span> web ::本地启动<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-u</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span>  <span class="token string">"Todo"</span><span class="token function">git</span> push heroku master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端数据库">6. 后端数据库</h2><p>在这里使用的<code>postgresql</code>数据库。在<code>heroku</code>中添加<code>postgresql</code>数据库。<ahref="https://elements.heroku.com/addons/heroku-postgresql">查看文档</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku addons:create heroku-postgresql:hobby-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看数据库(postgresql)。通过以下两种方式之一检索PG连接字符串<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku pg:credentials DATABASEheroku config <span class="token parameter variable">-s</span> <span class="token operator">|</span> <span class="token function">grep</span> DATABASE_URL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>设置主数据库(postgresql)，如果存在多个数据库 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku pg:promote HEROKU_POSTGRESQL_RED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>查看数据库使用信息 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku pg:info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h2 id="封装对postgresql的增删改查基本操作">7.封装对postgresql的增删改查基本操作</h2><ul><li><ahref="https://blog.csdn.net/cheneypao/article/details/51378053">Nodejs对postgresql基本操作的封装·cheneypao·CSDN</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>PG.js</span></div><code class="language-javascript"><span class="token keyword">var</span> pg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> conString <span class="token operator">=</span> <span class="token string">"postgres://username:password@localhost/databasename"</span><span class="token punctuation">;</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pg<span class="token punctuation">.</span>Client</span><span class="token punctuation">(</span>conString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> <span class="token function-variable function">PG</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"准备向****数据库连接..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getConnection</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'could not connect to postgres'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT NOW() AS "theTime"'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error running query'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hbdfxt数据库连接成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 查询函数</span><span class="token comment">//@param str 查询语句</span><span class="token comment">//@param value 相关值</span><span class="token comment">//@param cb 回调函数</span><span class="token keyword">var</span> <span class="token function-variable function">clientHelper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>                <span class="token function">cb</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//增</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"insert into "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">") values("</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//删除</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"delete from "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span> <span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//修改</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param mainfields 条件字段和值，json格式</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>mainfields<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"update "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" set "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">in</span> mainfields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mainfields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//查询</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式</span><span class="token comment">//@param returnfields 返回字段</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">select</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>returnfields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> returnStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>returnfields<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        returnStr <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        returnStr<span class="token operator">=</span> returnfields<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"select "</span><span class="token operator">+</span>returnStr<span class="token operator">+</span> <span class="token string">" from "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">var</span> pgclient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./PG.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引用上述文件</span>pgclient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用上述四个函数即可</span>pgclient<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'userinfo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> admin<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note warning"><p>创建数据库表可以在<code>PG.js</code>中完善。</p></div><h2 id="后续">8. 后续</h2><p>以上的代码并不符合我的预期，在之后我对代码稍作修改。</p><details><summary>js/app.js(折叠)</summary><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>js/app.js</span></div><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> todos<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// vue实例</span>    window<span class="token punctuation">.</span>app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#todoapp'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">todos</span><span class="token operator">:</span> todos<span class="token punctuation">,</span>            <span class="token literal-property property">currentEditing</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token literal-property property">filterState</span><span class="token operator">:</span><span class="token string">'all'</span><span class="token punctuation">,</span>            <span class="token literal-property property">toggleAllstate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// this.getTodo();</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">leftCount</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">.</span>length            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">filterTodos</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string">'active'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'completed'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 全选的联动效果</span>            <span class="token function-variable function">toggleState</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/getTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//console.log(res);</span>_this<span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>_this<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span>item<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据库的Todos：\n'</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_this.todos：\n'</span><span class="token punctuation">,</span>_this<span class="token punctuation">.</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 设置Owner</span>            <span class="token function">setOwner</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> ownerText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前文本的值</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ownerText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> ownerText<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 添加任务</span>            <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> todoText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前文本的值</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>todoText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> lastTodo<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> id<span class="token operator">=</span>lastTodo<span class="token operator">?</span>lastTodo<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span>id<span class="token punctuation">,</span>                    <span class="token literal-property property">title</span><span class="token operator">:</span>todoText<span class="token punctuation">,</span>                    <span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//owner: this.owner</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/addTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>todoText<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 全部完成/全不完成</span>            <span class="token function">toggleAll</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> checked<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>completed<span class="token operator">=</span>checked<span class="token punctuation">)</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/toggleAll'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span> checked<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// check单个任务项</span>            <span class="token function">checkTodo</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">let</span> todo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">// todo.completed = !(todo.completed)</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/changeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">filter</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> todo<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_this<span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 删除单个任务项</span>            <span class="token function">removeTodo</span><span class="token punctuation">(</span><span class="token parameter">delIndex<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>delIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/removeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>data<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span>data<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_this<span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 显示所有未完成任务数(删除所有已完成)</span>            <span class="token function">removeAllDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">;</span><span class="token comment">//return true,即item.completed为false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/removeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 保存编辑项</span>            <span class="token function">saveEdit</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> editText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果为空,直接删除这个item</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>editText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeTodo</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>event<span class="token punctuation">)</span>                    <span class="token comment">//return this.todos.splice(index,1);</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 如果不为空,修改title的值,然后去除eiditing样式</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/changeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">editText</span><span class="token operator">:</span>editText<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">filter</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>item<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                item<span class="token punctuation">.</span>title<span class="token operator">=</span>editText<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>currentEditing<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 局部自定义属性</span>            <span class="token literal-property property">editingFocus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">focus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 路由状态切换</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> hash<span class="token operator">=</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'all'</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>app<span class="token punctuation">.</span>filterState<span class="token operator">=</span>hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 页面第一次进来,保持状态</span>    window<span class="token punctuation">.</span><span class="token function">onhashchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>index.html (折叠)</summary><blockquote><pre class="line-numbers language-markup" data-language="markup"><div class="caption"><span>index.html</span></div><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Template • TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-app-css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- CSS overrides - remove if you don't need it --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/app.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的名字<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0 1px 1px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.075<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -12px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>setOwner<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>What needs to be done?<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>addTodo<span class="token punctuation">'</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This section should be hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>todos.length<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleAll<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleState<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mark all as complete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- These are here just to show the structure of the list items --></span><span class="token comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --></span><span class="token comment">&lt;!-- vue列表渲染 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) of filterTodos<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;completed:item.completed,editing:item===currentEditing&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>checkTodo(index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.completed<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">@dblclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentEditing=item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeTodo(index,$event)<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.title<span class="token punctuation">'</span></span> <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.esc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>currentEditing=null<span class="token punctuation">'</span></span> <span class="token attr-name">v-editing-focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item===currentEditing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This footer should hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This should be `0 items left` by default --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>&#123;&#123;leftCount&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 个待办<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Remove this if you don't implement routing --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState==='all'&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState==='active'&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>未完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState==='completed'&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/completed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Hidden if no completed items are left ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear-completed<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeAllDone<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>清除已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Double-click to edit a todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Remove</span> <span class="token attr-name">the</span> <span class="token attr-name">below</span> <span class="token attr-name">line</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Template by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://sindresorhus.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sindre Sorhus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Change</span> <span class="token attr-name">this</span> <span class="token attr-name">out</span> <span class="token attr-name">with</span> <span class="token attr-name">your</span> <span class="token attr-name">name</span> <span class="token attr-name">and</span> <span class="token attr-name">url</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Created by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>you<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Part of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Scripts here. Don't remove ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>index.js(折叠)</summary><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">5000</span><span class="token keyword">const</span> tableNme <span class="token operator">=</span> <span class="token string">'todos'</span><span class="token keyword">var</span> cb<span class="token operator">=</span>console<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token keyword">var</span> pgclient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./PG.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引用文件</span>pgclient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getTodo'</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">//async</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fields:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'completed'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/addTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/toggleAll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'toggleAll'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/removeTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'removeTodo:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">,</span> <span class="token literal-property property">owner</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/saveEdit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'saveEdit:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/changeTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'changeTodo.query:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 直接在地址栏输入，以添加数据表，createTable/deletTable 这两个操作比较危险，仅建议在开发时使用</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/createTable'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> que <span class="token operator">=</span> pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'CREATE TABLE "public"."todos" (  "id" serial4 ,  "title" varchar(255) NOT NULL,  "completed" bool NOT NULL,  "owner" varchar(255) NOT NULL,  PRIMARY KEY ("id"));'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/deletTable'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> que <span class="token operator">=</span> pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'DROP TABLE todos;'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span> <span class="token constant">PORT</span> <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>PG.js(折叠)</summary><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">var</span> pg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  heroku pg:credentials DATABASE //查询数据库信息</span><span class="token comment">// heroku config -s | grep DATABASE_URL</span><span class="token keyword">var</span> conString <span class="token operator">=</span> <span class="token string">"postgres://UesrName:PassWord@Host:Port/DataBase"</span><span class="token punctuation">;</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pg<span class="token punctuation">.</span>Client</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">connectionString</span><span class="token operator">:</span> conString<span class="token punctuation">,</span><span class="token literal-property property">ssl</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">PG</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"准备向postgres数据库连接..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getConnection</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'could not connect to postgres'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT NOW() AS "theTime"'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error running query'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功..."</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>theTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 执行者函数</span><span class="token comment">//@param str 查询语句</span><span class="token comment">//@param value 相关值</span><span class="token comment">//@param cb 回调函数</span><span class="token keyword">var</span> <span class="token function-variable function">clientHelper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token string">"err: "</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>                <span class="token function">cb</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                 <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//增</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"insert into "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">") values("</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span><span class="token comment">// str += ";";</span><span class="token comment">// str= "insert into todos (id,title,completed) values ($1::int, $2::varchar, $3::bool)"</span><span class="token comment">// value = [1,'吃饭',false]</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//删除</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"delete from "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span> <span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//修改</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param mainfields 条件字段和值，json格式</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>mainfields<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"update "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" set "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">in</span> mainfields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mainfields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查询</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式 【筛选，例如：&#123;age:25&#125;,即仅查询age=25的数据】</span><span class="token comment">//@param returnfields 返回字段 数组格式【表中字段名】</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">select</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>returnfields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> returnStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>returnfields<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        returnStr <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        returnStr<span class="token operator">=</span> returnfields<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"select "</span><span class="token operator">+</span>returnStr<span class="token operator">+</span> <span class="token string">" from "</span><span class="token operator">+</span> tablename<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str <span class="token operator">+=</span> <span class="token string">" where "</span><span class="token operator">+</span>field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//str = "select * from todo;";//######</span><span class="token comment">//str = "DELETE FROM todo;";//######</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//自定义</span><span class="token comment">//@param str SQL语句</span><span class="token comment">//@param value </span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">query</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>package.json(折叠)</summary><blockquote><pre class="line-numbers language-json" data-language="json"><div class="caption"><span>package.json</span></div><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node index.js"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"node test.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.19.2"</span><span class="token punctuation">,</span>    <span class="token property">"body-parser"</span><span class="token operator">:</span> <span class="token string">"^1.19.0"</span><span class="token punctuation">,</span>    <span class="token property">"ejs"</span><span class="token operator">:</span> <span class="token string">"^2.7.4"</span><span class="token punctuation">,</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.1"</span><span class="token punctuation">,</span>    <span class="token property">"express-session"</span><span class="token operator">:</span> <span class="token string">"^1.17.1"</span><span class="token punctuation">,</span>    <span class="token property">"http-server"</span><span class="token operator">:</span> <span class="token string">"^0.12.3"</span><span class="token punctuation">,</span>    <span class="token property">"node-postgres"</span><span class="token operator">:</span> <span class="token string">"^0.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"pbkdf2-password"</span><span class="token operator">:</span> <span class="token string">"^1.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"pg"</span><span class="token operator">:</span> <span class="token string">"^8.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"todomvc-app-css"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"todomvc-common"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.6.11"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><h2 id="x.-关于登录">X. 关于登录</h2><p>关于登录操作官网有个<ahref="https://github.com/expressjs/express/blob/master/examples/auth/index.js">示例</a>下载两个模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> pbkdf2-password<span class="token function">npm</span> <span class="token function">install</span> express-session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="参考资料">参考资料</h1><ul><li><a href="http://todomvc.com/">Todomvc</a></li><li><ahref="https://www.cnblogs.com/EricZLin/p/9369260.html">框架入门经典项目TodoMVC·澎湃_L·博客园</a></li><li><ahref="https://vuejs.org/v2/examples/todomvc.html">vuejs示例</a></li><li><ahref="https://blog.csdn.net/cheneypao/article/details/51378053">Nodejs对postgresql基本操作的封装·cheneypao·CSDN</a></li><li><a href="https://www.jianshu.com/p/7bc34e56fa39">Heroku使用教程</a></li><li><ahref="https://www.jianshu.com/p/5007e533eff9">使用Node.js在Heroku上开始</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用VueJs实现官方的 &lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt;
示例，将其数据存储到后端数据库，并部署上线。 &lt;a
href=&quot;https://vuejs.org/v2/examples/todomvc.html&quot;&gt;示例&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Django创建站点(1)</title>
    <link href="https://blog.simon7.top/20210907/%E4%BD%BF%E7%94%A8django%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9-1/"/>
    <id>https://blog.simon7.top/20210907/%E4%BD%BF%E7%94%A8django%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9-1/</id>
    <published>2021-09-07T03:37:43.000Z</published>
    <updated>2021-09-07T03:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速建立站点">快速建立站点</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新的conda环境</span>conda create <span class="token parameter variable">-n</span> django python django<span class="token comment"># 创建新站点</span>django-admin startproject locallibrary<span class="token builtin class-name">cd</span> locallibrary<span class="token comment"># 运行web服务器</span>python ./manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><div class="note info"><p>conda(4.10.3) 虚拟环境 - python: 3.7 - Django: 2.2.5 - mysqlclient:1.3.14</p><p><code>mysqlclient</code> 是可选的，没有支持最高版本的<code>Python</code> 。 <code>Django</code> 默认使用的数据库是<code>Sqlit3</code>。</p></div><h2 id="学习目标...">学习目标...</h2><ul><li>运用Django的工具创建网站和应用的框架。</li><li>启动和停止开发用的服务器。</li><li>创建模型（models）用来代表应用里的数据。</li><li>运用Django的admin站点填充网站数据。</li><li>面对不同的网络请求，创建视图函数（views）取回相应的数据。并把数据用模板（templates）渲染成HTML展示在浏览器里。</li><li>创建网络分发器，将不同的URL模式分发给特定的视图函数（views）。</li><li>添加用户认证和会话（sessions）管理网站行为和进入权限。</li><li>使用表单。</li><li>为应用编写测试。</li><li>有效运用Django的安全系统。</li><li>把应用布置到生产环境中。</li></ul><h2 id="建立新的应用">建立新的应用</h2><p>框架搭建网站的过程： -使用<code>django-admin</code>工具创建工程的文件夹，基本的文件模板和工程管理脚本（<code>manage.py</code>）。- 用<code>manage.py</code> 创建一个或多个应用。 - 在工程里注册新的应用。- 为每个应用分配url。</p><p>locallibrary项目的子文件夹是整个网站的进入点： -<strong>settings.py</strong>包含所有的网站设置。这是可以注册所有创建的应用的地方，也是静态文件，数据库配置的地方，等等。- <strong>urls.py</strong>定义了网站url到view的映射。虽然这里可以包含所有的url，但是更常见的做法是把应用相关的url包含在相关应用中，你可以在接下来的教程里看到。- <strong>wsgi.py</strong>帮助Django应用和网络服务器间的通讯。你可以把这个当作模板。 -<strong>manage.py</strong>脚本可以创建应用，和数据库通讯，启动开发用网络服务器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建catalog应用框架</span>python manage.py startapp catalog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>catalog应用框架需要后续的补充修改，以达到自己的预期 -<strong>views.py</strong> 视图 - <strong>models.py</strong> 模型 -<strong>tests.py</strong> 测试 - <strong>admin.py</strong> 网站管理设置- <strong>apps.py</strong> 注册应用 - <strong>migration</strong>文件夹，用来存储“migrations”——当你修改你的数据模型时，这个文件会自动升级你的数据库。- 可能需要补充 url映射，网站模板，静态文件</p><h3id="站点的setting.py文件配置">站点的<code>setting.py</code>文件配置</h3><ul><li><strong>ALLOWED_HOSTS</strong> 域名白名单，ALLOWED_HOSTS =['127.0.0.1']</li><li><strong>INSTALLED_APPS</strong> 注册应用。 <pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>    <span class="token string">'catalog.apps.CatalogConfig'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>DATABASES</strong> 数据库，在<ahref="https://docs.djangoproject.com/en/3.2/ref/settings/#databases">Django文档</a>里找到详细的配置数据库的方法</li><li><strong>TIME_ZONE</strong> 时区<code>TIME_ZONE = 'Asia/Shanghai'</code></li><li><strong>SECRET_KEY</strong> 密钥</li><li><strong>DEBUG</strong> 日志，是否在网页显示错误信息</li></ul><h3id="站点的urls.py文件配置-url映射器">站点的<code>urls.py</code>文件配置URL映射器</h3><ul><li>将带有 <code>catalog/</code> 的请求转发到模块<code>catalog.urls</code> (使用相对路径 URL<strong>/catalog/urls.py</strong>)。 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Use include() to add paths from the catalog application</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> pathurlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'catalog/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'catalog.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>网站的根URL(例：<code>127.0.0.1:8000</code>)重定向到该URL：<code>127.0.0.1:8000/catalog/</code><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Add URL maps to redirect the base URL to our application</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> RedirectViewurlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> RedirectView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'/catalog/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在开发期间启用静态文件的服务 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Use static() to add url mapping to serve static files during development (only)</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> staticurlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>STATIC_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>STATIC_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数据库迁移">数据库迁移</h3><p>Django使用对象关系映射器（ORM），会跟踪更改并创建数据库迁移脚本，运行以下命令来定义数据库中这些模型的表（确保你位于包含manage.py 的目录中): <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py makemigrationspython manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><div class="note warning"><h3id="每当进行重大更改时都应重新运行迁移并重新测试站点">每当进行重大更改时，都应重新运行迁移并重新测试站点。</h3></div><div class="note success"><p><strong>自此站点的整体骨架构建完成并运行，是时候开始编写代码，让这个网站做它应该做的事情了。</strong></p></div><h2 id="参考文献">参考文献</h2><p>本文依据<ahref="https://developer.mozilla.org/zh-CN/docs/learn/Server-side/Django">此教程</a>所撰</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;快速建立站点&quot;&gt;快速建立站点&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 创建新的conda环境&lt;/span&gt;
conda create &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; django python django

&lt;span class=&quot;token comment&quot;&gt;# 创建新站点&lt;/span&gt;
django-admin startproject locallibrary
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; locallibrary

&lt;span class=&quot;token comment&quot;&gt;# 运行web服务器&lt;/span&gt;
python ./manage.py runserver&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.simon7.top/tags/Python/"/>
    
    <category term="Django" scheme="https://blog.simon7.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>在博客中插入数学公式</title>
    <link href="https://blog.simon7.top/20210903/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>https://blog.simon7.top/20210903/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</id>
    <published>2021-09-03T09:11:04.000Z</published>
    <updated>2021-09-03T09:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考于：<ahref="https://theme-next.js.org/docs/third-party-services/math-equations">Next主题</a> <span id="more"></span></p><ol type="1"><li><p>首先，在主题配置文件中设置<code>mathjax</code>做为渲染引擎.<pre class="line-numbers language-base" data-language="base"><div class="caption"><span>next/_config.yml</span></div><code class="language-base">math:  ...  mathjax:    enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>然后你需要卸载原来的渲染器<code>hexo-renderer-marked</code>，然后安装<code>hexo-renderer-pandoc</code>：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-renderer-marked <span class="token function">npm</span> i hexo-renderer-pandoc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考于：&lt;a
href=&quot;https://theme-next.js.org/docs/third-party-services/math-equations&quot;&gt;Next
主题&lt;/a&gt;</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>快速判断7的倍数</title>
    <link href="https://blog.simon7.top/20210903/%E5%BF%AB%E9%80%9F%E5%88%A4%E6%96%AD7%E7%9A%84%E5%80%8D%E6%95%B0/"/>
    <id>https://blog.simon7.top/20210903/%E5%BF%AB%E9%80%9F%E5%88%A4%E6%96%AD7%E7%9A%84%E5%80%8D%E6%95%B0/</id>
    <published>2021-09-03T08:42:58.000Z</published>
    <updated>2021-09-03T08:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>快速判断7的倍数 &gt;如果一个数被7整除，那么它减去一个7的倍数所得的结果也能被7整除。<span id="more"></span></p><h2 id="两种方法">两种方法</h2><p><strong>方法一</strong>：掐掉个位再减去掐掉数字的两倍 例： 6615</p><p><span class="math display">\[\begin{aligned}661 - 2 * 5 &amp;= 651 \\65 - 2 * 1 &amp;= 63 \\6 - 2 * 3 &amp;= 0 \\\end{aligned}\]</span></p><p>当然，很明显 <code>63=7*9</code> 。所以当最后的数字是 0 或者是 7的倍数时，该数可以判定为 7 的倍数；否则不是 7 的倍数。</p><p><strong>方法二</strong>：掐掉后三位再减去掐掉的数字 例： 2222640</p><p><span class="math display">\[\begin{aligned}2222 - 640 &amp;= 1582 \\1 - 582 &amp;= -581 \\\end{aligned}\]</span></p><p>此时再用法一，判断 581 是否为 7 的倍数</p><p><span class="math display">\[\begin{aligned}58 - 2 * 1 &amp;= 56 \\5 - 2 * 6 &amp;= -7 \\\end{aligned}\]</span></p><p>很明显， <code>56=7*8</code> ，所以 2222640 是 7 的倍数。</p><h2 id="简要分析">简要分析</h2><p><strong>方法一</strong>：假设 <spanclass="math inline">\(X=10k+a_1\)</span> ， (<spanclass="math inline">\(a_1\)</span> 为个位数)，则</p><p><span class="math display">\[\begin{equation}\begin{aligned}X-21a_1&amp;= (10k + a_1) - 21a_1 \\&amp;= 10k - 20a_1 \\&amp;= 10(k-2a_1) \\\end{aligned}\end{equation}\]</span></p><p>若 <span class="math inline">\(X\)</span> 可以被7整除，则必然有 $X'=k-2a_1$ 可以被7整除</p><p><strong>方法二</strong>：假设 <span class="math inline">\(X=1000k +a_3\)</span>， (<span class="math inline">\(a_3\)</span>为后三位数)，则</p><p><span class="math display">\[\begin{equation}\begin{aligned}X+k-k&amp;= (1000k + a_3) +k -k \\&amp;= 1001k + a_3 -k \\&amp;= (7*11*13)·k - (k -a_3) \\\end{aligned}\end{equation}\]</span></p><p>若 <span class="math inline">\(X\)</span> 可以被7整除，则必然有 $X'=k -a_3$ 可以被7整除</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快速判断7的倍数 &amp;gt;
如果一个数被7整除，那么它减去一个7的倍数所得的结果也能被7整除。</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 程序统计时间的三种方式</title>
    <link href="https://blog.simon7.top/20210902/python-%E7%A8%8B%E5%BA%8F%E7%BB%9F%E8%AE%A1%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://blog.simon7.top/20210902/python-%E7%A8%8B%E5%BA%8F%E7%BB%9F%E8%AE%A1%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-09-02T06:45:11.000Z</published>
    <updated>2021-09-02T06:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>统计程序执行时间有三种方式： 1. <code>datetime.datetime.now()</code>通过当前日期计算时间差； 2.<code>time.time()</code>通过时间戳计算时间差； 3.<code>time.clock()</code>获取CPU执行时间 （自python38中被移除，取而替代的是 <code>time.perf_counter()</code> 或<code>time.process_time()</code>）</p><span id="more"></span><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span><span class="token keyword">import</span> datetimestarttime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ...</span>endtime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>endtime <span class="token operator">-</span> starttime<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span class="token comment"># 方式二</span><span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ...</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span class="token comment"># 方式三 time.clock()</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ...</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> end<span class="token operator">-</span>start<span class="token comment"># 方式三 time.perf_counter()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="time.perf_counter">time.perf_counter()</h2><p>（以小数表示的秒为单位）返回一个性能计数器的值，即用于测量较短持续时间的具有最高有效精度的时钟。它会包括睡眠状态所消耗的时间并且作用于全系统范围。返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。相似的，<code>time.perf_counter_ns()</code>返回纳秒。</p><h2 id="time.process_time">time.process_time()</h2><p>（以小数表示的秒为单位）返回当前进程的系统和用户 CPU 时间的总计值。它不包括睡眠状态所消耗的时间。 根据定义它只作用于进程范围。返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。相似的，<code>time.process_time_ns()</code>返回纳秒。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;统计程序执行时间有三种方式： 1. &lt;code&gt;datetime.datetime.now()&lt;/code&gt;
通过当前日期计算时间差； 2.
&lt;code&gt;time.time()&lt;/code&gt;通过时间戳计算时间差； 3.
&lt;code&gt;time.clock()&lt;/code&gt;获取CPU执行时间 （自python38
中被移除，取而替代的是 &lt;code&gt;time.perf_counter()&lt;/code&gt; 或
&lt;code&gt;time.process_time()&lt;/code&gt;）&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="python" scheme="https://blog.simon7.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>翻译CHM文件</title>
    <link href="https://blog.simon7.top/20210314/%E7%BF%BB%E8%AF%91chm%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.simon7.top/20210314/%E7%BF%BB%E8%AF%91chm%E6%96%87%E4%BB%B6/</id>
    <published>2021-03-14T11:58:39.000Z</published>
    <updated>2021-03-14T11:58:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>CHM文件是 Windows系统下的帮助文档。而它的内容大多是英文，对于四级没过的小学生很不友好，所以在这里记下翻译CHM文件的历程。<span id="more"></span> 在windows下，CHM文件是调用 <code>C:\windows\hh.exe</code>来打开的，它是<code>HTML Help Workshop</code>命令行工具同样的，他也可以做反编译！ <pre class="line-numbers language-none"><code class="language-none">HH.EXE -decompile &lt;输出路径&gt;  &lt;目标chm文件&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>虽然hh.exe可以打开CHM文件，但这个程序并没有做主要的工作，而是把参数丢给另外一个程序，<sub>然如其名呵呵</sub></p><table><thead><tr class="header"><th style="text-align: left;">参数</th><th style="text-align: left;">释义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">-800</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">-title</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">-register</td><tdstyle="text-align: left;">注册hh.exe，将其设为默认的chm文档的shell</td></tr><tr class="even"><td style="text-align: left;">-decompile</td><td style="text-align: left;">反编译chm文件</td></tr><tr class="odd"><td style="text-align: left;">-mapid</td><td style="text-align: left;">定位htm</td></tr><tr class="even"><td style="text-align: left;">-safe</td><td style="text-align: left;">安全模式--快捷键失效</td></tr></tbody></table><hr /><p>参考链接： - <ahref="https://blog.csdn.net/SysProgram/article/details/6250394">逆向了一下hh.exe</a>- <ahref="https://blog.csdn.net/sibang/article/details/38732285">hh.exe的另类用法</a>- <ahref="https://blog.csdn.net/tuwen/article/details/3166696">hh.exe参数（全）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CHM文件是 Windows
系统下的帮助文档。而它的内容大多是英文，对于四级没过的小学生很不友好，所以在这里记下翻译CHM文件的历程。</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="CHM" scheme="https://blog.simon7.top/tags/CHM/"/>
    
  </entry>
  
  <entry>
    <title>Python路径操作新标准：pathlib 模块</title>
    <link href="https://blog.simon7.top/20201209/python%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%96%B0%E6%A0%87%E5%87%86%EF%BC%9Apathlib-%E6%A8%A1%E5%9D%97/"/>
    <id>https://blog.simon7.top/20201209/python%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%96%B0%E6%A0%87%E5%87%86%EF%BC%9Apathlib-%E6%A8%A1%E5%9D%97/</id>
    <published>2020-12-09T08:07:38.000Z</published>
    <updated>2020-12-09T08:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/nickchen121/p/11596223.html">pathlib模块</a> <ahref="https://docs.python.org/zh-cn/3/library/pathlib.html">官方的回答</a><span id="more"></span></p><p>获取当前路径</p><p>os.getcwd()</p><p>pathlib.Path.cwd()</p><p>获取父目录</p><p>os.path.dirname(os.getcwd())</p><p>str(pathlib.Path.cwd().parent)</p><p>拼接路径</p><p>os.path.join(os.getcwd(), 'a', 'b')</p><p>paths = ('a', 'b') pathlib.Path.cwd().joinpath(*paths)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/nickchen121/p/11596223.html&quot;&gt;pathlib
模块&lt;/a&gt; &lt;a
href=&quot;https://docs.python.org/zh-cn/3/library/pathlib.html&quot;&gt;官方的回答&lt;/a&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.simon7.top/tags/Python/"/>
    
    <category term="pathlib" scheme="https://blog.simon7.top/tags/pathlib/"/>
    
  </entry>
  
  <entry>
    <title>何为Metaclass</title>
    <link href="https://blog.simon7.top/20201205/%E4%BD%95%E4%B8%BAmetaclass/"/>
    <id>https://blog.simon7.top/20201205/%E4%BD%95%E4%B8%BAmetaclass/</id>
    <published>2020-12-05T07:20:32.000Z</published>
    <updated>2020-12-05T07:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-metaclass">什么是 metaclass ？</h2><p>metaclass 意为 元类超类，可以对子类进行操作，就像装饰器那样可以动态定制和修改被装饰的类，metaclass可以动态的定制或修改继承它的子类。</p><span id="more"></span><h2 id="metaclass-能解决什么问题">metaclass 能解决什么问题？</h2><p>只需要实现一个 metaclass 超类，然后再实现一个子类继承这个metaclass，就可以根据不同的配置文件自动拉取不同的类，这极大地提高了效率。</p><h2 id="一个实例">一个实例</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Mymeta</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> dic<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> dic<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===>Mymeta.__init__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>yaml_tag<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===>Mymeta.__new__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===>Mymeta.__call__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         obj <span class="token operator">=</span> cls<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         cls<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> obj   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>Mymeta<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     yaml_tag <span class="token operator">=</span> <span class="token string">'!Foo'</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Foo.__init__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Foo.__new__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>Mymeta<span class="token punctuation">.</span>__new__Mymeta<span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>Mymeta<span class="token punctuation">.</span>__init__Foo<span class="token punctuation">&#123;</span><span class="token string">'__module__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'__qualname__'</span><span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span> <span class="token string">'yaml_tag'</span><span class="token punctuation">:</span> <span class="token string">'!Foo'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function Foo<span class="token punctuation">.</span>__init__ at <span class="token number">0x0000000007EF3828</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function Foo<span class="token punctuation">.</span>__new__ at <span class="token number">0x0000000007EF3558</span><span class="token operator">></span><span class="token punctuation">&#125;</span>!FooIn<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> foo <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>Mymeta<span class="token punctuation">.</span>__call__Foo<span class="token punctuation">.</span>__new__Foo<span class="token punctuation">.</span>__init__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的运行结果可以发现在定义 class Foo() 时，会依次调用 MyMeta 的<code>__new__</code> 和 <code>__init__</code> 方法构建 Foo类，然后在调用 foo = Foo() 创建类的实例对象时，才会调用 MyMeta 的<code>__call__</code> 方法来调用 Foo 类的 <code>__new__</code> 和<code>__init__</code> 方法。</p><p>把上面的例子运行完之后就会明白很多了，正常情况下我们在父类中是不能对子类的属性进行操作，但是元类可以。换种方式理解：元类、装饰器、类装饰器都可以归为元编程。</p><h2 id="底层是如何实现-metaclass-的">底层是如何实现 metaclass 的？</h2><p>第一，所有的 Python 的用户定义类，都是 type 这个类的实例。第二，用户自定义类，只不过是 type 类的 <code>__call__</code> 运算符重载第三，metaclass 是 type 的子类，通过替换 type 的 <code>__call__</code>运算符重载机制，“超越变形”正常的类</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-metaclass&quot;&gt;什么是 metaclass ？&lt;/h2&gt;
&lt;p&gt;metaclass 意为 元类
超类，可以对子类进行操作，就像装饰器那样可以动态定制和修改被装饰的类，metaclass
可以动态的定制或修改继承它的子类。&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.simon7.top/tags/Python/"/>
    
    <category term="metaclass" scheme="https://blog.simon7.top/tags/metaclass/"/>
    
  </entry>
  
  <entry>
    <title>详解Python装饰器</title>
    <link href="https://blog.simon7.top/20201204/%E8%AF%A6%E8%A7%A3python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://blog.simon7.top/20201204/%E8%AF%A6%E8%A7%A3python%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-12-04T05:36:59.000Z</published>
    <updated>2020-12-04T05:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。这是一项强大的功能，但是若想掌握，必须理解闭包。</p><footer><strong>[巴西]Luciano Ramalho [译]安道 吴珂</strong><cite>Fluent Python</cite></footer></blockquote><span id="more"></span><h2 id="闭包">闭包</h2><p>在了解装饰器之前先讲一下闭包，闭包是一种特殊的函数，这种函数由多个函数的嵌套组成，且称之为外函数和内函数，外函数返回值是内函数的引用，此时就构成了闭包。构建一个闭包有以下几点要求：1. 多个函数的嵌套 2. 必须返回一个函数对象 3.返回的那个函数必须引用外部变量 闭包的优点： -闭包可以保存运行环境，即在闭包内的变量是不能被轻易修改的； -闭包的好处：提高代码的可复用性。 举个栗子： <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">out_func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">in_func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n<span class="token operator">*</span>num    <span class="token keyword">return</span> in_funcdemo <span class="token operator">=</span> out_func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>res <span class="token operator">=</span> demo<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="装饰器">装饰器</h2><p>装饰器也是一种闭包，只不过它的参数是被装饰的函数。举个栗子，定义一个装饰器，计算函数的执行时间：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment"># 定义装饰器</span><span class="token keyword">def</span> <span class="token function">time_calc</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>                start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>                 exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">return</span> f        <span class="token keyword">return</span> wrapper       <span class="token comment"># 使用装饰器</span><span class="token decorator annotation punctuation">@time_calc</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token decorator annotation punctuation">@time_calc</span><span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>上述的装饰器与<code>add = time_calc(add)</code>含义相同。但是这样的装饰器仍有缺陷，执行<code>print(add.__name__)</code>语句会发现输出的并不是<code>add</code>，而是<code>wrapper</code>，是因为这个函数重写了<code>add</code>的名字和注释文档。幸运的是，Python中<code>functools.wraps</code>函数可以解决这个问题。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">time_calc</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>        exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunTime'</span><span class="token punctuation">,</span>exec_time<span class="token punctuation">)</span>        <span class="token keyword">return</span> f    <span class="token keyword">return</span> wrapper   <span class="token decorator annotation punctuation">@time_calc</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>而上面的例子除了可以用函数来定义，也可以用类来定义。 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">class</span> <span class="token class-name">time_calc</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>            exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunTime'</span><span class="token punctuation">,</span>exec_time<span class="token punctuation">)</span>            <span class="token keyword">return</span> f        <span class="token keyword">return</span> wrapper     <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@time_calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>再来个与它类似的，找不同！ <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">class</span> <span class="token class-name">time_calc</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_func <span class="token operator">=</span> func    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            f <span class="token operator">=</span> self<span class="token punctuation">.</span>_func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>            exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunTime'</span><span class="token punctuation">,</span>exec_time<span class="token punctuation">)</span>            <span class="token keyword">return</span> f        <span class="token keyword">return</span> wrapper     <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@time_calc</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="内置装饰器">内置装饰器</h2><p>常见的有三种：<code>@property</code>、<code>@staticmethod</code>、<code>@classmethod</code></p><h3 id="property"><span class="citation"data-cites="property">@property</span></h3><p>把类内方法当成属性来使用，必须要有返回值，相当于getter；假如没有定义<span class="citation" data-cites="func.setter">@func.setter</span>修饰方法的话，就是只读属性 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将 property 函数用作装饰器可以很方便的创建只读属性</span><span class="token comment"># 下面的代码将 voltage() 方法转化成同名只读属性的 getter 方法。</span><span class="token keyword">class</span> <span class="token class-name">Parrot</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_voltage <span class="token operator">=</span> <span class="token number">100000</span>     <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">voltage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Get the current voltage."""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_voltage<span class="token comment"># property 的 getter,setter 和 deleter 方法同样可以用作装饰器</span><span class="token comment"># 下面两个例子是完全相同的</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">getx</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    <span class="token keyword">def</span> <span class="token function">setx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">delx</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>_x    x <span class="token operator">=</span> <span class="token builtin">property</span><span class="token punctuation">(</span>getx<span class="token punctuation">,</span> setx<span class="token punctuation">,</span> delx<span class="token punctuation">,</span> <span class="token string">"I'm the 'x' property."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""I'm the 'x' property."""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    <span class="token decorator annotation punctuation">@x<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> value    <span class="token decorator annotation punctuation">@x<span class="token punctuation">.</span>deleter</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>_x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="staicmethod"><span class="citation"data-cites="staicmethod">@staicmethod</span></h3><p>静态方法，不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。</p><h3 id="classmethod"><span class="citation"data-cites="classmethod">@classmethod</span></h3><p>类方法，不需要self参数，但第一个参数需要是表示自身类的cls参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">"三种方法的比较"</span>        <span class="token keyword">def</span> <span class="token function">instance_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用实例方法"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">class_method</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用类方法"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在类方法中 访问类属性 text: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在类方法中 调用实例方法 instance_method: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">static_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用静态方法"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在静态方法中 访问类属性 text: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Demo<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在静态方法中 调用实例方法 instance_method: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 实例化对象</span>    d <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 对象可以访问 实例方法、类方法、静态方法</span>    <span class="token comment"># 通过对象访问text属性</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment"># 通过对象调用实例方法</span>    d<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 通过对象调用类方法</span>    d<span class="token punctuation">.</span>class_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 通过对象调用静态方法</span>    d<span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 类可以访问类方法、静态方法</span>    <span class="token comment"># 通过类访问text属性</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Demo<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment"># 通过类调用类方法</span>    Demo<span class="token punctuation">.</span>class_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 通过类调用静态方法</span>    Demo<span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区别">区别</h3><p>在定义静态类方法和类方法时，<span class="citation"data-cites="staticmethod">@staticmethod</span>装饰的静态方法里面，想要访问类属性或调用实例方法，必须需要把类名写上；而@classmethod装饰的类方法里面，会传一个cls参数，代表本类，这样就能够避免手写类名的硬编码。在调用静态方法和类方法时，实际上写法都差不多，一般都是通过类名.静态方法() 或 类名.类方法()。也可以用实例化对象去调用静态方法和类方法，但为了和实例方法区分，最好还是用类去调用静态方法和类方法。</p><h3 id="使用场景">使用场景</h3><p>假如不需要用到与类相关的属性或方法时，就用静态方法@staticmethod；假如需要用到与类相关的属性或方法，然后又想表明这个方法是整个类通用的，而不是对象特异的，就可以使用类方法@classmethod。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;&lt;p&gt;函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。这是一项强大的功能，但是若想掌握，必须理解闭包。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;[巴西]Luciano Ramalho [译]安道 吴珂&lt;/strong&gt;&lt;cite&gt;Fluent Python&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.simon7.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GC算法介绍</title>
    <link href="https://blog.simon7.top/20201203/gc%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.simon7.top/20201203/gc%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-12-03T03:35:48.000Z</published>
    <updated>2020-12-03T03:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍-gc">介绍 GC</h2><p>GC(Garbage Collection ,垃圾收集)是将程序运行过程中产生的一些无用的对象占用的空间进行释放，避免OOM(Out Of Memory , 内存溢出)。常用的GC算法有<code>引用计数算法</code>、<code>标记-清除算法</code>、<code>复制算法</code>、<code>标记-整理算法</code><span id="more"></span> &gt; 在 C/C++里是由程序猿自己去申请、管理和释放内存空间，因此没有GC的概念。 &gt; 在Java中，后台专门有一个专门用于垃圾回收的线程来进行监控、扫描，自动将一些无用的内存进行释放，这就是垃圾收集的一个基本思想，目的在于防止由程序猿引入的人为的内存泄露。&gt; 在 Python 中垃圾回收的主要算法是引用计数。</p><p>早在1960年 Lisp 就使用了 GC。 GC 主要是完成三件事情： -哪些内存需要回收？ - 什么时候回收？ - 如何回收？</p><p>GC算法的评判标准主要是以下4点： 1. 吞吐量：即单位时间内的处理能力。2. 最大暂停时间：因执行GC而暂停执行程序所需的时间。 3.堆的使用效率：鱼与熊掌不可兼得，堆使用效率和吞吐量、最大暂停时间是不可能同时满足的。即可用的堆越大，GC运行越快；相反，想要利用有限的堆，GC花费的时间就越长。4.访问的局部性：在存储器的层级构造中，我们知道越是高速存取的存储器容量会越小（具体可以参看我写的存储器那篇文章）。由于程序的局部性原理，将经常用到的数据放在堆中较近的位置，可以提高程序的运行效率。</p><h2 id="引用计数算法">引用计数算法</h2><p>引用计数法就是给每个对象一个引用计数器，每当有一个地方引用它时，计数器就会加1；当引用失效时，计数器的值就会减1；任何时刻计数器的值为0的对象就是不可能再被使用的。</p><p>这个引用计数法时没有被 Java 所使用的，但是 python有使用到它。而且最原始的引用计数法没有用到 GC Roots。 <blockquote><p>在Python中 del 语句删除名称，而不是对象。del命令可能会导致对象被当做垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时。&gt;有个<code>__del__</code>特殊方法，但是它不会销毁实例，不应该在代码中调用。即将销毁实例时，Python解释器会调用<code>__del__</code>方法，给实例最后的机会，释放外部资源。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> weakrefs1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>s2 <span class="token operator">=</span> s1<span class="token keyword">def</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Gone with the wind...'</span><span class="token punctuation">)</span>ender <span class="token operator">=</span> weakref<span class="token punctuation">.</span>finalize<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> bye<span class="token punctuation">)</span>ender<span class="token punctuation">.</span>alive <span class="token comment"># True</span><span class="token keyword">del</span> s1ender<span class="token punctuation">.</span>alive <span class="token comment"># True</span>s2 <span class="token operator">=</span> <span class="token string">'spam'</span> <span class="token comment"># Gone with the wind...</span>ender<span class="token punctuation">.</span>alive <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><footer><strong>[巴西]Luciano Ramalho [译]安道 吴珂</strong><cite>Fluent Python</cite></footer></blockquote></p><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><ol type="1"><li>可即时回收垃圾：在该方法中，每个对象始终知道自己是否有被引用，当被引用的数值为0时，对象马上可以把自己当作空闲空间链接到空闲链表。</li><li>最大暂停时间短。</li><li>没有必要沿着指针查找</li></ol></div><div class="tab-pane" id="优点-2"><ol type="1"><li>计数器值的增减处理非常繁重，影响性能</li><li>计算器需要占用很多位。</li><li>实现繁琐。</li><li><strong>循环引用无法回收</strong></li></ol></div></div></div><h2 id="标记-清除算法">标记-清除算法</h2><p>标记-清除算法是现代垃圾回收算法的思想基础。标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。当堆中的有效内存空间（availablememory）被耗尽的时候，GC线程就会被触发并将程序暂停（stop theworld），然后进行标记和清除。 - 标记：遍历所有的GC Roots，然后将所有GCRoots可达的对象标记为存活的对象。 -清除：将遍历堆中所有的对象，将没有标记的对象全部清除掉。</p><figure><img src="标记清除算法.png" alt="标记清除算法" /><figcaption aria-hidden="true">标记清除算法</figcaption></figure><blockquote><p>为什么非要停止程序的运行呢？当标记结束而未开始清除时，程序又新创建一个对象，这个对象由于没有被标记，所以会被CG线程清除，从而导致错误。</p></blockquote><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><ul><li>算法简单、容易实现</li><li>与保守式GC 算法兼容</li><li>清除算法不会移动对象，所以非常适合搭配保守式算法</li></ul></div><div class="tab-pane" id="优点-2"><ul><li>效率比较低（递归与全堆对象遍历），导致stop theworld的时间比较长，导致用户体验差</li><li>这种方式清理出来的空闲内存是不连续的，会产生内存碎片。需要维护一个空闲列表</li></ul></div></div></div><h2 id="复制算法">复制算法</h2><p>复制算法（新生代的GC）是将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p><p><img src="复制算法.png" alt="复制算法" />复制算法使得每次都只对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，这个太要命了。所以复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费。现在的商业虚拟机都采用这种收集算法来回收新生代，新生代中的对象98%都是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是<mark class="label primary">将内存分为一块比较大的Eden空间和两块较小的Survivor空间</mark>，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖于老年代进行分配担保，所以大对象直接进入老年代。整个过程如下图所示：<img src="大对象进入老年代.png" alt="大对象直接进入老年代" />上图中，绿色箭头的位置代表的是大对象，大对象直接进入老年代。</p><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><p>没有标记和清除过程,实现简单,运行高效。复制过去以后保证空间的连续性,不会发生碎片化。 优秀的吞吐量。可实现高速分配：复制算法不用使用空闲链表。这是因为分块是连续的内存空间，因此，调用这个分块的大小，只需要这个分块大小不小于所申请的大小，移动指针进行分配即可。与缓存兼容。</p></div><div class="tab-pane" id="优点-2"><p>此算法的缺点也是很明显的,就是需要两倍的内存空间。对于G1这种分拆成大量region的GC,复制而不是移动,意味着GC需要维护region之间对象引用关系,不管是内存占用或者时间开销也不小。堆的使用效率低下 不兼容保守式GC算法</p></div></div></div><h2 id="标记-整理算法">标记-整理算法</h2><blockquote><p>如果在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选中这种算法。</p></blockquote><p>标记-压缩算法适合用于存活对象较多的场合，如老年代。它在标记-清除算法的基础上做了一些优化。和标记-清除算法一样，标记-压缩算法也首先需要从根节点开始，对所有可达对象做一次标记；但之后，它并不简单的清理未标记的对象，而是将所有的存活对象压缩到内存的一端；之后，清理边界外所有的空间。<img src="标记-压缩算法.png" alt="标记-压缩算法" /> -标记：它的第一个阶段与标记/清除算法是一模一样的，均是遍历GCRoots，然后将存活的对象标记。 -整理：移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。上图中可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><p>弥补 标记/清除算法 当中内存区域分散的缺点消除了复制算法当中内存减半的高额代价。</p></div><div class="tab-pane" id="优点-2"><p>效率也不高。不仅要标记所有存活对象，还要整理所有存活对象的引用地址。从效率上来说，标记/整理算法要低于复制算法。</p></div></div></div><h2 id="小总结">小总结</h2><p>效率：复制算法&gt;标记/整理算法&gt;标记/清除算法（此处的效率只是简单的对比时间复杂度，实际情况不一定如此）。内存整齐度：复制算法=标记/整理算法&gt;标记/清除算法。内存利用率：标记/整理算法=标记/清除算法&gt;复制算法。 -注1：可以看到标记/清除算法是比较落后的算法了，但是后两种算法却是在此基础上建立的。- 注2：时间与空间不可兼得。</p><h2id="分代收集算法新生代的gc老年代的gc">分代收集算法：（新生代的GC+老年代的GC）</h2><p>当前商业虚拟机的GC都是采用的“分代收集算法”，这并不是什么新的思想，只是根据对象的存活周期的不同将内存划分为几块儿。一般是把Java堆分为新生代和老年代：短命对象归为新生代，长命对象归为老年代。-少量对象存活，适合复制算法：在新生代中，每次GC时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成GC。-大量对象存活，适合用标记-清理/标记-整理：在老年代中，因为对象存活率高、没有额外空间对他进行分配担保，就必须使用“标记-清理”/“标记-整理”算法进行GC。</p><p>注：老年代的对象中，有一小部分是因为在新生代回收时，老年代做担保，进来的对象；绝大部分对象是因为很多次GC都没有被回收掉而进入老年代。</p><h2 id="保守式gc与准确式gc">保守式GC与准确式GC</h2><h3 id="保守式gc">保守式GC</h3><p>所谓保守式GC就是“不能识别指针和非指针的GC”。对于寄存器、调用栈、全局变量空间来说，都是不明确的根。例如调用栈中，装着函数内的局部变量和参数值。而局部变量，如C语言中的int、double这样就是非指针，但是也会有像void*这样的指针。那么保守式GC会怎么检查不明确的根呢？1、是不是被正确对齐的值？（在32位CPU的情况下，为4的倍数）2、是不是指着堆内？3、是不是指向对象的开头？当然，这些只是基本的检查项目。上面的检查方法会将一些非指针识别成指针。例如一个数值和一个地址，它们两个值相等，这个时候，那个值也可以被识别成指针。保守式GC的优点是语言处理程序不依赖与GC。缺点为识别指针和非指针需要付出成本、错误识别指针会压迫堆、能够使用的GC算法有限。例如GC复制算法就不能使用，因为其可能会将非指针重写。### 准确式GC准确式GC能够正确识别指针和非指针的GC。正确的根的创建方法是依赖于语言处理程序的实现的。我们可以通过打标签、不把寄存器和栈等当作根的方法来实现。其优点就是完全能够识别指针，能够使用复制算法等需要移动对象的算法。但是在创建准确式GC时，语言处理程序必须对GC进行一些支援，而且创建正确的根就必须付出一定的代价。其实我们垃圾回收机的实现都不是仅仅用哪一种回收算法，都是将几个结合使用，特别是分代算法，后面我们会详细的介绍。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍-gc&quot;&gt;介绍 GC&lt;/h2&gt;
&lt;p&gt;GC(Garbage Collection ,
垃圾收集)是将程序运行过程中产生的一些无用的对象占用的空间进行释放，避免
OOM(Out Of Memory , 内存溢出)。
常用的GC算法有&lt;code&gt;引用计数算法&lt;/code&gt;、&lt;code&gt;标记-清除算法&lt;/code&gt;、&lt;code&gt;复制算法&lt;/code&gt;、&lt;code&gt;标记-整理算法&lt;/code&gt;</summary>
    
    
    
    <category term="未分类" scheme="https://blog.simon7.top/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="算法" scheme="https://blog.simon7.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python多进程</title>
    <link href="https://blog.simon7.top/20200831/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://blog.simon7.top/20200831/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</id>
    <published>2020-08-31T02:07:36.000Z</published>
    <updated>2020-08-31T02:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>multiprocessing</code> 是一个支持使用与 <code>threading</code>模块类似的 <code>API</code> 来产生进程的包。<code>multiprocessing</code>包同时提供了本地和远程并发操作，通过使用子进程而非线程有效地绕过了<em>全局解释器锁</em>。</p><span id="more"></span><p>因此，<code>multiprocessing</code>模块允许程序员充分利用给定机器上的多个处理器。 它在 <code>Unix</code> 和<code>Windows</code> 上均可运行。 <code>multiprocessing</code>模块还引入了 <code>Pool</code>对象，它提供了一种快捷的方法，赋予函数并行化处理一系列输入值的能力，可以将输入数据分配给不同进程处理（数据并行）。</p><h2 id="process">Process</h2><p>通过创建一个 <code>Process</code> 对象然后调用它的<code>start()</code> 方法来生成进程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="queue-队列">Queue 队列</h2><p>进程之间的通信通道之一</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># prints "[42, None, 'hello']"</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pipe-管道">Pipe 管道</h2><p>进程之间的通信通道之一，返回一个由管道连接的连接对象，默认情况下是双工（双向）。返回的两个连接对象表示管道的两端。每个连接对象都有 <code>send()</code>和 <code>recv()</code> 方法（相互之间的）。 { note waring no-icon}请注意，如果两个进程（或线程）同时尝试读取或写入管道的<em>同一</em>端，则管道中的数据可能会损坏。当然，在不同进程中同时使用管道的不同端的情况下不存在损坏的风险。{ endnote}</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Pipe<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parent_conn<span class="token punctuation">,</span> child_conn <span class="token operator">=</span> Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>child_conn<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>parent_conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># prints "[42, None, 'hello']"</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进程间同步">进程间同步</h2><p>使用锁来确保一次只有一个进程打印到标准输出 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Lock<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        l<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="进程间共享状态">进程间共享状态</h2><h3 id="共享内存">共享内存</h3><p>可以使用 <code>Value</code> 或 <code>Array</code>将数据存储在共享内存映射中。 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Value<span class="token punctuation">,</span> Array<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">3.1415927</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span>    arr <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token comment"># 3.1415927</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>创建 <code>num</code> 和 <code>arr</code> 时使用的 <code>'d'</code>和 <code>'i'</code> 参数是 <code>array</code> 模块使用的类型的<code>typecode</code> ： <code>'d'</code> 表示双精度浮点数，<code>'i'</code>表示有符号整数。这些共享对象将是进程和线程安全的。为了更灵活地使用共享内存，可以使用<code>multiprocessing.sharedctypes</code>模块，该模块支持创建从共享内存分配的任意<code>ctypes</code>对象。</p><h3 id="服务进程">服务进程</h3><p>由 <code>Manager()</code>返回的管理器对象控制一个服务进程，该进程保存Python对象并允许其他进程使用代理操作它们。<code>Manager()</code> 返回的管理器支持类型： <code>list</code> 、<code>dict</code> 、 <code>Namespace</code> 、 <code>Lock</code> 、<code>RLock</code> 、 <code>Semaphore</code> 、<code>BoundedSemaphore</code> 、 <code>Condition</code> 、<code>Event</code> 、 <code>Barrier</code> 、 <code>Queue</code> 、<code>Value</code> 和 <code>Array</code> 。例如 <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Manager<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>    d<span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    d<span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    l<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> manager<span class="token punctuation">:</span>        d <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        l <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>        <span class="token comment"># &#123;0.25: None, 1: '1', '2': 2&#125;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>        <span class="token comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>使用服务进程的管理器比使用共享内存对象更灵活，因为它们可以支持任意对象类型。此外，单个管理器可以通过网络由不同计算机上的进程共享。但是，它们比使用共享内存慢。</p><h2 id="使用工作进程-pool">使用工作进程 Pool()</h2><p><code>Pool</code>类表示一个工作进程池。它具有允许以几种不同方式将任务分配到工作进程的方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 开 4 个工作进程</span>    <span class="token keyword">with</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>        <span class="token comment"># print "[0, 1, 4,..., 81]"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 以任意顺序打印相同的数字</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> pool<span class="token punctuation">.</span>imap_unordered<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment"># evaluate "f(20)" asynchronously</span>        res <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># runs in *only* one process</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment"># prints "400"</span>        <span class="token comment"># evaluate "os.getpid()" asynchronously</span>        res <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># runs in *only* one process</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment"># prints the PID of that process</span>        <span class="token comment"># 异步启动多个 evaluations *可能*使用更多进程</span>        multiple_results <span class="token operator">=</span> <span class="token punctuation">[</span>pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> res <span class="token keyword">in</span> multiple_results<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 使一个进程 sleep 10 秒</span>        res <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> TimeoutError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我们得到一个 multiprocessing.TimeoutError"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"目前，pool 仍然可供更多工作"</span><span class="token punctuation">)</span>    <span class="token comment"># exiting the 'with'-block has stopped the pool</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"现在 pool 已关闭，不再可用"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>{ note info } 参数 <code>processes</code> 默认大小是CPU的核数,map(func, iterator) 获取结果，参数 func 是进程执行的函数，iterator是可迭代对象特点：保持阻塞直到获得结果，对于很长的迭代对象，可能消耗很多内存，可以考虑使用imap() 或 imap_unordered() 并且显示指定 chunksize 以提升效率。apply_async(func[, args]) 获取结果，参数 func 是进程执行的函数，args是可迭代对象 { endnote }</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;multiprocessing&lt;/code&gt; 是一个支持使用与 &lt;code&gt;threading&lt;/code&gt;
模块类似的 &lt;code&gt;API&lt;/code&gt; 来产生进程的包。
&lt;code&gt;multiprocessing&lt;/code&gt;
包同时提供了本地和远程并发操作，通过使用子进程而非线程有效地绕过了
&lt;em&gt;全局解释器锁&lt;/em&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="Python" scheme="https://blog.simon7.top/tags/Python/"/>
    
    <category term="并行计算" scheme="https://blog.simon7.top/tags/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
</feed>
