<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon</title>
  
  <subtitle>玄之又玄，众妙之门</subtitle>
  <link href="https://blog.simon7.top/atom.xml" rel="self"/>
  
  <link href="https://blog.simon7.top/"/>
  <updated>2022-01-19T09:02:00.000Z</updated>
  <id>https://blog.simon7.top/</id>
  
  <author>
    <name>Simon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简述从 Github 构建 Conda R包</title>
    <link href="https://blog.simon7.top/20220119/%E7%AE%80%E8%BF%B0%E4%BB%8E-github-%E6%9E%84%E5%BB%BA-conda-r%E5%8C%85/"/>
    <id>https://blog.simon7.top/20220119/%E7%AE%80%E8%BF%B0%E4%BB%8E-github-%E6%9E%84%E5%BB%BA-conda-r%E5%8C%85/</id>
    <published>2022-01-19T09:02:00.000Z</published>
    <updated>2022-01-19T09:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>示例&#x2F;目的：安装R包 <strong>NMF</strong><br>环境：<em>CentOS 7 , Miniconda3,  R 4.1.2 .</em></p></blockquote><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>当前 conda 里最新的 <code>r-nmf</code>包版本是 <code>0.21</code>，而<code>Github</code>中的版本是 <code>0.30</code>, 我所安装的某R包需要依赖 <code>nmf&gt;=0.23</code></p><p>为了容易复现，将创建一个新的 conda 环境，同时也建议单独把构建环境隔离出来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n conda-build conda-build conda-verifyconda skeleton cran https://github.com/renozao/NMFconda build -c conda-forge -c bioconda --R <span class="token number">4.1</span>.2 r-nmfconda <span class="token function">install</span> -n r-base -c <span class="token variable">$&#123;CONDA_PREFIX&#125;</span>/conda-bld r-nmf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在名为 <strong>conda-build</strong> 环境里安装 <code>conda-build</code> 包 和<code> conda-verify（可选）</code></li><li><code>conda skeleton cran</code> 将构建一个R包的骨架包（skeleton package [^1]），会从 Github缓存裸存储库（bare repository），并在家目录<code>~/</code>准备conda-build配方（conda recipe[^2]）</li><li>准备完成就可以用<code>conda build</code>创建conda包，此处声明了依赖的源有conda-forge和bioconda，且使用4.1.2版本的R编译。</li><li>最后用<code>conda install</code>安装就可以了。此处生成的conda包的路径是<code>/opt/miniconda3/envs/conda-build/conda-bld</code>，环境变量<code>$&#123;CONDA_PREFIX&#125;</code>是当前所激活的虚拟环境的路径。</li></ol><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>详细信息可以查 conda的<a target="_blank" rel="noopener" href="https://docs.conda.io/">官方文档</a> &#x2F;<a target="_blank" rel="noopener" href="https://github.com/conda/conda">Github</a>&#x2F;各种 issue 或者 <code>conda 命令 --help</code></p><blockquote><p><a target="_blank" rel="noopener" href="https://github.com/conda/conda">conda Github</a><br><a target="_blank" rel="noopener" href="https://github.com/renozao/NMF">NMF Github</a><br><a target="_blank" rel="noopener" href="https://anaconda.org/conda-forge/r-nmf">r-nmf anaconda</a><br><a target="_blank" rel="noopener" href="https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/index.html">conda-build 官方文档</a><br><a target="_blank" rel="noopener" href="https://blog.csdn.net/SimonC17/article/details/122583145#t4">我常用的 conda 环境–.condarc的配置</a></p></blockquote><p>[^1]:在官方文档中查看 <a target="_blank" rel="noopener" href="https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-r-pkgs.html#building-a-simple-package-with-conda-skeleton-cran">skeleton package</a><br>[^2]:此处conda recipe 为<code>~/r-nmf</code>，目录下有<code>bld.bat</code>  <code>build.sh</code>  <code>meta.yaml</code> 三个文件</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;示例&amp;#x2F;目的：安装R包 &lt;strong&gt;NMF&lt;/strong&gt;&lt;br&gt;环境：&lt;em&gt;CentOS 7 , Miniconda3,  R 4.1.2 .&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>常用的Conda配置和操作</title>
    <link href="https://blog.simon7.top/20220119/%E5%B8%B8%E7%94%A8%E7%9A%84conda%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C/"/>
    <id>https://blog.simon7.top/20220119/%E5%B8%B8%E7%94%A8%E7%9A%84conda%E9%85%8D%E7%BD%AE%E5%92%8C%E6%93%8D%E4%BD%9C/</id>
    <published>2022-01-19T08:16:50.000Z</published>
    <updated>2022-01-19T08:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用的系统"><a href="#使用的系统" class="headerlink" title="使用的系统"></a>使用的系统</h1><p>以 Linux 环境为标准，windows环境另作标记说明。</p><h1 id="使用的软件"><a href="#使用的软件" class="headerlink" title="使用的软件"></a>使用的软件</h1><p>miniconda ， 麻雀虽小，五脏俱全！</p><span id="more"></span><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>创建 miniconda 组，并将用户添加到附属组。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> miniconda<span class="token function">sudo</span> <span class="token function">usermod</span> -a -G miniconda username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>更改<code>/opt</code>权限，安装包下载到<code>/opt/download</code>，安装到<code>/opt/miniconda3</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R :miniconda /opt<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">2775</span> -R /opt<span class="token function">mkdir</span> -p /opt/download<span class="token function">wget</span> -P /opt/download/  -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh<span class="token function">bash</span> /opt/download/miniconda3.sh<span class="token comment"># PATH: /opt/miniconda3</span><span class="token comment"># conda init : no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h1><p>修改文件 <code>/opt/miniconda3/.condarc</code>，末尾是代理设置，和一句更新命令</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ssl_verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">show_channel_urls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">report_errors</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">auto_activate_base</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">always_yes</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">channels</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> bioconda  <span class="token punctuation">-</span> conda<span class="token punctuation">-</span>forge  <span class="token punctuation">-</span> defaults<span class="token key atrule">default_channels</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<span class="token key atrule">custom_channels</span><span class="token punctuation">:</span>  <span class="token key atrule">conda-forge</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">msys2</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">bioconda</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">menpo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">pytorch</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">pytorch-lts</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  <span class="token key atrule">simpleitk</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<span class="token comment"># proxy_servers:</span><span class="token comment">#     http: http://127.0.0.1:10808</span><span class="token comment">#     https: http://127.0.0.1:10808</span><span class="token comment"># conda clean -i &amp;&amp; conda update --all</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="清理并更新-conda"><a href="#清理并更新-conda" class="headerlink" title="清理并更新 conda"></a>清理并更新 conda</h1><p>-a 所有&#x2F; -i 索引&#x2F; -p 没有在使用的包&#x2F; -t 缓存的.tar文件&#x2F; -q 安静模式&#x2F;-y 钝角√</p><pre class="line-numbers language-none"><code class="language-none">conda clean -a &amp;&amp; conda update --all conda update -base conda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;使用的系统&quot;&gt;&lt;a href=&quot;#使用的系统&quot; class=&quot;headerlink&quot; title=&quot;使用的系统&quot;&gt;&lt;/a&gt;使用的系统&lt;/h1&gt;&lt;p&gt;以 Linux 环境为标准，windows环境另作标记说明。&lt;/p&gt;
&lt;h1 id=&quot;使用的软件&quot;&gt;&lt;a href=&quot;#使用的软件&quot; class=&quot;headerlink&quot; title=&quot;使用的软件&quot;&gt;&lt;/a&gt;使用的软件&lt;/h1&gt;&lt;p&gt;miniconda ， 麻雀虽小，五脏俱全！&lt;/p&gt;</summary>
    
    
    
    <category term="软件使用" scheme="https://blog.simon7.top/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="conda" scheme="https://blog.simon7.top/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>简述新电脑开荒</title>
    <link href="https://blog.simon7.top/20211103/%E7%AE%80%E8%BF%B0%E6%96%B0%E7%94%B5%E8%84%91%E5%BC%80%E8%8D%92/"/>
    <id>https://blog.simon7.top/20211103/%E7%AE%80%E8%BF%B0%E6%96%B0%E7%94%B5%E8%84%91%E5%BC%80%E8%8D%92/</id>
    <published>2021-11-03T08:01:21.000Z</published>
    <updated>2021-11-03T08:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>给人开荒赚钱，给己开荒省钱！<br>临近双十一，手下的笔记本也该更新换代了，就把自己的开荒操作大致记录下来，<strong>具体软件使用不是本文重点</strong>。有大厂出品的软件，也有一些小而巧的<a target="_blank" rel="noopener" href="https://www.appinn.com/">小众软件</a></p><span id="more"></span><ol><li><p>常规操作（获得较新的系统环境）<br> Windows激活，Office激活，系统分区，系统更新，软件卸载，软件更新，驱动更新，漏洞补丁，还有电脑图标，启动项等等，在此没必要再造轮子，就不一一叙述。</p></li><li><p>安全防护（获得较习惯的安全环境，以个人习惯为准）<br> Windows 防护：关闭所有功能。<br> 原厂防护：关闭自启，未卸载<br> 电脑管家：安装到C盘。（其他软件到D盘）</p></li><li><p>安装 V2ray（获得更好的网络环境，通过某些VPN才能让scoop更好地连接Github <del>小声哔哔Free</del> ）<br> 由于不可抗力，在此也不能详细叙述，<del>一本github各位好自为之</del> 。<br> 提前配置 conda,git,scoop ：<br> 创建文件<code>C:\Users\&lt;USER&gt;\.condarc</code>参考 <a target="_blank" rel="noopener" href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a></p> <pre class="line-numbers language-none"><code class="language-none">ssl_verify: falseshow_channel_urls: truereport_errors: falseauto_activate_base: truealways_yes: truechannels:  - defaultsdefault_channels:  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;r  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;msys2custom_channels:  conda-forge: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  msys2: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  bioconda: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  menpo: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  pytorch: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud  simpleitk: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloudproxy_servers:    http: http:&#x2F;&#x2F;127.0.0.1:10808    https: http:&#x2F;&#x2F;127.0.0.1:10808<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 创建文件<code>C:\Users\&lt;USER&gt;\.gitconfig</code></p> <pre class="line-numbers language-none"><code class="language-none">[core]autocrlf &#x3D; false[http]sslVerify &#x3D; falseproxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:10808[https]sslVerify &#x3D; falseproxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:10808<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 修改<code>C:\Windows\System32\drivers\etc\hosts</code>参考 <a target="_blank" rel="noopener" href="https://github.com/521xueweihan/GitHub520">github520</a></p></li><li><p>安装 <code>Scoop</code> （获得更干净的软件环境）<br> 自己去安装这个确实需要一点先验知识，所以还是要记录下。<br>以管理员权限运行 <code>PowerShell</code>，并执行下面代码。</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$env</span>:SCOOP<span class="token operator">=</span><span class="token string">'D:\Scoop'</span><span class="token punctuation">[</span>environment<span class="token punctuation">]</span>::setEnvironmentVariable<span class="token punctuation">(</span><span class="token string">'SCOOP'</span>,<span class="token variable">$env</span>:SCOOP,<span class="token string">'User'</span><span class="token punctuation">)</span>set-executionpolicy remotesigned -scope currentuserSet-ItemProperty <span class="token string">'HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem'</span> -Name <span class="token string">'LongPathsEnabled'</span> -Value <span class="token number">1</span>Invoke-Expression <span class="token punctuation">(</span>New-Object System.Net.WebClient<span class="token punctuation">)</span>.DownloadString<span class="token punctuation">(</span><span class="token string">'https://get.scoop.sh'</span><span class="token punctuation">)</span><span class="token comment"># 设置全局（如果需要）</span><span class="token comment"># $env:SCOOP_GLOBAL='D:\GlobalScoopApps'</span><span class="token comment"># [environment]::setEnvironmentVariable('SCOOP_GLOBAL',$env:SCOOP_GLOBAL,'Machine')</span><span class="token comment"># 检查 scoop</span>scoop checkup<span class="token comment"># scoop update *</span><span class="token comment"># scoop update scoop</span>scoop <span class="token function">install</span> <span class="token function">git</span> aria2 <span class="token comment"># 同时自动下载 7zip</span><span class="token comment"># 添加两个 bucket</span>scoop bucket <span class="token function">rm</span> extras <span class="token punctuation">;</span><span class="token punctuation">;</span> scoop bucket <span class="token function">add</span> extrasscoop bucket <span class="token function">add</span> dorado https://github.com/chawyehsu/dorado <span class="token comment"># scoop 代理</span>scoop config <span class="token function">rm</span> proxy <span class="token punctuation">;</span><span class="token punctuation">;</span> scoop config proxy <span class="token number">127.0</span>.0.1:10808<span class="token comment"># 关于 git 代理</span><span class="token comment"># git config --global http.proxy http://127.0.0.1:10808</span><span class="token comment"># git config --global https.proxy http://127.0.0.1:10808</span><span class="token comment"># git config --global --unset http.proxy</span><span class="token comment"># git config --global --unset https.proxy</span><span class="token comment"># 以上安装完成。以下看个人需求。</span>scoop <span class="token function">install</span> <span class="token function">sudo</span> <span class="token function">curl</span> scoop <span class="token function">install</span> vscode miniconda3 <span class="token comment">#conda clean --packages</span><span class="token comment">#conda clean --all</span><span class="token comment">#conda update --all</span><span class="token comment">#conda update -n base conda</span>scoop <span class="token function">install</span> motrix <span class="token comment"># 下载工具</span>scoop <span class="token function">install</span> mactype-np <span class="token comment"># 字体优化工具</span>scoop <span class="token function">install</span> potplayer <span class="token comment"># 视频播放器</span>scoop <span class="token function">install</span> quicklook <span class="token comment"># 快速预览工具</span>scoop <span class="token function">install</span> snipaste <span class="token comment"># 截图工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装 <code>Everything</code> + <code>Wox</code> （获得更强大的搜索环境）</p></li><li><p>其他<br> 聊天（QQ&#x2F;Tim&#x2F;微信&#x2F;腾讯会议）<br> 输入法（搜狗）<br> 浏览器（Chrome）<br> 视频（QQ影音）<br> PE（BalenaEther）<br> 远程（向日葵，蒲公英）<br> 压缩（bandizip<code>6.x版本无广告</code>）<br> 编程（SourceTree&#x2F;Fiddler&#x2F;Navicat）<br> 学术（PDF 阅读器，知云文献翻译，CAJViewer，EasyConnect，SciHub）<br> 网盘（百度网盘、阿里云盘、OneDriver）<br> 还有一点点（Xmind、Notion）</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;给人开荒赚钱，给己开荒省钱！&lt;br&gt;临近双十一，手下的笔记本也该更新换代了，就把自己的开荒操作大致记录下来，&lt;strong&gt;具体软件使用不是本文重点&lt;/strong&gt;。有大厂出品的软件，也有一些小而巧的&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.appinn.com/&quot;&gt;小众软件&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>没有文件扩展名 Vbs</title>
    <link href="https://blog.simon7.top/20211102/%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D-vbs/"/>
    <id>https://blog.simon7.top/20211102/%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D-vbs/</id>
    <published>2021-11-02T02:24:03.000Z</published>
    <updated>2021-11-02T02:24:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>注册表中<code>HKEY_CLASSES_ROOT\.vbs</code> 将数据设置为 <code>vbsfile</code></p><span id="more"></span><p><img src="/vbs-1.jpg"></p><hr><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>创建文件<code>tmp.reg</code></p><pre class="line-numbers language-none"><code class="language-none">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\.vbs]@&#x3D;&quot;vbsfile&quot;[HKEY_CLASSES_ROOT\.vbs\PersistentHandler]@&#x3D;&quot;&#123;5e941d80-bf96-11cd-b579-08002b30bfeb&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h2><p>找到文件: <code>C:\WINDOWS\inf\wsh.inf</code>， 右键“安装”；<br>开始→运行行里输入:    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">regsvr32 urlmon.dll shdocvw.dll jscript.dll vbscript.dll /s <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h2&gt;&lt;p&gt;注册表中&lt;code&gt;HKEY_CLASSES_ROOT\.vbs&lt;/code&gt; 将数据设置为 &lt;code&gt;vbsfile&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://blog.simon7.top/categories/Windows/"/>
    
    
    <category term="vbs" scheme="https://blog.simon7.top/tags/vbs/"/>
    
  </entry>
  
  <entry>
    <title>R 实现元素排列与组合</title>
    <link href="https://blog.simon7.top/20211027/r-%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/"/>
    <id>https://blog.simon7.top/20211027/r-%E5%AE%9E%E7%8E%B0%E5%85%83%E7%B4%A0%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/</id>
    <published>2021-10-27T06:25:38.000Z</published>
    <updated>2021-10-27T06:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R-实现元素排列与组合"><a href="#R-实现元素排列与组合" class="headerlink" title="R 实现元素排列与组合"></a>R 实现元素排列与组合</h1><p>实现组合(combination)可以使用<code>combn(x,n)</code>，大多时候需要转置<code>t(combn(x,n))</code>，<code>x</code>可以是向量或数字。</p><p>实现元素全排列(permutation)就自己参考一部分<code>combn()</code>函数写了一个<code>permt</code>。<code>x</code>可以是向量或数字。</p><span id="more"></span><p>&#96;&#96;&#96;r<br>permt &#x3D; function (x, m) {<br>  if (is.numeric(x) &amp;&amp; length(x) &#x3D;&#x3D; 1L &amp;&amp; x &gt; 0 &amp;&amp; trunc(x) &#x3D;&#x3D; x) x &lt;- seq_len(x)<br>  y &#x3D; data.frame(‘v1’ &#x3D; x)<br>  if (m &#x3D;&#x3D; 1) return(y)<br>  for (i in 2:m) {<br>    y &#x3D; as.data.frame(<br>      cbind(<br>        colname &#x3D; rep(x, each&#x3D;nrow(y)),<br>        y<br>      )<br>    )<br>    names(y)[names(y) &#x3D;&#x3D; ‘colname’] &lt;- paste0(“v”,i)<br>  }<br>  y<br>}</p><h1 id="一个萝卜一个坑。萝卜白菜仨个坑："><a href="#一个萝卜一个坑。萝卜白菜仨个坑：" class="headerlink" title="一个萝卜一个坑。萝卜白菜仨个坑："></a>一个萝卜一个坑。萝卜白菜仨个坑：</h1><p>permt(c(“a”,’b’),3)<br>permt(c(“1”,’2’),3)<br>permt(2,3)</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;R-实现元素排列与组合&quot;&gt;&lt;a href=&quot;#R-实现元素排列与组合&quot; class=&quot;headerlink&quot; title=&quot;R 实现元素排列与组合&quot;&gt;&lt;/a&gt;R 实现元素排列与组合&lt;/h1&gt;&lt;p&gt;实现组合(combination)可以使用&lt;code&gt;combn(x,n)&lt;/code&gt;，大多时候需要转置&lt;code&gt;t(combn(x,n))&lt;/code&gt;，&lt;code&gt;x&lt;/code&gt;可以是向量或数字。&lt;/p&gt;
&lt;p&gt;实现元素全排列(permutation)就自己参考一部分&lt;code&gt;combn()&lt;/code&gt;函数写了一个&lt;code&gt;permt&lt;/code&gt;。&lt;code&gt;x&lt;/code&gt;可以是向量或数字。&lt;/p&gt;</summary>
    
    
    
    <category term="编程语言" scheme="https://blog.simon7.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="R语言" scheme="https://blog.simon7.top/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>TodoMVC应用</title>
    <link href="https://blog.simon7.top/20211018/todomvc%E5%BA%94%E7%94%A8/"/>
    <id>https://blog.simon7.top/20211018/todomvc%E5%BA%94%E7%94%A8/</id>
    <published>2021-10-18T06:14:28.000Z</published>
    <updated>2021-10-18T06:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用VueJs实现官方的 <a target="_blank" rel="noopener" href="http://todomvc.com/">TodoMVC</a> 示例，将其数据存储到后端数据库，并部署上线。<br><a target="_blank" rel="noopener" href="https://vuejs.org/v2/examples/todomvc.html">示例</a></p><span id="more"></span><ul><li><a target="_blank" rel="noopener" href="https://github.com/nsleep/todomvc">我的项目地址</a></li><li><a target="_blank" rel="noopener" href="https://simon-todomvc.herokuapp.com/">我的演示</a></li></ul><blockquote><p>环境 Git、Node、npm、heroku</p></blockquote><h1 id="一、-TodoMVC-应用"><a href="#一、-TodoMVC-应用" class="headerlink" title="一、 TodoMVC 应用"></a>一、 TodoMVC 应用</h1><h2 id="1-下载模板"><a href="#1-下载模板" class="headerlink" title="1. 下载模板"></a>1. 下载模板</h2><p>GitHub<a target="_blank" rel="noopener" href="https://github.com/tastejs/todomvc-app-template">下载</a>模板</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:tastejs/todomvc-app-template.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-获取支持文件"><a href="#2-获取支持文件" class="headerlink" title="2. 获取支持文件"></a>2. 获取支持文件</h2><p>通过<code>npm</code>下载模板的CSS和JS文件，以及之后要用到的<code>Vue.js</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> todomvc-app-template<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> <span class="token function">install</span> vue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-使用Vuejs实现Todo"><a href="#3-使用Vuejs实现Todo" class="headerlink" title="3. 使用Vuejs实现Todo"></a>3. 使用Vuejs实现Todo</h2><p>主要修改<code>js/app.js</code>和<code>index.html</code>两个文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>js/app.js</span></div><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 数据</span>    <span class="token keyword">let</span> todos<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'睡觉'</span><span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'打豆豆'</span><span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/*/ 全局自定义指令,自动获取焦点    Vue.directive('focus', &#123;        inserted: function (el) &#123;              el.focus();        &#125;    &#125;);*/</span>    <span class="token comment">// vue实例</span>    window<span class="token punctuation">.</span>app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#todoapp'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">todos</span><span class="token operator">:</span>todos<span class="token punctuation">,</span>            <span class="token literal-property property">currentEditing</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token literal-property property">filterState</span><span class="token operator">:</span><span class="token string">'all'</span><span class="token punctuation">,</span>            <span class="token literal-property property">toggleAllstate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">leftCount</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">.</span>length            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">filterTodos</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string">'active'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'completed'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 全选的联动效果</span>            <span class="token function-variable function">toggleState</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 添加任务</span>            <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> todoText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>todoText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> lastTodo<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> id<span class="token operator">=</span>lastTodo<span class="token operator">?</span>lastTodo<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span>id<span class="token punctuation">,</span>                    <span class="token literal-property property">title</span><span class="token operator">:</span>todoText<span class="token punctuation">,</span>                    <span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 点击全部完成或者未完成</span>            <span class="token function">toggleAll</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> checked<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>completed<span class="token operator">=</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 删除单个任务项</span>            <span class="token function">removeTodo</span><span class="token punctuation">(</span><span class="token parameter">delIndex<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>delIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 显示所有未完成任务数(删除所有已完成)</span>            <span class="token function">removeAllDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">;</span><span class="token comment">//return true,即item.completed为false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 保存编辑项</span>            <span class="token function">saveEdit</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> editText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果为空,直接删除这个item</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>editText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 如果不为空,修改title的值,然后去除eiditing样式</span>                item<span class="token punctuation">.</span>title<span class="token operator">=</span>editText<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>currentEditing<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 局部自定义属性</span>            <span class="token literal-property property">editingFocus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">focus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 路由状态切换</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> hash<span class="token operator">=</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'all'</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>app<span class="token punctuation">.</span>filterState<span class="token operator">=</span>hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 页面第一次进来,保持状态</span>    window<span class="token punctuation">.</span><span class="token function">onhashchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><div class="caption"><span>index.html</span></div><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Template • TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-app-css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- CSS overrides - remove if you don't need it --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/app.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>What needs to be done?<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>addTodo<span class="token punctuation">'</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This section should be hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>todos.length<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleAll<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleState<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mark all as complete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- These are here just to show the structure of the list items --></span><span class="token comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --></span><span class="token comment">&lt;!-- vue列表渲染 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) of filterTodos<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;completed:item.completed,editing:item===currentEditing&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.completed<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">@dblclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentEditing=item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeTodo(index,$event)<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.title<span class="token punctuation">'</span></span> <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.esc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>currentEditing=null<span class="token punctuation">'</span></span> <span class="token attr-name">v-editing-focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item===currentEditing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This footer should hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This should be `0 items left` by default --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>&#123;&#123;leftCount&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 个待办<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Remove this if you don't implement routing --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState===<span class="token punctuation">'</span>all<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState===<span class="token punctuation">'</span>active<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>未完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState===<span class="token punctuation">'</span>completed<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/completed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Hidden if no completed items are left ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear-completed<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeAllDone<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>清除已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Double-click to edit a todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Remove</span> <span class="token attr-name">the</span> <span class="token attr-name">below</span> <span class="token attr-name">line</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Template by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://sindresorhus.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sindre Sorhus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Change</span> <span class="token attr-name">this</span> <span class="token attr-name">out</span> <span class="token attr-name">with</span> <span class="token attr-name">your</span> <span class="token attr-name">name</span> <span class="token attr-name">and</span> <span class="token attr-name">url</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Created by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>you<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Part of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Scripts here. Don't remove ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，完成了本地Todo。</p><h2 id="4-配置本地服务"><a href="#4-配置本地服务" class="headerlink" title="4. 配置本地服务"></a>4. 配置本地服务</h2><p>由于要在<code>heroku</code>上部署，这一节将使用<code>Node</code>创建<code>Web</code>服务。本节有一部分参考<a target="_blank" rel="noopener" href="https://github.com/heroku/node-js-getting-started.git">heroku的项目</a>，使用的是 Web 开发框架<a target="_blank" rel="noopener" href="https://www.expressjs.com.cn/">Express</a> </p><p>通过<code>npm</code>下载<code>express</code>和<code>ejs</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express<span class="token function">npm</span> <span class="token function">install</span> ejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在项目根目录下添加<code>index.js</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">5000</span><span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span> <span class="token constant">PORT</span> <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示</p><pre><code>Listening on 5000</code></pre><p>打开 <a target="_blank" rel="noopener" href="http://localhost:5000/">http://localhost:5000</a>或者<a target="_blank" rel="noopener" href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a>访问本地服务，使用本地IP也是可以的。</p><h2 id="5-部署到heroku"><a href="#5-部署到heroku" class="headerlink" title="5. 部署到heroku"></a>5. 部署到heroku</h2><p>部署之前需要在项目根目录添加一个文件<code>Procfile</code></p><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>Procfile</span></div><code class="language-bash">web: <span class="token function">node</span> index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-通过GitHub部署"><a href="#1-通过GitHub部署" class="headerlink" title="1). 通过GitHub部署"></a>1). 通过GitHub部署</h3><p>先上传到<code>Github</code>，然后登录<a target="_blank" rel="noopener" href="https://dashboard.heroku.com/apps">heroku网站</a>在 web控制台配置里配置即可。</p><h3 id="2-直接在本地上传部署"><a href="#2-直接在本地上传部署" class="headerlink" title="2). 直接在本地上传部署"></a>2). 直接在本地上传部署</h3><p>下载<a target="_blank" rel="noopener" href="https://devcenter.heroku.com/articles/heroku-cli#download-and-install">Heroku CLI</a></p><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>Windows命令</span></div><code class="language-bash">heroku create ::创建<span class="token function">git</span> push heroku master ::部署heroku ps:scale <span class="token assign-left variable">web</span><span class="token operator">=</span><span class="token number">1</span> ::运行实例heroku <span class="token function">open</span> ::打开预览heroku logs --tail ::网站运行日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他可能用到的</p><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>Windows命令</span></div><code class="language-bash">heroku <span class="token builtin class-name">local</span> web ::本地启动<span class="token function">git</span> <span class="token function">add</span> -u<span class="token function">git</span> commit -m  <span class="token string">"Todo"</span><span class="token function">git</span> push heroku master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-后端数据库"><a href="#6-后端数据库" class="headerlink" title="6. 后端数据库"></a>6. 后端数据库</h2><p>在这里使用的<code>postgresql</code>数据库。在<code>heroku</code>中添加<code>postgresql</code>数据库。<a target="_blank" rel="noopener" href="https://elements.heroku.com/addons/heroku-postgresql">查看文档</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku addons:create heroku-postgresql:hobby-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看数据库(postgresql)。通过以下两种方式之一检索PG连接字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku pg:credentials DATABASEheroku config -s <span class="token operator">|</span> <span class="token function">grep</span> DATABASE_URL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置主数据库(postgresql)，如果存在多个数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku pg:promote HEROKU_POSTGRESQL_RED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看数据库使用信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku pg:info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-封装对postgresql的增删改查基本操作"><a href="#7-封装对postgresql的增删改查基本操作" class="headerlink" title="7. 封装对postgresql的增删改查基本操作"></a>7. 封装对postgresql的增删改查基本操作</h2><ul><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/cheneypao/article/details/51378053">Nodejs对postgresql基本操作的封装·cheneypao·CSDN</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>PG.js</span></div><code class="language-javascript"><span class="token keyword">var</span> pg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> conString <span class="token operator">=</span> <span class="token string">"postgres://username:password@localhost/databasename"</span><span class="token punctuation">;</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pg<span class="token punctuation">.</span>Client</span><span class="token punctuation">(</span>conString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> <span class="token function-variable function">PG</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"准备向****数据库连接..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getConnection</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'could not connect to postgres'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT NOW() AS "theTime"'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error running query'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hbdfxt数据库连接成功..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 查询函数</span><span class="token comment">//@param str 查询语句</span><span class="token comment">//@param value 相关值</span><span class="token comment">//@param cb 回调函数</span><span class="token keyword">var</span> <span class="token function-variable function">clientHelper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>                <span class="token function">cb</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//增</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"insert into "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">") values("</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//删除</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"delete from "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span> <span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//修改</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param mainfields 条件字段和值，json格式</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>mainfields<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"update "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" set "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">in</span> mainfields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mainfields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">//查询</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式</span><span class="token comment">//@param returnfields 返回字段</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">select</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>returnfields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> returnStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>returnfields<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        returnStr <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        returnStr<span class="token operator">=</span> returnfields<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"select "</span><span class="token operator">+</span>returnStr<span class="token operator">+</span> <span class="token string">" from "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">var</span> pgclient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./PG.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引用上述文件</span>pgclient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用上述四个函数即可</span>pgclient<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">'userinfo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> admin<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note warning"><p>创建数据库表可以在<code>PG.js</code>中完善。</p></div><h2 id="8-后续"><a href="#8-后续" class="headerlink" title="8. 后续"></a>8. 后续</h2><p>以上的代码并不符合我的预期，在之后我对代码稍作修改。</p><details><summary>js/app.js(折叠)</summary><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>js/app.js</span></div><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> todos<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// vue实例</span>    window<span class="token punctuation">.</span>app<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#todoapp'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">todos</span><span class="token operator">:</span> todos<span class="token punctuation">,</span>            <span class="token literal-property property">currentEditing</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token literal-property property">filterState</span><span class="token operator">:</span><span class="token string">'all'</span><span class="token punctuation">,</span>            <span class="token literal-property property">toggleAllstate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// this.getTodo();</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">leftCount</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">.</span>length            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">filterTodos</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string">'active'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">'completed'</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 全选的联动效果</span>            <span class="token function-variable function">toggleState</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>item<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/getTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//console.log(res);</span>_this<span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>_this<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span>item<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取数据库的Todos：\n'</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'_this.todos：\n'</span><span class="token punctuation">,</span>_this<span class="token punctuation">.</span>todos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 设置Owner</span>            <span class="token function">setOwner</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> ownerText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前文本的值</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ownerText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> ownerText<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 添加任务</span>            <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> todoText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前文本的值</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>todoText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> lastTodo<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> id<span class="token operator">=</span>lastTodo<span class="token operator">?</span>lastTodo<span class="token punctuation">.</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">id</span><span class="token operator">:</span>id<span class="token punctuation">,</span>                    <span class="token literal-property property">title</span><span class="token operator">:</span>todoText<span class="token punctuation">,</span>                    <span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//owner: this.owner</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/addTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>todoText<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 全部完成/全不完成</span>            <span class="token function">toggleAll</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> checked<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>completed<span class="token operator">=</span>checked<span class="token punctuation">)</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/toggleAll'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span> checked<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// check单个任务项</span>            <span class="token function">checkTodo</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token keyword">let</span> todo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment">// todo.completed = !(todo.completed)</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/changeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">filter</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> todo<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_this<span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 删除单个任务项</span>            <span class="token function">removeTodo</span><span class="token punctuation">(</span><span class="token parameter">delIndex<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>delIndex<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/removeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>data<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span>data<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_this<span class="token punctuation">.</span><span class="token function">getTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 显示所有未完成任务数(删除所有已完成)</span>            <span class="token function">removeAllDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>completed<span class="token punctuation">;</span><span class="token comment">//return true,即item.completed为false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/removeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 保存编辑项</span>            <span class="token function">saveEdit</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> editText<span class="token operator">=</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果为空,直接删除这个item</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>editText<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeTodo</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>event<span class="token punctuation">)</span>                    <span class="token comment">//return this.todos.splice(index,1);</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 如果不为空,修改title的值,然后去除eiditing样式</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'/changeTodo'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">editText</span><span class="token operator">:</span>editText<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">filter</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>item<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span> _this<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                item<span class="token punctuation">.</span>title<span class="token operator">=</span>editText<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>currentEditing<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 局部自定义属性</span>            <span class="token literal-property property">editingFocus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">focus</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 路由状态切换</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> hash<span class="token operator">=</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'all'</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>app<span class="token punctuation">.</span>filterState<span class="token operator">=</span>hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 页面第一次进来,保持状态</span>    window<span class="token punctuation">.</span><span class="token function">onhashchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>index.html (折叠)</summary><blockquote><pre class="line-numbers language-html" data-language="html"><div class="caption"><span>index.html</span></div><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Template • TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-app-css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- CSS overrides - remove if you don't need it --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/app.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todoapp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>你的名字<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 40%<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ccc<span class="token punctuation">;</span><span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0 1px 1px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.075<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> -12px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>setOwner<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new-todo<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>What needs to be done?<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>addTodo<span class="token punctuation">'</span></span> <span class="token attr-name">v-focus</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This section should be hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>todos.length<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleAll<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>toggleState<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle-all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mark all as complete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- These are here just to show the structure of the list items --></span><span class="token comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --></span><span class="token comment">&lt;!-- vue列表渲染 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) of filterTodos<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>&#123;completed:item.completed,editing:item===currentEditing&#125;<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toggle<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>checkTodo(index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.completed<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">@dblclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentEditing=item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item.title&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeTodo(index,$event)<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>item.title<span class="token punctuation">'</span></span> <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>saveEdit(item,index,$event)<span class="token punctuation">'</span></span> <span class="token attr-name">@keyup.esc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>currentEditing=null<span class="token punctuation">'</span></span> <span class="token attr-name">v-editing-focus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item===currentEditing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This footer should hidden by default and shown when there are todos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- This should be `0 items left` by default --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>&#123;&#123;leftCount&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 个待办<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Remove this if you don't implement routing --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState===<span class="token punctuation">'</span>all<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState===<span class="token punctuation">'</span>active<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>未完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;selected:filterState===<span class="token punctuation">'</span>completed<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/completed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Hidden if no completed items are left ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear-completed<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>removeAllDone<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>清除已完成<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Double-click to edit a todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Remove</span> <span class="token attr-name">the</span> <span class="token attr-name">below</span> <span class="token attr-name">line</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Template by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://sindresorhus.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sindre Sorhus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">Change</span> <span class="token attr-name">this</span> <span class="token attr-name">out</span> <span class="token attr-name">with</span> <span class="token attr-name">your</span> <span class="token attr-name">name</span> <span class="token attr-name">and</span> <span class="token attr-name">url</span> <span class="token attr-name">↓</span> <span class="token attr-name">--</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Created by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>you<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Part of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://todomvc.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>TodoMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Scripts here. Don't remove ↓ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/todomvc-common/base.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node_modules/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>index.js(折叠)</summary><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">5000</span><span class="token keyword">const</span> tableNme <span class="token operator">=</span> <span class="token string">'todos'</span><span class="token keyword">var</span> cb<span class="token operator">=</span>console<span class="token punctuation">.</span>log<span class="token punctuation">;</span><span class="token keyword">var</span> pgclient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./PG.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 引用文件</span>pgclient<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getTodo'</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">//async</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fields:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'completed'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/addTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addTodo'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/toggleAll'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'toggleAll'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/removeTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'removeTodo:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">,</span> <span class="token literal-property property">owner</span><span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/saveEdit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'saveEdit:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">title</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">,</span><span class="token literal-property property">owner</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>owner<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">completed</span><span class="token operator">:</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>completed<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/changeTodo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'changeTodo.query:'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tableNme<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from todos'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 直接在地址栏输入，以添加数据表，createTable/deletTable 这两个操作比较危险，仅建议在开发时使用</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/createTable'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> que <span class="token operator">=</span> pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'CREATE TABLE "public"."todos" (  "id" serial4 ,  "title" varchar(255) NOT NULL,  "completed" bool NOT NULL,  "owner" varchar(255) NOT NULL,  PRIMARY KEY ("id"));'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/deletTable'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> que <span class="token operator">=</span> pgclient<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'DROP TABLE todos;'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>cb<span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span> <span class="token constant">PORT</span> <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>PG.js(折叠)</summary><blockquote><pre class="line-numbers language-javascript" data-language="javascript"><div class="caption"><span>index.js</span></div><code class="language-javascript"><span class="token keyword">var</span> pg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  heroku pg:credentials DATABASE //查询数据库信息</span><span class="token comment">// heroku config -s | grep DATABASE_URL</span><span class="token keyword">var</span> conString <span class="token operator">=</span> <span class="token string">"postgres://UesrName:PassWord@Host:Port/DataBase"</span><span class="token punctuation">;</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pg<span class="token punctuation">.</span>Client</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">connectionString</span><span class="token operator">:</span> conString<span class="token punctuation">,</span><span class="token literal-property property">ssl</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">PG</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"准备向postgres数据库连接..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getConnection</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'could not connect to postgres'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT NOW() AS "theTime"'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'error running query'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功..."</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>theTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 执行者函数</span><span class="token comment">//@param str 查询语句</span><span class="token comment">//@param value 相关值</span><span class="token comment">//@param cb 回调函数</span><span class="token keyword">var</span> <span class="token function-variable function">clientHelper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token string">"err: "</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows <span class="token operator">!=</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>                <span class="token function">cb</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                 <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//增</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"insert into "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">") values("</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span><span class="token comment">// str += ";";</span><span class="token comment">// str= "insert into todos (id,title,completed) values ($1::int, $2::varchar, $3::bool)"</span><span class="token comment">// value = [1,'吃饭',false]</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//删除</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"delete from "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span> <span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//修改</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param mainfields 条件字段和值，json格式</span><span class="token comment">//@param fields 更新的字段和值，json格式</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>mainfields<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"update "</span><span class="token operator">+</span>tablename<span class="token operator">+</span><span class="token string">" set "</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" where "</span><span class="token punctuation">;</span>    field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">in</span> mainfields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mainfields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    str <span class="token operator">+=</span> field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查询</span><span class="token comment">//@param tablename 数据表名称</span><span class="token comment">//@param fields 条件字段和值，json格式 【筛选，例如：&#123;age:25&#125;,即仅查询age=25的数据】</span><span class="token comment">//@param returnfields 返回字段 数组格式【表中字段名】</span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">select</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span>fields<span class="token punctuation">,</span>returnfields<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tablename<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> returnStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>returnfields<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        returnStr <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        returnStr<span class="token operator">=</span> returnfields<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"select "</span><span class="token operator">+</span>returnStr<span class="token operator">+</span> <span class="token string">" from "</span><span class="token operator">+</span> tablename<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> field <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"=$"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str <span class="token operator">+=</span> <span class="token string">" where "</span><span class="token operator">+</span>field<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" and "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//str = "select * from todo;";//######</span><span class="token comment">//str = "DELETE FROM todo;";//######</span>    <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//自定义</span><span class="token comment">//@param str SQL语句</span><span class="token comment">//@param value </span><span class="token comment">//@param cb 回调函数</span><span class="token class-name">PG</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">query</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">clientHelper</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>value<span class="token punctuation">,</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><details><summary>package.json(折叠)</summary><blockquote><pre class="line-numbers language-json" data-language="json"><div class="caption"><span>package.json</span></div><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node index.js"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"node test.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"^0.19.2"</span><span class="token punctuation">,</span>    <span class="token property">"body-parser"</span><span class="token operator">:</span> <span class="token string">"^1.19.0"</span><span class="token punctuation">,</span>    <span class="token property">"ejs"</span><span class="token operator">:</span> <span class="token string">"^2.7.4"</span><span class="token punctuation">,</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.17.1"</span><span class="token punctuation">,</span>    <span class="token property">"express-session"</span><span class="token operator">:</span> <span class="token string">"^1.17.1"</span><span class="token punctuation">,</span>    <span class="token property">"http-server"</span><span class="token operator">:</span> <span class="token string">"^0.12.3"</span><span class="token punctuation">,</span>    <span class="token property">"node-postgres"</span><span class="token operator">:</span> <span class="token string">"^0.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"pbkdf2-password"</span><span class="token operator">:</span> <span class="token string">"^1.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"pg"</span><span class="token operator">:</span> <span class="token string">"^8.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"todomvc-app-css"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"todomvc-common"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.6.11"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></details><h2 id="X-关于登录"><a href="#X-关于登录" class="headerlink" title="X. 关于登录"></a>X. 关于登录</h2><p>关于登录操作官网有个<a target="_blank" rel="noopener" href="https://github.com/expressjs/express/blob/master/examples/auth/index.js">示例</a><br>下载两个模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> pbkdf2-password<span class="token function">npm</span> <span class="token function">install</span> express-session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a target="_blank" rel="noopener" href="http://todomvc.com/">Todomvc</a></li><li><a target="_blank" rel="noopener" href="https://www.cnblogs.com/EricZLin/p/9369260.html">框架入门经典项目TodoMVC·澎湃_L·博客园</a></li><li><a target="_blank" rel="noopener" href="https://vuejs.org/v2/examples/todomvc.html">vuejs示例</a></li><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/cheneypao/article/details/51378053">Nodejs对postgresql基本操作的封装·cheneypao·CSDN</a></li><li><a target="_blank" rel="noopener" href="https://www.jianshu.com/p/7bc34e56fa39">Heroku 使用教程</a></li><li><a target="_blank" rel="noopener" href="https://www.jianshu.com/p/5007e533eff9">使用Node.js在Heroku上开始</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用VueJs实现官方的 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt; 示例，将其数据存储到后端数据库，并部署上线。&lt;br&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://vuejs.org/v2/examples/todomvc.html&quot;&gt;示例&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Django创建站点(1)</title>
    <link href="https://blog.simon7.top/20210907/%E4%BD%BF%E7%94%A8django%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9-1/"/>
    <id>https://blog.simon7.top/20210907/%E4%BD%BF%E7%94%A8django%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9-1/</id>
    <published>2021-09-07T03:37:43.000Z</published>
    <updated>2021-09-07T03:37:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速建立站点"><a href="#快速建立站点" class="headerlink" title="快速建立站点"></a>快速建立站点</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建新的conda环境</span>conda create -n django python django<span class="token comment"># 创建新站点</span>django-admin startproject locallibrary<span class="token builtin class-name">cd</span> locallibrary<span class="token comment"># 运行web服务器</span>python ./manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><div class="note info"><p>conda(4.10.3) 虚拟环境</p><ul><li>python: 3.7</li><li>Django: 2.2.5</li><li>mysqlclient: 1.3.14</li></ul><p><code>mysqlclient</code> 是可选的，没有支持最高版本的 <code>Python</code> 。 <code>Django</code> 默认使用的数据库是 <code>Sqlit3</code>。</p></div><h2 id="学习目标…"><a href="#学习目标…" class="headerlink" title="学习目标…"></a>学习目标…</h2><ul><li>运用Django的工具创建网站和应用的框架。</li><li>启动和停止开发用的服务器。</li><li>创建模型（models）用来代表应用里的数据。</li><li>运用Django的admin站点填充网站数据。</li><li>面对不同的网络请求，创建视图函数（views）取回相应的数据。并把数据用模板（templates ）渲染成HTML展示在浏览器里。</li><li>创建网络分发器，将不同的URL模式分发给特定的视图函数（views）。</li><li>添加用户认证和会话（sessions）管理网站行为和进入权限。</li><li>使用表单。</li><li>为应用编写测试。</li><li>有效运用Django的安全系统。</li><li>把应用布置到生产环境中。</li></ul><h2 id="建立新的应用"><a href="#建立新的应用" class="headerlink" title="建立新的应用"></a>建立新的应用</h2><p>框架搭建网站的过程：</p><ul><li>使用<code>django-admin</code>工具创建工程的文件夹，基本的文件模板和工程管理脚本（<code>manage.py</code>）。</li><li>用<code>manage.py</code> 创建一个或多个应用。</li><li>在工程里注册新的应用。</li><li>为每个应用分配url。</li></ul><p>locallibrary项目的子文件夹是整个网站的进入点：</p><ul><li><strong>settings.py</strong> 包含所有的网站设置。这是可以注册所有创建的应用的地方，也是静态文件，数据库配置的地方，等等。</li><li><strong>urls.py</strong> 定义了网站url到view的映射。虽然这里可以包含所有的url，但是更常见的做法是把应用相关的url包含在相关应用中，你可以在接下来的教程里看到。</li><li><strong>wsgi.py</strong> 帮助Django应用和网络服务器间的通讯。你可以把这个当作模板。</li><li><strong>manage.py</strong> 脚本可以创建应用，和数据库通讯，启动开发用网络服务器。</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建catalog应用框架</span>python manage.py startapp catalog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>catalog应用框架需要后续的补充修改，以达到自己的预期</p><ul><li><strong>views.py</strong> 视图</li><li><strong>models.py</strong> 模型</li><li><strong>tests.py</strong> 测试</li><li><strong>admin.py</strong> 网站管理设置</li><li><strong>apps.py</strong> 注册应用</li><li><strong>migration</strong> 文件夹，用来存储“migrations”——当你修改你的数据模型时，这个文件会自动升级你的数据库。</li><li>可能需要补充 url映射，网站模板，静态文件</li></ul><h3 id="站点的setting-py文件配置"><a href="#站点的setting-py文件配置" class="headerlink" title="站点的setting.py文件配置"></a>站点的<code>setting.py</code>文件配置</h3><ul><li><strong>ALLOWED_HOSTS</strong> 域名白名单，ALLOWED_HOSTS &#x3D; [‘127.0.0.1’]</li><li><strong>INSTALLED_APPS</strong> 注册应用。  <pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>    <span class="token string">'catalog.apps.CatalogConfig'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>DATABASES</strong> 数据库，在<a target="_blank" rel="noopener" href="https://docs.djangoproject.com/en/3.2/ref/settings/#databases">Django文档</a>里找到详细的配置数据库的方法</li><li><strong>TIME_ZONE</strong> 时区 <code> TIME_ZONE = &#39;Asia/Shanghai&#39;</code></li><li><strong>SECRET_KEY</strong> 密钥</li><li><strong>DEBUG</strong> 日志，是否在网页显示错误信息</li></ul><h3 id="站点的urls-py文件配置-URL映射器"><a href="#站点的urls-py文件配置-URL映射器" class="headerlink" title="站点的urls.py文件配置 URL映射器"></a>站点的<code>urls.py</code>文件配置 URL映射器</h3><ul><li>将带有 <code>catalog/</code> 的请求转发到模块 <code>catalog.urls</code> (使用相对路径 URL <strong>&#x2F;catalog&#x2F;urls.py</strong>)。  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Use include() to add paths from the catalog application</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> pathurlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'catalog/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'catalog.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>网站的根URL(例：<code>127.0.0.1:8000</code>)重定向到该URL：<code>127.0.0.1:8000/catalog/</code>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Add URL maps to redirect the base URL to our application</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> RedirectViewurlpatterns <span class="token operator">+=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> RedirectView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'/catalog/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在开发期间启用静态文件的服务  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Use static() to add url mapping to serve static files during development (only)</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>static <span class="token keyword">import</span> staticurlpatterns <span class="token operator">+=</span> static<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>STATIC_URL<span class="token punctuation">,</span> document_root<span class="token operator">=</span>settings<span class="token punctuation">.</span>STATIC_ROOT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><p>Django 使用对象关系映射器（ORM），会跟踪更改并创建数据库迁移脚本，运行以下命令来定义数据库中这些模型的表（确保你位于包含 manage.py 的目录中):</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py makemigrationspython manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div class="note warning"><h3 id="每当进行重大更改时，都应重新运行迁移并重新测试站点。"><a href="#每当进行重大更改时，都应重新运行迁移并重新测试站点。" class="headerlink" title="每当进行重大更改时，都应重新运行迁移并重新测试站点。"></a>每当进行重大更改时，都应重新运行迁移并重新测试站点。</h3></div><div class="note success"><p><strong>自此站点的整体骨架构建完成并运行，是时候开始编写代码，让这个网站做它应该做的事情了。</strong></p></div><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>本文依据<a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/learn/Server-side/Django">此教程</a>所撰 </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;快速建立站点&quot;&gt;&lt;a href=&quot;#快速建立站点&quot; class=&quot;headerlink&quot; title=&quot;快速建立站点&quot;&gt;&lt;/a&gt;快速建立站点&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 创建新的conda环境&lt;/span&gt;
conda create -n django python django

&lt;span class=&quot;token comment&quot;&gt;# 创建新站点&lt;/span&gt;
django-admin startproject locallibrary
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; locallibrary

&lt;span class=&quot;token comment&quot;&gt;# 运行web服务器&lt;/span&gt;
python ./manage.py runserver&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="Django" scheme="https://blog.simon7.top/tags/Django/"/>
    
    <category term="Python" scheme="https://blog.simon7.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在博客中插入数学公式</title>
    <link href="https://blog.simon7.top/20210903/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>https://blog.simon7.top/20210903/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</id>
    <published>2021-09-03T09:11:04.000Z</published>
    <updated>2021-09-03T09:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考于：<a target="_blank" rel="noopener" href="https://theme-next.js.org/docs/third-party-services/math-equations">Next 主题</a></p><span id="more"></span><ol><li><p>首先，在主题配置文件中设置<code>mathjax</code>做为渲染引擎.</p><pre class="line-numbers language-base" data-language="base"><div class="caption"><span>next/_config.yml</span></div><code class="language-base">math:  ...  mathjax:    enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后你需要卸载原来的渲染器<code>hexo-renderer-marked</code>，然后安装<code>hexo-renderer-pandoc</code>：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">npm</span> un hexo-renderer-marked <span class="token function">npm</span> i hexo-renderer-pandoc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考于：&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://theme-next.js.org/docs/third-party-services/math-equations&quot;&gt;Next 主题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>快速判断7的倍数</title>
    <link href="https://blog.simon7.top/20210903/%E5%BF%AB%E9%80%9F%E5%88%A4%E6%96%AD7%E7%9A%84%E5%80%8D%E6%95%B0/"/>
    <id>https://blog.simon7.top/20210903/%E5%BF%AB%E9%80%9F%E5%88%A4%E6%96%AD7%E7%9A%84%E5%80%8D%E6%95%B0/</id>
    <published>2021-09-03T08:42:58.000Z</published>
    <updated>2021-09-03T08:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>快速判断7的倍数</p><blockquote><p>如果一个数被7整除，那么它减去一个7的倍数所得的结果也能被7整除。</p></blockquote><span id="more"></span><h2 id="两种方法"><a href="#两种方法" class="headerlink" title="两种方法"></a>两种方法</h2><p>方法一：掐掉个位再减去掐掉数字的两倍<br>例： 6615<br>$$661 - 2 * 5 &#x3D; 651$$<br>$$65 - 2 * 1 &#x3D; 63$$<br>$$6 - 2 * 3 &#x3D; 0$$<br>当然，很明显 <code>63=7*9</code> 。所以当最后的数字是 0 或者是 7 的倍数时，该数可以判定为 7 的倍数；否则不是 7 的倍数。</p><p>方法二：掐掉后三位再减去掐掉的数字<br>例： 2222640<br>$$2222 - 640 &#x3D; 1582$$<br>$$1 - 582 &#x3D; -581$$<br>此时再用法一，判断 581 是否为 7 的倍数<br>$$58 - 2 * 1 &#x3D; 56$$<br>$$5 - 2 * 6 &#x3D; -7$$<br>很明显， <code>56=7*8</code> ，所以 2222640 是 7 的倍数。</p><h2 id="简要分析"><a href="#简要分析" class="headerlink" title="简要分析"></a>简要分析</h2><p>方法一：假设$X&#x3D;10·k + a_1$。<br>$$<br>10·k + a_1 -3<em>7</em>a_1 \<br>&#x3D; 10·k+ a_1-20<em>a_1-a_1 \<br>&#x3D; 10·(k-2</em>a_1) \<br>如果X可以被整除，则(k-2<em>a_1)可以被整除\<br>10·(k-2</em>a_1) \iff k-2*a_1<br>$$</p><p>方法二：假设$X&#x3D;1000·k + a_3$。</p><p>$$<br>1000·k + a_3 &#x3D; 1000·k + a_3 +k -k \<br>&#x3D; 1001·k + a_3 -k \<br>&#x3D; (7<em>11</em>13)·k + (a_3 -k) \<br>如果X可以被整除，则(a_3 -k)可以被整除\<br>(7<em>11</em>13)·k + (a_3 -k) \iff k - a_3<br>$$</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;快速判断7的倍数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个数被7整除，那么它减去一个7的倍数所得的结果也能被7整除。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="数学" scheme="https://blog.simon7.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python 程序统计时间的三种方式</title>
    <link href="https://blog.simon7.top/20210902/python-%E7%A8%8B%E5%BA%8F%E7%BB%9F%E8%AE%A1%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://blog.simon7.top/20210902/python-%E7%A8%8B%E5%BA%8F%E7%BB%9F%E8%AE%A1%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-09-02T06:45:11.000Z</published>
    <updated>2021-09-02T06:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>统计程序执行时间有三种方式：</p><ol><li><code>datetime.datetime.now()</code> 通过当前日期计算时间差；</li><li><code>time.time()</code>通过时间戳计算时间差；</li><li><code>time.clock()</code>获取CPU执行时间 （自python38 中被移除，取而替代的是 <code>time.perf_counter()</code> 或 <code>time.process_time()</code>）</li></ol><span id="more"></span><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方式一</span><span class="token keyword">import</span> datetimestarttime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ...</span>endtime <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>endtime <span class="token operator">-</span> starttime<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span class="token comment"># 方式二</span><span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ...</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">s"</span></span><span class="token punctuation">)</span><span class="token comment"># 方式三 time.clock()</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ...</span>end <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> end<span class="token operator">-</span>start<span class="token comment"># 方式三 time.perf_counter()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="time-perf-counter"><a href="#time-perf-counter" class="headerlink" title="time.perf_counter()"></a>time.perf_counter()</h2><p>（以小数表示的秒为单位）返回一个性能计数器的值，即用于测量较短持续时间的具有最高有效精度的时钟。 它会包括睡眠状态所消耗的时间并且作用于全系统范围。 返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。相似的，<code>time.perf_counter_ns()</code>返回纳秒。</p><h2 id="time-process-time"><a href="#time-process-time" class="headerlink" title="time.process_time()"></a>time.process_time()</h2><p>（以小数表示的秒为单位）返回当前进程的系统和用户 CPU 时间的总计值。 它不包括睡眠状态所消耗的时间。 根据定义它只作用于进程范围。 返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的。相似的，<code>time.process_time_ns()</code>返回纳秒。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;统计程序执行时间有三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;datetime.datetime.now()&lt;/code&gt; 通过当前日期计算时间差；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.time()&lt;/code&gt;通过时间戳计算时间差；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.clock()&lt;/code&gt;获取CPU执行时间 （自python38 中被移除，取而替代的是 &lt;code&gt;time.perf_counter()&lt;/code&gt; 或 &lt;code&gt;time.process_time()&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="python" scheme="https://blog.simon7.top/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.simon7.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>翻译CHM文件</title>
    <link href="https://blog.simon7.top/20210314/%E7%BF%BB%E8%AF%91chm%E6%96%87%E4%BB%B6/"/>
    <id>https://blog.simon7.top/20210314/%E7%BF%BB%E8%AF%91chm%E6%96%87%E4%BB%B6/</id>
    <published>2021-03-14T11:58:39.000Z</published>
    <updated>2021-03-14T11:58:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>CHM文件是 Windows 系统下的帮助文档。而它的内容大多是英文，对于四级没过的小学生很不友好，所以在这里记下翻译CHM文件的历程。</p><span id="more"></span><p>在windows下，CHM文件是调用 <code>C:\windows\hh.exe</code> 来打开的，它是<code>HTML Help Workshop</code>命令行工具<br>同样的，他也可以做反编译！</p><pre class="line-numbers language-none"><code class="language-none">HH.EXE -decompile &lt;输出路径&gt;  &lt;目标chm文件&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然hh.exe 可以打开CHM文件，但这个程序并没有做主要的工作，而是把参数丢给另外一个程序，<del>然如其名呵呵</del></p><table><thead><tr><th align="left">参数</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">-800</td><td align="left"></td></tr><tr><td align="left">-title</td><td align="left"></td></tr><tr><td align="left">-register</td><td align="left">注册hh.exe，将其设为默认的chm文档的shell</td></tr><tr><td align="left">-decompile</td><td align="left">反编译chm文件</td></tr><tr><td align="left">-mapid</td><td align="left">定位htm</td></tr><tr><td align="left">-safe</td><td align="left">安全模式–快捷键失效</td></tr></tbody></table><hr><p>参考链接：</p><ul><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/SysProgram/article/details/6250394">逆向了一下hh.exe</a></li><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/sibang/article/details/38732285">hh.exe的另类用法</a></li><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/tuwen/article/details/3166696">hh.exe参数（全）</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;CHM文件是 Windows 系统下的帮助文档。而它的内容大多是英文，对于四级没过的小学生很不友好，所以在这里记下翻译CHM文件的历程。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Python路径操作新标准：pathlib 模块</title>
    <link href="https://blog.simon7.top/20201209/python%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%96%B0%E6%A0%87%E5%87%86%EF%BC%9Apathlib-%E6%A8%A1%E5%9D%97/"/>
    <id>https://blog.simon7.top/20201209/python%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E6%96%B0%E6%A0%87%E5%87%86%EF%BC%9Apathlib-%E6%A8%A1%E5%9D%97/</id>
    <published>2020-12-09T08:07:38.000Z</published>
    <updated>2020-12-09T08:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a target="_blank" rel="noopener" href="https://www.cnblogs.com/nickchen121/p/11596223.html">pathlib 模块</a><br><a target="_blank" rel="noopener" href="https://docs.python.org/zh-cn/3/library/pathlib.html">官方的回答</a></p><span id="more"></span><p>获取当前路径</p><p>os.getcwd()</p><p>pathlib.Path.cwd()</p><p>获取父目录</p><p>os.path.dirname(os.getcwd())</p><p>str(pathlib.Path.cwd().parent)</p><p>拼接路径</p><p>os.path.join(os.getcwd(), ‘a’, ‘b’)</p><p>paths &#x3D; (‘a’, ‘b’)<br>pathlib.Path.cwd().joinpath(*paths)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.cnblogs.com/nickchen121/p/11596223.html&quot;&gt;pathlib 模块&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://docs.python.org/zh-cn/3/library/pathlib.html&quot;&gt;官方的回答&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>何为Metaclass</title>
    <link href="https://blog.simon7.top/20201205/%E4%BD%95%E4%B8%BAmetaclass/"/>
    <id>https://blog.simon7.top/20201205/%E4%BD%95%E4%B8%BAmetaclass/</id>
    <published>2020-12-05T07:20:32.000Z</published>
    <updated>2020-12-05T07:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-metaclass-？"><a href="#什么是-metaclass-？" class="headerlink" title="什么是 metaclass ？"></a>什么是 metaclass ？</h2><p>metaclass 意为 元类 超类，可以对子类进行操作，就像装饰器那样可以动态定制和修改被装饰的类，metaclass 可以动态的定制或修改继承它的子类。</p><span id="more"></span><h2 id="metaclass-能解决什么问题？"><a href="#metaclass-能解决什么问题？" class="headerlink" title="metaclass 能解决什么问题？"></a>metaclass 能解决什么问题？</h2><p>只需要实现一个 metaclass 超类，然后再实现一个子类继承这个 metaclass，就可以根据不同的配置文件自动拉取不同的类，这极大地提高了效率。</p><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">In<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Mymeta</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> dic<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> dic<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===>Mymeta.__init__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>yaml_tag<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===>Mymeta.__new__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===>Mymeta.__call__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         obj <span class="token operator">=</span> cls<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         cls<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> obj   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> In<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>Mymeta<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     yaml_tag <span class="token operator">=</span> <span class="token string">'!Foo'</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Foo.__init__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Foo.__new__'</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>Mymeta<span class="token punctuation">.</span>__new__Mymeta<span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>Mymeta<span class="token punctuation">.</span>__init__Foo<span class="token punctuation">&#123;</span><span class="token string">'__module__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'__qualname__'</span><span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span> <span class="token string">'yaml_tag'</span><span class="token punctuation">:</span> <span class="token string">'!Foo'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function Foo<span class="token punctuation">.</span>__init__ at <span class="token number">0x0000000007EF3828</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function Foo<span class="token punctuation">.</span>__new__ at <span class="token number">0x0000000007EF3558</span><span class="token operator">></span><span class="token punctuation">&#125;</span>!FooIn<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> foo <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>Mymeta<span class="token punctuation">.</span>__call__Foo<span class="token punctuation">.</span>__new__Foo<span class="token punctuation">.</span>__init__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的运行结果可以发现在定义 class Foo() 时，会依次调用 MyMeta 的 <code>__new__</code> 和 <code>__init__</code> 方法构建 Foo 类，然后在调用 foo &#x3D; Foo() 创建类的实例对象时，才会调用 MyMeta 的 <code>__call__</code> 方法来调用 Foo 类的 <code>__new__</code> 和 <code>__init__</code> 方法。</p><p>把上面的例子运行完之后就会明白很多了，正常情况下我们在父类中是不能对子类的属性进行操作，但是元类可以。换种方式理解：元类、装饰器、类装饰器都可以归为元编程。</p><h2 id="底层是如何实现-metaclass-的？"><a href="#底层是如何实现-metaclass-的？" class="headerlink" title="底层是如何实现 metaclass 的？"></a>底层是如何实现 metaclass 的？</h2><p>第一，所有的 Python 的用户定义类，都是 type 这个类的实例。<br>第二，用户自定义类，只不过是 type 类的 <code>__call__</code> 运算符重载<br>第三，metaclass 是 type 的子类，通过替换 type 的 <code>__call__</code> 运算符重载机制，“超越变形”正常的类</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是-metaclass-？&quot;&gt;&lt;a href=&quot;#什么是-metaclass-？&quot; class=&quot;headerlink&quot; title=&quot;什么是 metaclass ？&quot;&gt;&lt;/a&gt;什么是 metaclass ？&lt;/h2&gt;&lt;p&gt;metaclass 意为 元类 超类，可以对子类进行操作，就像装饰器那样可以动态定制和修改被装饰的类，metaclass 可以动态的定制或修改继承它的子类。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>详解Python装饰器</title>
    <link href="https://blog.simon7.top/20201204/%E8%AF%A6%E8%A7%A3python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://blog.simon7.top/20201204/%E8%AF%A6%E8%A7%A3python%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-12-04T05:36:59.000Z</published>
    <updated>2020-12-04T05:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。这是一项强大的功能，但是若想掌握，必须理解闭包。</p><footer><strong>[巴西]Luciano Ramalho [译]安道 吴珂</strong><cite>Fluent Python</cite></footer></blockquote><span id="more"></span><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在了解装饰器之前先讲一下闭包，闭包是一种特殊的函数，这种函数由多个函数的嵌套组成，且称之为外函数和内函数，外函数返回值是内函数的引用，此时就构成了闭包。构建一个闭包有以下几点要求：</p><ol><li>多个函数的嵌套</li><li>必须返回一个函数对象</li><li>返回的那个函数必须引用外部变量<br>闭包的优点：</li></ol><ul><li>闭包可以保存运行环境，即在闭包内的变量是不能被轻易修改的；</li><li>闭包的好处：提高代码的可复用性。<br>举个栗子：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">out_func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">in_func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n<span class="token operator">*</span>num    <span class="token keyword">return</span> in_funcdemo <span class="token operator">=</span> out_func<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>res <span class="token operator">=</span> demo<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器也是一种闭包，只不过它的参数是被装饰的函数。举个栗子，定义一个装饰器，计算函数的执行时间：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment"># 定义装饰器</span><span class="token keyword">def</span> <span class="token function">time_calc</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>                start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>                 exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">return</span> f        <span class="token keyword">return</span> wrapper       <span class="token comment"># 使用装饰器</span><span class="token decorator annotation punctuation">@time_calc</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token decorator annotation punctuation">@time_calc</span><span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的装饰器与<code>add = time_calc(add)</code>含义相同。但是这样的装饰器仍有缺陷，执行<code>print(add.__name__)</code>语句会发现输出的并不是<code>add</code>，而是<code>wrapper</code>，是因为这个函数重写了<code>add</code>的名字和注释文档。幸运的是，Python中<code>functools.wraps</code>函数可以解决这个问题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">time_calc</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>        exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunTime'</span><span class="token punctuation">,</span>exec_time<span class="token punctuation">)</span>        <span class="token keyword">return</span> f    <span class="token keyword">return</span> wrapper   <span class="token decorator annotation punctuation">@time_calc</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而上面的例子除了可以用函数来定义，也可以用类来定义。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">class</span> <span class="token class-name">time_calc</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>            exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunTime'</span><span class="token punctuation">,</span>exec_time<span class="token punctuation">)</span>            <span class="token keyword">return</span> f        <span class="token keyword">return</span> wrapper     <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@time_calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来个与它类似的，找不同！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">class</span> <span class="token class-name">time_calc</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_func <span class="token operator">=</span> func    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            f <span class="token operator">=</span> self<span class="token punctuation">.</span>_func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kargs<span class="token punctuation">)</span>            exec_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunTime'</span><span class="token punctuation">,</span>exec_time<span class="token punctuation">)</span>            <span class="token keyword">return</span> f        <span class="token keyword">return</span> wrapper     <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token decorator annotation punctuation">@time_calc</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h2><p>常见的有三种：<code>@property</code>、<code>@staticmethod</code>、<code>@classmethod</code></p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>把类内方法当成属性来使用，必须要有返回值，相当于getter；假如没有定义 @func.setter 修饰方法的话，就是只读属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将 property 函数用作装饰器可以很方便的创建只读属性</span><span class="token comment"># 下面的代码将 voltage() 方法转化成同名只读属性的 getter 方法。</span><span class="token keyword">class</span> <span class="token class-name">Parrot</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_voltage <span class="token operator">=</span> <span class="token number">100000</span>     <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">voltage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Get the current voltage."""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_voltage<span class="token comment"># property 的 getter,setter 和 deleter 方法同样可以用作装饰器</span><span class="token comment"># 下面两个例子是完全相同的</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">getx</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    <span class="token keyword">def</span> <span class="token function">setx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">delx</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>_x    x <span class="token operator">=</span> <span class="token builtin">property</span><span class="token punctuation">(</span>getx<span class="token punctuation">,</span> setx<span class="token punctuation">,</span> delx<span class="token punctuation">,</span> <span class="token string">"I'm the 'x' property."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""I'm the 'x' property."""</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x    <span class="token decorator annotation punctuation">@x<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> value    <span class="token decorator annotation punctuation">@x<span class="token punctuation">.</span>deleter</span>    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>_x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="staicmethod"><a href="#staicmethod" class="headerlink" title="@staicmethod"></a>@staicmethod</h3><p>静态方法，不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。</p><h3 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h3><p>类方法，不需要self参数，但第一个参数需要是表示自身类的cls参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">"三种方法的比较"</span>        <span class="token keyword">def</span> <span class="token function">instance_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用实例方法"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">class_method</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用类方法"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在类方法中 访问类属性 text: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在类方法中 调用实例方法 instance_method: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">static_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"调用静态方法"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在静态方法中 访问类属性 text: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Demo<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在静态方法中 调用实例方法 instance_method: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># 实例化对象</span>    d <span class="token operator">=</span> Demo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 对象可以访问 实例方法、类方法、静态方法</span>    <span class="token comment"># 通过对象访问text属性</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment"># 通过对象调用实例方法</span>    d<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 通过对象调用类方法</span>    d<span class="token punctuation">.</span>class_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 通过对象调用静态方法</span>    d<span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 类可以访问类方法、静态方法</span>    <span class="token comment"># 通过类访问text属性</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Demo<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment"># 通过类调用类方法</span>    Demo<span class="token punctuation">.</span>class_method<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 通过类调用静态方法</span>    Demo<span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>在定义静态类方法和类方法时，@staticmethod 装饰的静态方法里面，想要访问类属性或调用实例方法，必须需要把类名写上；<br>而@classmethod装饰的类方法里面，会传一个cls参数，代表本类，这样就能够避免手写类名的硬编码。<br>在调用静态方法和类方法时，实际上写法都差不多，一般都是通过 类名.静态方法() 或 类名.类方法()。<br>也可以用实例化对象去调用静态方法和类方法，但为了和实例方法区分，最好还是用类去调用静态方法和类方法。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>假如不需要用到与类相关的属性或方法时，就用静态方法@staticmethod；<br>假如需要用到与类相关的属性或方法，然后又想表明这个方法是整个类通用的，而不是对象特异的，就可以使用类方法@classmethod。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;&lt;p&gt;函数装饰器用于在源码中“标记”函数，以某种方式增强函数的行为。这是一项强大的功能，但是若想掌握，必须理解闭包。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;[巴西]Luciano Ramalho [译]安道 吴珂&lt;/strong&gt;&lt;cite&gt;Fluent Python&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>GC算法介绍</title>
    <link href="https://blog.simon7.top/20201203/gc%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.simon7.top/20201203/gc%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-12-03T03:35:48.000Z</published>
    <updated>2020-12-03T03:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍-GC"><a href="#介绍-GC" class="headerlink" title="介绍 GC"></a>介绍 GC</h2><p>GC(Garbage Collection , 垃圾收集)是将程序运行过程中产生的一些无用的对象占用的空间进行释放，避免 OOM(Out Of Memory , 内存溢出)。<br>常用的GC算法有<code>引用计数算法</code>、<code>标记-清除算法</code>、<code>复制算法</code>、<code>标记-整理算法</code></p><span id="more"></span><blockquote><p>在 C&#x2F;C++ 里是由程序猿自己去申请、管理和释放内存空间，因此没有GC的概念。<br>在 Java 中，后台专门有一个专门用于垃圾回收的线程来进行监控、扫描，自动将一些无用的内存进行释放，这就是垃圾收集的一个基本思想，目的在于防止由程序猿引入的人为的内存泄露。<br>在 Python 中垃圾回收的主要算法是引用计数。</p></blockquote><p>早在1960年 Lisp 就使用了 GC。<br>GC 主要是完成三件事情：</p><ul><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ul><p>GC算法的评判标准主要是以下4点：</p><ol><li>吞吐量：即单位时间内的处理能力。</li><li>最大暂停时间：因执行GC而暂停执行程序所需的时间。</li><li>堆的使用效率：鱼与熊掌不可兼得，堆使用效率和吞吐量、最大暂停时间是不可能同时满足的。即可用的堆越大，GC运行越快；相反，想要利用有限的堆，GC花费的时间就越长。</li><li>访问的局部性：在存储器的层级构造中，我们知道越是高速存取的存储器容量会越小（具体可以参看我写的存储器那篇文章）。由于程序的局部性原理，将经常用到的数据放在堆中较近的位置，可以提高程序的运行效率。</li></ol><h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>引用计数法就是给每个对象一个引用计数器，每当有一个地方引用它时，计数器就会加1；当引用失效时，计数器的值就会减1；任何时刻计数器的值为0的对象就是不可能再被使用的。</p><p>这个引用计数法时没有被 Java 所使用的，但是 python 有使用到它。而且最原始的引用计数法没有用到 GC Roots。</p><blockquote><p>在Python中 del 语句删除名称，而不是对象。del 命令可能会导致对象被当做垃圾回收，但是仅当删除的变量保存的是对象的最后一个引用，或者无法得到对象时。</p><blockquote><p>有个<code>__del__</code>特殊方法，但是它不会销毁实例，不应该在代码中调用。即将销毁实例时，Python解释器会调用<code>__del__</code>方法，给实例最后的机会，释放外部资源。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> weakrefs1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>s2 <span class="token operator">=</span> s1<span class="token keyword">def</span> <span class="token function">bye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Gone with the wind...'</span><span class="token punctuation">)</span>ender <span class="token operator">=</span> weakref<span class="token punctuation">.</span>finalize<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> bye<span class="token punctuation">)</span>ender<span class="token punctuation">.</span>alive <span class="token comment"># True</span><span class="token keyword">del</span> s1ender<span class="token punctuation">.</span>alive <span class="token comment"># True</span>s2 <span class="token operator">=</span> <span class="token string">'spam'</span> <span class="token comment"># Gone with the wind...</span>ender<span class="token punctuation">.</span>alive <span class="token comment"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><footer><strong>[巴西]Luciano Ramalho [译]安道 吴珂</strong><cite>Fluent Python</cite></footer></blockquote><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><ol><li>可即时回收垃圾：在该方法中，每个对象始终知道自己是否有被引用，当被引用的数值为0时，对象马上可以把自己当作空闲空间链接到空闲链表。</li><li>最大暂停时间短。</li><li>没有必要沿着指针查找</li></ol></div><div class="tab-pane" id="优点-2"><ol><li>计数器值的增减处理非常繁重，影响性能</li><li>计算器需要占用很多位。</li><li>实现繁琐。</li><li><strong>循环引用无法回收</strong></li></ol></div></div></div><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h2><p>标记-清除算法是现代垃圾回收算法的思想基础。<br>标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。<br>当堆中的有效内存空间（available memory）被耗尽的时候，GC线程就会被触发并将程序暂停（stop the world），然后进行标记和清除。</p><ul><li>标记：遍历所有的GC Roots，然后将所有GC Roots可达的对象标记为存活的对象。</li><li>清除：将遍历堆中所有的对象，将没有标记的对象全部清除掉。</li></ul><p><img src="/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.png" alt="标记清除算法"></p><blockquote><p>为什么非要停止程序的运行呢？<br>当标记结束而未开始清除时，程序又新创建一个对象，这个对象由于没有被标记，所以会被CG线程清除，从而导致错误。</p></blockquote><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><ul><li>算法简单、容易实现</li><li>与保守式GC 算法兼容</li><li>清除算法不会移动对象，所以非常适合搭配保守式算法</li></ul></div><div class="tab-pane" id="优点-2"><ul><li>效率比较低（递归与全堆对象遍历），导致stop the world的时间比较长，导致用户体验差</li><li>这种方式清理出来的空闲内存是不连续的，会产生内存碎片。需要维护一个空闲列表</li></ul></div></div></div><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>复制算法（新生代的GC）是将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收。</p><p><img src="/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.png" alt="复制算法"><br>复制算法使得每次都只对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半，这个太要命了。所以复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费。<br>现在的商业虚拟机都采用这种收集算法来回收新生代，新生代中的对象98%都是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是<mark class="label primary">将内存分为一块比较大的Eden空间和两块较小的Survivor空间</mark>，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。<br>当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖于老年代进行分配担保，所以大对象直接进入老年代。整个过程如下图所示：<br><img src="/%E5%A4%A7%E5%AF%B9%E8%B1%A1%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3.png" alt="大对象直接进入老年代"><br>上图中，绿色箭头的位置代表的是大对象，大对象直接进入老年代。</p><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><p>没有标记和清除过程,实现简单,运行高效。<br>复制过去以后保证空间的连续性,不会发生碎片化。<br>优秀的吞吐量。<br>可实现高速分配：复制算法不用使用空闲链表。这是因为分块是连续的内存空间，因此，调用这个分块的大小，只需要这个分块大小不小于所申请的大小，移动指针进行分配即可。<br>与缓存兼容。</p></div><div class="tab-pane" id="优点-2"><p>此算法的缺点也是很明显的,就是需要两倍的内存空间。<br>对于G1这种分拆成大量region的GC,复制而不是移动,意味着GC需要维护region之间对象引用关系,不管是内存占用或者时间开销也不小。<br>堆的使用效率低下<br>不兼容保守式GC算法</p></div></div></div><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><blockquote><p>如果在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选中这种算法。</p></blockquote><p>标记-压缩算法适合用于存活对象较多的场合，如老年代。它在标记-清除算法的基础上做了一些优化。和标记-清除算法一样，标记-压缩算法也首先需要从根节点开始，对所有可达对象做一次标记；但之后，它并不简单的清理未标记的对象，而是将所有的存活对象压缩到内存的一端；之后，清理边界外所有的空间。<br><img src="/%E6%A0%87%E8%AE%B0-%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95.png" alt="标记-压缩算法"></p><ul><li>标记：它的第一个阶段与标记&#x2F;清除算法是一模一样的，均是遍历GC Roots，然后将存活的对象标记。</li><li>整理：移动所有存活的对象，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。<br>上图中可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</li></ul><div class="tabs" id="优点"><ul class="nav-tabs"><li class="tab active"><a href="#优点-1">优点</a></li><li class="tab"><a href="#优点-2">缺点</a></li></ul><div class="tab-content"><div class="tab-pane active" id="优点-1"><p>弥补 标记&#x2F;清除算法 当中内存区域分散的缺点<br>消除了复制算法当中内存减半的高额代价。</p></div><div class="tab-pane" id="优点-2"><p>效率也不高。不仅要标记所有存活对象，还要整理所有存活对象的引用地址。从效率上来说，标记&#x2F;整理算法要低于复制算法。</p></div></div></div><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>效率：复制算法&gt;标记&#x2F;整理算法&gt;标记&#x2F;清除算法（此处的效率只是简单的对比时间复杂度，实际情况不一定如此）。<br>内存整齐度：复制算法&#x3D;标记&#x2F;整理算法&gt;标记&#x2F;清除算法。<br>内存利用率：标记&#x2F;整理算法&#x3D;标记&#x2F;清除算法&gt;复制算法。</p><ul><li>注1：可以看到标记&#x2F;清除算法是比较落后的算法了，但是后两种算法却是在此基础上建立的。</li><li>注2：时间与空间不可兼得。</li></ul><h2 id="分代收集算法：（新生代的GC-老年代的GC）"><a href="#分代收集算法：（新生代的GC-老年代的GC）" class="headerlink" title="分代收集算法：（新生代的GC+老年代的GC）"></a>分代收集算法：（新生代的GC+老年代的GC）</h2><p>当前商业虚拟机的GC都是采用的“分代收集算法”，这并不是什么新的思想，只是根据对象的存活周期的不同将内存划分为几块儿。一般是把Java堆分为新生代和老年代：短命对象归为新生代，长命对象归为老年代。</p><ul><li>少量对象存活，适合复制算法：在新生代中，每次GC时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成GC。</li><li>大量对象存活，适合用标记-清理&#x2F;标记-整理：在老年代中，因为对象存活率高、没有额外空间对他进行分配担保，就必须使用“标记-清理”&#x2F;“标记-整理”算法进行GC。</li></ul><p>注：老年代的对象中，有一小部分是因为在新生代回收时，老年代做担保，进来的对象；绝大部分对象是因为很多次GC都没有被回收掉而进入老年代。</p><h2 id="保守式GC与准确式GC"><a href="#保守式GC与准确式GC" class="headerlink" title="保守式GC与准确式GC"></a>保守式GC与准确式GC</h2><h3 id="保守式GC"><a href="#保守式GC" class="headerlink" title="保守式GC"></a>保守式GC</h3><p>所谓保守式GC就是“不能识别指针和非指针的GC”。<br>对于寄存器、调用栈、全局变量空间来说，都是不明确的根。例如调用栈中，装着函数内的局部变量和参数值。而局部变量，如C语言中的int、double这样就是非指针，但是也会有像void*这样的指针。<br>那么保守式GC会怎么检查不明确的根呢？1、是不是被正确对齐的值？（在32位CPU的情况下，为4的倍数）2、是不是指着堆内？3、是不是指向对象的开头？当然，这些只是基本的检查项目。<br>上面的检查方法会将一些非指针识别成指针。例如一个数值和一个地址，它们两个值相等，这个时候，那个值也可以被识别成指针。<br>保守式GC的优点是语言处理程序不依赖与GC。缺点为识别指针和非指针需要付出成本、错误识别指针会压迫堆、能够使用的GC算法有限。例如GC复制算法就不能使用，因为其可能会将非指针重写。</p><h3 id="准确式GC"><a href="#准确式GC" class="headerlink" title="准确式GC"></a>准确式GC</h3><p>准确式GC能够正确识别指针和非指针的GC。正确的根的创建方法是依赖于语言处理程序的实现的。我们可以通过打标签、不把寄存器和栈等当作根的方法来实现。<br>其优点就是完全能够识别指针，能够使用复制算法等需要移动对象的算法。但是在创建准确式GC时，语言处理程序必须对GC进行一些支援，而且创建正确的根就必须付出一定的代价。<br>其实我们垃圾回收机的实现都不是仅仅用哪一种回收算法，都是将几个结合使用，特别是分代算法，后面我们会详细的介绍。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍-GC&quot;&gt;&lt;a href=&quot;#介绍-GC&quot; class=&quot;headerlink&quot; title=&quot;介绍 GC&quot;&gt;&lt;/a&gt;介绍 GC&lt;/h2&gt;&lt;p&gt;GC(Garbage Collection , 垃圾收集)是将程序运行过程中产生的一些无用的对象占用的空间进行释放，避免 OOM(Out Of Memory , 内存溢出)。&lt;br&gt;常用的GC算法有&lt;code&gt;引用计数算法&lt;/code&gt;、&lt;code&gt;标记-清除算法&lt;/code&gt;、&lt;code&gt;复制算法&lt;/code&gt;、&lt;code&gt;标记-整理算法&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Python多进程</title>
    <link href="https://blog.simon7.top/20200831/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://blog.simon7.top/20200831/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</id>
    <published>2020-08-31T02:07:36.000Z</published>
    <updated>2020-08-31T02:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>multiprocessing</code> 是一个支持使用与 <code>threading</code> 模块类似的 <code>API</code> 来产生进程的包。<br><code>multiprocessing</code> 包同时提供了本地和远程并发操作，通过使用子进程而非线程有效地绕过了 <em>全局解释器锁</em>。</p><span id="more"></span><p>因此，<code>multiprocessing</code> 模块允许程序员充分利用给定机器上的多个处理器。 它在 <code>Unix</code> 和 <code>Windows</code> 上均可运行。<br><code>multiprocessing</code> 模块还引入了 <code>Pool</code> 对象，它提供了一种快捷的方法，赋予函数并行化处理一系列输入值的能力，可以将输入数据分配给不同进程处理（数据并行）。</p><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>通过创建一个 <code>Process</code> 对象然后调用它的 <code>start()</code> 方法来生成进程。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue 队列"></a>Queue 队列</h2><p>进程之间的通信通道之一</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># prints "[42, None, 'hello']"</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pipe-管道"><a href="#Pipe-管道" class="headerlink" title="Pipe 管道"></a>Pipe 管道</h2><p>进程之间的通信通道之一，返回一个由管道连接的连接对象，默认情况下是双工（双向）。<br>返回的两个连接对象表示管道的两端。每个连接对象都有 <code>send()</code> 和 <code>recv()</code> 方法（相互之间的）。<br>{ note waring no-icon}<br>请注意，如果两个进程（或线程）同时尝试读取或写入管道的<em>同一</em>端，则管道中的数据可能会损坏。当然，在不同进程中同时使用管道的不同端的情况下不存在损坏的风险。<br>{ endnote}</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Pipe<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parent_conn<span class="token punctuation">,</span> child_conn <span class="token operator">=</span> Pipe<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>child_conn<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>parent_conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># prints "[42, None, 'hello']"</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进程间同步"><a href="#进程间同步" class="headerlink" title="进程间同步"></a>进程间同步</h2><p>使用锁来确保一次只有一个进程打印到标准输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Lock<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        l<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进程间共享状态"><a href="#进程间共享状态" class="headerlink" title="进程间共享状态"></a>进程间共享状态</h2><h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p>可以使用 <code>Value</code> 或 <code>Array</code> 将数据存储在共享内存映射中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Value<span class="token punctuation">,</span> Array<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">3.1415927</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> Value<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span>    arr <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token comment"># 3.1415927</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 <code>num</code> 和 <code>arr</code> 时使用的 <code>&#39;d&#39;</code> 和 <code>&#39;i&#39;</code> 参数是 <code>array</code> 模块使用的类型的 <code>typecode</code> ： <code>&#39;d&#39;</code> 表示双精度浮点数， <code>&#39;i&#39;</code> 表示有符号整数。这些共享对象将是进程和线程安全的。为了更灵活地使用共享内存，可以使用 <code>multiprocessing.sharedctypes</code> 模块，该模块支持创建从共享内存分配的任意<code>ctypes</code>对象。</p><h3 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h3><p>由 <code>Manager()</code> 返回的管理器对象控制一个服务进程，该进程保存Python对象并允许其他进程使用代理操作它们。<br><code>Manager()</code> 返回的管理器支持类型： <code>list</code> 、 <code>dict</code> 、 <code>Namespace</code> 、 <code>Lock</code> 、 <code>RLock</code> 、 <code>Semaphore</code> 、 <code>BoundedSemaphore</code> 、 <code>Condition</code> 、 <code>Event</code> 、 <code>Barrier</code> 、 <code>Queue</code> 、 <code>Value</code> 和 <code>Array</code> 。例如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Manager<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'1'</span>    d<span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    d<span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    l<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> Manager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> manager<span class="token punctuation">:</span>        d <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        l <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>        <span class="token comment"># &#123;0.25: None, 1: '1', '2': 2&#125;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>        <span class="token comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用服务进程的管理器比使用共享内存对象更灵活，因为它们可以支持任意对象类型。此外，单个管理器可以通过网络由不同计算机上的进程共享。但是，它们比使用共享内存慢。</p><h2 id="使用工作进程-Pool"><a href="#使用工作进程-Pool" class="headerlink" title="使用工作进程 Pool()"></a>使用工作进程 Pool()</h2><p><code>Pool</code> 类表示一个工作进程池。它具有允许以几种不同方式将任务分配到工作进程的方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 开 4 个工作进程</span>    <span class="token keyword">with</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>        <span class="token comment"># print "[0, 1, 4,..., 81]"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 以任意顺序打印相同的数字</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> pool<span class="token punctuation">.</span>imap_unordered<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment"># evaluate "f(20)" asynchronously</span>        res <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># runs in *only* one process</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment"># prints "400"</span>        <span class="token comment"># evaluate "os.getpid()" asynchronously</span>        res <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># runs in *only* one process</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment"># prints the PID of that process</span>        <span class="token comment"># 异步启动多个 evaluations *可能*使用更多进程</span>        multiple_results <span class="token operator">=</span> <span class="token punctuation">[</span>pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> res <span class="token keyword">in</span> multiple_results<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 使一个进程 sleep 10 秒</span>        res <span class="token operator">=</span> pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> TimeoutError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我们得到一个 multiprocessing.TimeoutError"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"目前，pool 仍然可供更多工作"</span><span class="token punctuation">)</span>    <span class="token comment"># exiting the 'with'-block has stopped the pool</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"现在 pool 已关闭，不再可用"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>{ note info }<br>参数 <code>processes</code> 默认大小是CPU的核数,<br>map(func, iterator) 获取结果，参数 func 是进程执行的函数，iterator 是可迭代对象<br>特点：保持阻塞直到获得结果，对于很长的迭代对象，可能消耗很多内存，可以考虑使用 imap() 或 imap_unordered() 并且显示指定 chunksize 以提升效率。<br>apply_async(func[, args]) 获取结果，参数 func 是进程执行的函数，args 是可迭代对象<br>{ endnote }</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;multiprocessing&lt;/code&gt; 是一个支持使用与 &lt;code&gt;threading&lt;/code&gt; 模块类似的 &lt;code&gt;API&lt;/code&gt; 来产生进程的包。&lt;br&gt;&lt;code&gt;multiprocessing&lt;/code&gt; 包同时提供了本地和远程并发操作，通过使用子进程而非线程有效地绕过了 &lt;em&gt;全局解释器锁&lt;/em&gt;。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Scoop 包管理器</title>
    <link href="https://blog.simon7.top/20200815/scoop-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>https://blog.simon7.top/20200815/scoop-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</id>
    <published>2020-08-15T07:20:09.000Z</published>
    <updated>2020-08-15T07:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Scoop</code>是一个<code>Windows</code>下的包管理器，完全免费，依赖于<code>Github</code>。</p><span id="more"></span><h2 id="获得-Scoop-包管理器"><a href="#获得-Scoop-包管理器" class="headerlink" title="获得 Scoop 包管理器"></a>获得 Scoop 包管理器</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 准备将 Scoop 本体安装到已定义目录</span><span class="token variable">$env</span>:SCOOP=<span class="token string">'D:\Scoop'</span><span class="token comment"># 先添加用户级别的环境变量 SCOOP</span><span class="token namespace">[environment]</span>::setEnvironmentVariable<span class="token punctuation">(</span><span class="token string">'SCOOP'</span><span class="token punctuation">,</span><span class="token variable">$env</span>:SCOOP<span class="token punctuation">,</span><span class="token string">'User'</span><span class="token punctuation">)</span><span class="token comment"># 允许本地脚本的执行：</span><span class="token function">set-executionpolicy</span> remotesigned <span class="token operator">-</span>scope currentuser<span class="token comment"># 安装 Scoop：</span><span class="token function">Invoke-Expression</span> <span class="token punctuation">(</span><span class="token function">New-Object</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>WebClient<span class="token punctuation">)</span><span class="token punctuation">.</span>DownloadString<span class="token punctuation">(</span><span class="token string">'https://get.scoop.sh'</span><span class="token punctuation">)</span><span class="token comment"># 或者更短</span><span class="token function">iwr</span> <span class="token operator">-</span>useb get<span class="token punctuation">.</span>scoop<span class="token punctuation">.</span>sh <span class="token punctuation">|</span> <span class="token function">iex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note warning no-icon"><p>应注意以下几点</p><ul><li>用户名不含中文字符</li><li>能正常、快速的访问 GitHub 并下载上面的资源</li><li>如果下载scoop的过程中断，那么必须先删除(C:\Users\&lt;user&gt;\scoop)文件夹，再执行以上命令安装。</li><li>Windows 7 SP1+ &#x2F; Windows Server 2008+</li><li>PowerShell 3+</li><li>.NET Framework 4.5+</li></ul><p>若Powershell或.NET Franmework版本过旧，更新后重启即可。<br>若不清楚版本号，可<code>Win+R</code>运行<code>powershell</code>，输入以下命令获取版本号。</p><pre class="line-numbers language-none"><code class="language-none">$PSVersionTable.PSVersion.Major   #查看Powershell版本$PSVersionTable.CLRVersion.Major  #查看.NET Framework版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="对Scoop管理器的操作"><a href="#对Scoop管理器的操作" class="headerlink" title="对Scoop管理器的操作"></a>对Scoop管理器的操作</h2><ul><li>修改默认全局安装路径</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$env</span>:SCOOP_GLOBAL=<span class="token string">'D:\GlobalScoopApps'</span><span class="token namespace">[environment]</span>::setEnvironmentVariable<span class="token punctuation">(</span><span class="token string">'SCOOP_GLOBAL'</span><span class="token punctuation">,</span><span class="token variable">$env</span>:SCOOP_GLOBAL<span class="token punctuation">,</span><span class="token string">'Machine'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更新 Scoop</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scoop update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>卸载 Scoop</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scoop uninstall scoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="管理仓库"><a href="#管理仓库" class="headerlink" title="管理仓库"></a>管理仓库</h2><p><code>Scoop</code> 默认使用的是 <code>main</code> 仓库，安装APP之前，可能需要先进行搜索<code>scoop search &lt;APP&gt;</code>，如果没有的话那就需要使用其他的仓库。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查看可用的仓库</span>scoop bucket known<span class="token comment"># 添加一个仓库</span>scoop bucket add &lt;bucket_name:extras><span class="token comment"># 查看已添加的仓库</span>scoop bucket list<span class="token comment"># 更新</span>scoop update <span class="token operator">*</span><span class="token comment"># 删除</span>scoop bucket <span class="token function">rm</span> &lt;bucket_name><span class="token comment"># 添加第三方 bucket</span>scoop bucket add &lt;bucketname> https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/xxx/xxx<span class="token comment"># 安装APP</span>scoop install &lt;bucketname><span class="token operator">/</span>&lt;app>···<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bucket 排行榜 </p><ul><li><p><a target="_blank" rel="noopener" href="https://rasa.github.io/scoop-directory/by-score.html">链接1</a></p></li><li><p><a target="_blank" rel="noopener" href="https://scoop.netlify.app/buckets/">链接2</a></p></li><li><p>main ： 默认的大仓库 </p></li><li><p>extras ： 常用，诸多有用的软件都在里面。地址 <a target="_blank" rel="noopener" href="https://github.com/lukesampson/scoop-extras/tree/master/bucket">lukesampson&#x2F;scoop-extras</a></p></li><li><p>nirsoft ： NirSoft 开发的小工具的安装合集，包括系统工具、网络工具、密码恢复等</p><ul><li>地址 <a target="_blank" rel="noopener" href="https://github.com/kodybrown/scoop-nirsoft">kodybrown&#x2F;scoop-nirsoft</a></li><li>官网地址 <a target="_blank" rel="noopener" href="https://www.nirsoft.net/">NirSoft</a></li></ul></li><li><p>dorado ： 添加了一些国内的app，比如 qqplayer 👍🏻️ <a target="_blank" rel="noopener" href="https://github.com/h404bi/dorado">h404bi&#x2F;dorado</a></p></li><li><p>ash258 ： <a target="_blank" rel="noopener" href="https://github.com/Ash258/scoop-Ash258">Ash258&#x2F;scoop-Ash258</a></p></li><li><p>nerd-fonts ： 编程字体一览无遗 <nonportable></p></li><li><p>nonportable ： 收录神奇的UWP应用 windows平台应用</p></li><li><p>versions ： 收录软件包的历史版本</p></li><li><p>java</p></li></ul><div class="note info no-icon"><p>仓库的多少影响搜索软件包的搜索结果、搜索速度、「一键更新」的速度、清理的速度。所以收录&#x2F;订阅必要的软件仓库即可，也不必盲目添加。</p></div><h2 id="使用-Scoop-管理包"><a href="#使用-Scoop-管理包" class="headerlink" title="使用 Scoop 管理包"></a>使用 Scoop 管理包</h2><ul><li>安装软件，参数<code>-g</code>是在全局下安装</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 安装</span>scoop install <span class="token operator">-</span>g &lt;app><span class="token comment"># 查看</span>scoop list<span class="token comment"># 更新指定APP</span>scoop update <span class="token operator">-</span>g &lt;app><span class="token comment"># 更新所有APP 包括全局</span>scoop update <span class="token operator">-</span>g <span class="token operator">*</span><span class="token comment"># 卸载</span>scoop uninstall <span class="token operator">-</span>g &lt;app><span class="token comment"># 卸载并删除配置文件</span>scoop uninstall <span class="token operator">-</span><span class="token function">gp</span> &lt;app><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>清理安装包缓存</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 显示安装包的缓存</span>scoop cache show<span class="token comment"># 删除 指定APP的安装包</span>scoop cache <span class="token function">rm</span> &lt;app><span class="token comment"># 删除所有APP安装包</span>scoop cache <span class="token function">rm</span> <span class="token operator">*</span><span class="token comment"># 禁用安装包缓存 -k 或 --no-cache</span>scoop install <span class="token operator">-</span>k &lt;app>scoop update <span class="token operator">-</span>k <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除旧版本APP</p></li></ul><p>由于自身的特性（滚动更新，当更新时是立刻拉取最新的commit）可能会导致程序异常，所以当软件被更新后 Scoop 还会保留软件的旧版本，更新软件后可以通过 scoop cleanup 命令进行删除。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 删除指定APP旧版本</span>scoop cleanup &lt;app><span class="token comment"># 删除所有APP旧版本</span>scoop cleanup <span class="token operator">*</span><span class="token comment"># 不仅删除所有APP旧版本，也包括缓存的安装包</span>scoop cleanup <span class="token operator">-</span>k <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="推荐软件"><a href="#推荐软件" class="headerlink" title="推荐软件"></a>推荐软件</h2><p>必装： </p><ul><li>7zip</li><li>git</li><li>aria2 # 安装aria2后，scoop会自动调用aria2进行多线程下载以加速下载</li><li>anaconda3</li><li>curl</li></ul><p>可选：</p><ul><li>vscode </li><li>mactype-np # 装机必备的字体优化工具</li><li>motrix # 开源美观的下载工具</li><li>potplayer # 超强的视频播放器</li><li>quicklook # 快速预览工具</li><li>snipaste # 大名鼎鼎的截图工具</li><li>typora # 久负盛名的 Markdown 编辑器</li><li>windows-terminal # windows官方的终端应用</li><li>fluent-terminal-np # Windows平台终端工具</li><li>sudo</li><li>gcc</li><li>vim</li></ul><p>还有：</p><ul><li>gimp </li><li>inkscape </li><li>latex </li><li>calibre </li><li>zotero</li></ul><h2 id="加速下载"><a href="#加速下载" class="headerlink" title="加速下载"></a>加速下载</h2><p>在使用scoop安装aria2后，scoop会自动调用aria2进行多线程下载以加速下载：</p><pre class="line-numbers language-none"><code class="language-none">scoop install aria2# 打开16线程（aria2编译版本默认最高线程为16，需要更高的请自行编译）：scoop config aria2-max-connection-per-server 16scoop config aria2-split 16scoop config aria2-min-split-size 1M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 添加 nerd-fonts 仓库</span>scoop bucket add nerd-fonts<span class="token comment"># 搜索字体</span>scoop search <span class="token string">"-NF"</span><span class="token comment"># 安装字体</span>sudo scoop install FiraCode-NF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>如果不是以管理员的身份运行PowerShell，常常会出现一些错误。此时sudo来了。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scoop install <span class="token operator">-</span>g sudosudo scoop install <span class="token operator">-</span>g &lt;app><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="1-添加extras失败"><a href="#1-添加extras失败" class="headerlink" title="1. 添加extras失败"></a>1. 添加extras失败</h3><p>使用命令<code>scoop bucket add extras</code>添加仓库时出现错误：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Checking repo<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> okefatal: the remote <span class="token keyword">end</span> hung up unexpectedlyrror: RPC failed<span class="token punctuation">;</span> curl 18 transfer closed with outstanding read <span class="token keyword">data</span> remainingfatal: early EOFfatal: index-pack failedThe extras bucket was added successfully<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然提示添加成功，但在安装<code>anaconda3</code>软件时出现：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Updating Scoop<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Updating <span class="token string">'extras'</span> bucket<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fatal: not a git repository <span class="token punctuation">(</span>or any of the parent directories<span class="token punctuation">)</span>: <span class="token punctuation">.</span>gitfatal: not a git repository <span class="token punctuation">(</span>or any of the parent directories<span class="token punctuation">)</span>: <span class="token punctuation">.</span>gitfatal: not a git repository <span class="token punctuation">(</span>or any of the parent directories<span class="token punctuation">)</span>: <span class="token punctuation">.</span>gitUpdating <span class="token string">'main'</span> bucket<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">*</span> 9d903fc3 git-up: Update to version 2<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0                              9 hours agoScoop was updated successfully!Couldn<span class="token string">'t find manifest for '</span>anaconda3'<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来是文件夹里缺少一些必要的东西，于是去查看仓库所在路径(C:\Users\&lt;user&gt;\scoop\buckets)，发现<code>extras</code>只是一个空文件夹，为此在网络上搜罗解决办法：</p><ul><li><del>说是缓冲区溢出，需要执行<code>git config --global http.postBuffer 524288000</code>，无果！</del></li><li><del>说是网络太慢，需要执行<code>git config --global http.lowSpeedLimit 0</code>和<code>git config --global http.lowSpeedTime 999999</code>，无果！</del><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Checking repo<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> okefrror: RPC failed<span class="token punctuation">;</span> curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL<span class="token punctuation">,</span> errno 10054fatal: the remote <span class="token keyword">end</span> hung up unexpectedlyatal: early EOFfatal: index-pack failedThe extras bucket was added successfully<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><del>需要执行<code>git config --global http.sslVerify &quot;false&quot;</code>，无果！</del><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Checking repo<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> okefrror: RPC failed<span class="token punctuation">;</span> curl 18 transfer closed with outstanding read <span class="token keyword">data</span> remainingatal: the remote <span class="token keyword">end</span> hung up unexpectedlyfatal: early EOFfatal: index-pack failedThe extras bucket was added successfully<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>需要执行<code>git clone --depth=1 https://github.com/lukesampson/scoop-extras.git</code>，<strong>成功！！</strong><br>这里是先找到<code>extras</code>仓库分支，然后在路径(C:\Users\&lt;user&gt;\scoop)下<code>clone</code>这个分支，再修改下这个下载下来的文件夹的名称为<code>extras</code>，就可以正常使用了。<blockquote><p>注：<code>--depth=1</code>参数是指只克隆最近一次commit，只会把默认分支clone下来。对不是参与整个项目的开发工作的我们来说问题不大。</p></blockquote></li></ul><hr><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a target="_blank" rel="noopener" href="https://scoop.sh/">Scoop 官网</a></li><li><a target="_blank" rel="noopener" href="https://github.com/lukesampson/scoop/wiki/Quick-Start">Quick Start On GitHub</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Scoop&lt;/code&gt;是一个&lt;code&gt;Windows&lt;/code&gt;下的包管理器，完全免费，依赖于&lt;code&gt;Github&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="软件" scheme="https://blog.simon7.top/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="scoop" scheme="https://blog.simon7.top/tags/scoop/"/>
    
  </entry>
  
  <entry>
    <title>Python日期时间</title>
    <link href="https://blog.simon7.top/20200721/python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <id>https://blog.simon7.top/20200721/python%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</id>
    <published>2020-07-21T06:39:08.000Z</published>
    <updated>2020-07-21T06:39:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>python 内置的几个关于时间的模块，<code>time</code> <code>timeit</code> <code>datetime</code> <code>calendar</code></p><span id="more"></span><hr><h2 id="time-模块"><a href="#time-模块" class="headerlink" title="time 模块"></a>time 模块</h2><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>time 模块</span></div><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># time 模块</span><span class="token keyword">import</span> time<span class="token comment"># 1. time.time() </span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># time.time() 返回当前时间戳</span><span class="token comment"># >: 1624126357</span><span class="token comment"># 2. time.localtime() </span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># time.localtime() 返回当前时间结构元组</span><span class="token comment"># >: time.struct_time(tm_year=2021, tm_mon=6, tm_mday=20, tm_hour=2, tm_min=12, tm_sec=37, tm_wday=6, tm_yday=171, tm_isdst=0)</span><span class="token comment"># 3. time.ctime()  时间戳->日期</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># time.ctime() 返回当前日期</span><span class="token comment"># >: Sun Jun 20 02:12:37 2021</span><span class="token comment"># 4. time.asctime() 结构元组->日期</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># time.asctime() 返回一个可读的形式</span><span class="token comment"># >: Sun Jun 20 02:12:37 2021</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token number">1624126357</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 返回该时间戳的日期</span><span class="token comment"># >: Sun Jun 20 02:12:37 2021</span><span class="token comment"># 5. tiem.gmtime() 时间戳->结构元组</span><span class="token keyword">print</span><span class="token punctuation">(</span>tiem<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token number">1624126357.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># </span><span class="token comment"># >: time.struct_time(tm_year=2021, tm_mon=6, tm_mday=20, tm_hour=2, tm_min=12, tm_sec=37, tm_wday=6, tm_yday=171, tm_isdst=0)</span><span class="token comment"># 6. time.mktime() 结构元组->时间戳</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># time.mktime() 返回时间结构元组的时间戳</span><span class="token comment"># >: 1624126357.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token number">1624126357</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 返回传入的时间戳的时间结构元组</span><span class="token comment"># >: time.struct_time(tm_year=2021, tm_mon=6, tm_mday=20, tm_hour=2, tm_min=12, tm_sec=37, tm_wday=6, tm_yday=171, tm_isdst=0)</span><span class="token comment"># 7. time.strftime() 时间元组->指定的格式</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># time.strftime() 格式化输出当前时间</span><span class="token comment"># 8. time.strptime() 指定的格式->时间元组</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">"30 Nov 00"</span><span class="token punctuation">,</span> <span class="token string">"%d %b %y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># >: time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1) </span><span class="token comment"># 时间日期格式化符号：https://www.runoob.com/python/att-time-strptime.html</span><span class="token comment"># 9. time.sleep(:int)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># time.sleep(2) selenium中常用的休眠，休眠2秒</span><span class="token comment"># 10. time.perf_counter()</span>T1 <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#______假设下面是程序部分______</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>T2 <span class="token operator">=</span>time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序运行时间:%s毫秒'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>T2 <span class="token operator">-</span> T1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 11. time.process_time()</span>T1 <span class="token operator">=</span> time<span class="token punctuation">.</span>process_time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># time.process_time() 不包括sleep()休眠时间；需要调用两次，做差值</span><span class="token comment">#______假设下面是程序部分______</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>T2 <span class="token operator">=</span>time<span class="token punctuation">.</span>process_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序在CPU运行时间:%s毫秒'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>T2 <span class="token operator">-</span> T1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="timeit-模块"><a href="#timeit-模块" class="headerlink" title="timeit 模块"></a>timeit 模块</h2><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>timeit 模块</span></div><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># timeit 模块 性能分析</span><span class="token keyword">import</span> timeit<span class="token comment"># 待测试的函数</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># stmt 需要测试的函数或语句，字符串形式</span><span class="token comment"># setup 运行的环境，本例子中表示 if __name__ == '__main__':</span><span class="token comment"># number 被测试的函数或语句，执行的次数，本例表示执行100000次add()。省缺则默认是10000次</span><span class="token comment"># repeat 测试做100次</span><span class="token comment"># 综上：此函数表示 测试 在if __name__ == '__main__'的条件下，执行100000次add()消耗的时间，并把这个测试做100次,并求出平均值</span>t <span class="token operator">=</span> timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span>stmt<span class="token operator">=</span><span class="token string">"add()"</span><span class="token punctuation">,</span> setup<span class="token operator">=</span><span class="token string">"from __main__ import add"</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span>t <span class="token operator">=</span> timeit<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>stmt<span class="token operator">=</span><span class="token string">"add()"</span><span class="token punctuation">,</span> setup<span class="token operator">=</span><span class="token string">"from __main__ import add"</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="datetime-模块"><a href="#datetime-模块" class="headerlink" title="datetime 模块"></a>datetime 模块</h2><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>datetime 模块</span></div><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># datetime 模块</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token comment"># 1. datetime.now()</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># datetime.now() 返回当前日期和时间 [datetime 类型]</span><span class="token comment"># >: 2021-06-20 02:12:37</span><span class="token comment"># 2. datetime()</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># datetime() 返回指定日期和时间 [datetime 类型]</span><span class="token comment"># >: 2021-06-20 02:12:37.000006</span><span class="token comment"># 3. datetime().timestamp()</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># datetime().timestamp() [datetime 类型]转换为本地时区timestamp</span><span class="token comment"># >: 1624126357.000006</span><span class="token comment"># 4. datetime.fromtimestamp(t)</span>t <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># datetime.fromtimestamp(t) 本地时区timestamp[t]转换为[datetime 类型]</span><span class="token comment"># >: 2021-06-20 02:12:37.000006</span><span class="token comment"># 5. datetime.utcfromtimestamp(t)</span>t <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>utcfromtimestamp<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># datetime.utcfromtimestamp(t) UTC标准时区timestamp[t]转换为[datetime 类型]</span><span class="token comment"># >: 2021-06-19 18:12:37.000006</span><span class="token comment"># 6. strptime()</span><span class="token comment"># datetime.strptime() 字符串日期和时间转成[datetime 类型]</span><span class="token comment"># 格式说明: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">'2021-6-20 02:12:37'</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># >: 2021-06-20 02:12:37</span><span class="token comment"># 6. strftime()</span>dt <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''本地时间%c星期 , 月 , 日 , 日期 ,时:分:秒%A(%a), %B(%b) %d , %x , %X日期时间24小时制%d/%m/%y %H:%M:%S %z日期时间12小时制%Y-%m-%d %p. %I:%M:%S第 %j 天第 %U 个星期, 星期 %w [日始0-6]第 %W 个星期, 星期 %u [一始1-7]'''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># datetime.strftime() [datetime 类型]转成字符串日期和时间.</span><span class="token comment"># 7. timedelta </span><span class="token comment"># 对日期和时间进行加减,可以直接用+和-运算符</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedeltadt <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>dt <span class="token operator">=</span> dt <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 8. timezone</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token punctuation">,</span> timezonetz_utc_8 <span class="token operator">=</span> timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建时区UTC+8:00</span>now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>dt <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>tzinfo<span class="token operator">=</span>tz_utc_8<span class="token punctuation">)</span> <span class="token comment"># 强制设置为UTC+8:00</span><span class="token comment"># 9. astimezone</span>utc_dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>tzinfo<span class="token operator">=</span>timezone<span class="token punctuation">.</span>utc<span class="token punctuation">)</span> <span class="token comment"># 获取UTC时间，并强制设置时区为UTC+0:00:</span>bj_dt <span class="token operator">=</span> utc_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># astimezone()将转换时区为北京时间:</span>tokyo_dt <span class="token operator">=</span> utc_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将转换时区为东京时间</span>tokyo_dt2 <span class="token operator">=</span> bj_dt<span class="token punctuation">.</span>astimezone<span class="token punctuation">(</span>timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将bj_dt转换时区为东京时间</span><span class="token comment"># ** 假设你获取了用户输入的日期和时间如2015-1-21 9:01:30，以及一个时区信息如UTC+5:00，均是str，请编写一个函数将其转换为timestamp：</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> re<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timezone<span class="token punctuation">,</span> timedelta<span class="token keyword">def</span> <span class="token function">to_timestamp</span><span class="token punctuation">(</span>dt_str<span class="token punctuation">,</span> tz_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    i_utc <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span> <span class="token string">r'UTC(.*):00'</span><span class="token punctuation">,</span> tz_str<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tz_utc <span class="token operator">=</span> timezone<span class="token punctuation">(</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span>i_utc<span class="token punctuation">)</span><span class="token punctuation">)</span>    dt<span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>dt_str<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span>    dt <span class="token operator">=</span> dt<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>tzinfo<span class="token operator">=</span>tz_utc<span class="token punctuation">)</span> <span class="token comment"># 强制设置为UTC+X:00</span>    <span class="token keyword">return</span> dt<span class="token punctuation">.</span>timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 测试:</span>t1 <span class="token operator">=</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2015-6-1 08:10:30'</span><span class="token punctuation">,</span> <span class="token string">'UTC+7:00'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> t1 <span class="token operator">==</span> <span class="token number">1433121030.0</span><span class="token punctuation">,</span> t1t2 <span class="token operator">=</span> to_timestamp<span class="token punctuation">(</span><span class="token string">'2015-5-31 16:10:30'</span><span class="token punctuation">,</span> <span class="token string">'UTC-09:00'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> t2 <span class="token operator">==</span> <span class="token number">1433121030.0</span><span class="token punctuation">,</span> t2<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="calendar-模块"><a href="#calendar-模块" class="headerlink" title="calendar 模块"></a>calendar 模块</h2><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>calendar 模块</span></div><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># calendar 模块 处理年历和月历</span><span class="token keyword">import</span> calendar<span class="token comment"># 1. calendar.calendar(year,w=2,l=1,c=6) </span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>calendar<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3个月一行，间隔距离为c，每日宽度间隔为w字符，l是每星期行数。每行长度为21* W+18+2* C</span><span class="token comment"># 相当于 calendar.prcal(year,w=2,l=1,c=6)</span><span class="token comment"># 2. calendar.month(year,month,w=2,l=1)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。</span><span class="token comment"># 相当于 calendar.prmonth(year,month,w=2,l=1)</span><span class="token comment"># 3. calendar.weekday(year,month,day)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># calendar.weekday() 0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。</span><span class="token comment"># >: 6 # 解释：星期日</span><span class="token comment"># 4. calendar.firstweekday()</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>firstweekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># calendar.firstweekday() 返回当前每周起始日期的设置,默认返回0，即星期一</span><span class="token comment"># >: 0</span><span class="token comment"># 5. calendar.isleap(year)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># calendar.isleap(year) 闰年返回 True，否则为 false。</span><span class="token comment"># >: True</span><span class="token comment"># 6. calendar.leapdays(y1,y2)</span>calendar<span class="token punctuation">.</span>leapdays<span class="token punctuation">(</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">)</span> <span class="token comment"># 返回在[Y1，Y2)两年之间的闰年总数</span><span class="token comment"># >: 29</span><span class="token comment"># 7. calendar.monthrange(year,month)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>monthrange<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># >: (1,30) # 解释：1 表示 2021 年 6 月份的第一天是周一，30 表示 2021 年 6 月份总共有 30 天。</span><span class="token comment"># 8. calendar.setfirstweekday(weekday)</span>calendar<span class="token punctuation">.</span>setfirstweekday<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 设置每周的起始日期码。0（星期一）到6（星期日）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;python 内置的几个关于时间的模块，&lt;code&gt;time&lt;/code&gt; &lt;code&gt;timeit&lt;/code&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;code&gt;calendar&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://blog.simon7.top/categories/python/"/>
    
    
    <category term="python" scheme="https://blog.simon7.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 正则</title>
    <link href="https://blog.simon7.top/20200720/python-%E6%AD%A3%E5%88%99/"/>
    <id>https://blog.simon7.top/20200720/python-%E6%AD%A3%E5%88%99/</id>
    <published>2020-07-20T09:23:11.000Z</published>
    <updated>2020-07-20T09:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>python 正则表达式，导入<code>re</code>模块。</p><p><a target="_blank" rel="noopener" href="https://regexper.com/">正则表达式可视化</a><br><a target="_blank" rel="noopener" href="https://regexr.com/">对正则表达式进行解释</a></p><span id="more"></span><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table><thead><tr><th align="left">转义字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>\A</code></td><td align="left"><em>只匹配字符串开始。</em></td></tr><tr><td align="left"><code>\b</code></td><td align="left">匹配单词的词首和词尾,r<code>&#39;\bclass\b&#39;</code></td></tr><tr><td align="left"><code>\B</code></td><td align="left">匹配空字符串，但不能在词的开头或者结尾</td></tr><tr><td align="left"><code>\d</code></td><td align="left">匹配数字</td></tr><tr><td align="left"><code>\D</code></td><td align="left">匹配任何非十进制数字的字符</td></tr><tr><td align="left"><code>\s</code></td><td align="left">匹配<code>[ \t\n\r\f\v]</code>等空白符</td></tr><tr><td align="left"><code>\S</code></td><td align="left">匹配任何非空白字符</td></tr><tr><td align="left"><code>\w</code></td><td align="left">匹配数字或字母<code>[a-zA-Z0-9_]</code></td></tr><tr><td align="left"><code>\W</code></td><td align="left">匹配任何不是单词字符的字符。 这与 \w 正相反。<code>[^a-zA-Z0-9_]</code></td></tr><tr><td align="left"><code>\Z</code></td><td align="left">只匹配字符串尾</td></tr><tr><td align="left"><code>.</code></td><td align="left">匹配一个字符</td></tr><tr><td align="left"><code>[0-9a-zA-Z\_]</code></td><td align="left">匹配一个数字、字母或者下划线</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>*</code></td><td align="left">匹配0个或多个字符</td></tr><tr><td align="left"><code>+</code></td><td align="left">匹配1个或多个字符</td></tr><tr><td align="left"><code>?</code></td><td align="left">匹配0个或1个字符;非贪婪匹配，即尽可能少匹配</td></tr><tr><td align="left"><code>&#123;n&#125;</code></td><td align="left">匹配n个字符</td></tr><tr><td align="left"><code>&#123;n,m&#125;</code></td><td align="left">匹配n-m个字符</td></tr><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left"><code>A|B</code></td><td align="left">匹配A或B</td></tr><tr><td align="left"><code>^</code></td><td align="left">表示行的开头 等同<code>\A</code></td></tr><tr><td align="left"><code>$</code></td><td align="left">表示行的结束 等同<code>\Z</code></td></tr><tr><td align="left"><code>()</code></td><td align="left">表示分组</td></tr></tbody></table><h2 id="re函数"><a href="#re函数" class="headerlink" title="re函数"></a>re函数</h2><table><thead><tr><th align="left">re函数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>re.match()</code></td><td align="left">方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。</td></tr><tr><td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).groups(default=None)</code></td><td align="left">返回一个元组，包含所有匹配的子组，在样式中出现的从1到任意多的组合。 default 参数用于不参与匹配的情况，默认为 None。</td></tr><tr><td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).group([n])</code></td><td align="left">返回被 RE 匹配的字符串，默认n为0,等同<code>re.match(r&#39;&#39;,&#39;&#39;)[0]</code></td></tr><tr><td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).start()</code></td><td align="left">返回匹配开始的位置</td></tr><tr><td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).end()</code></td><td align="left">返回匹配结束的位置</td></tr><tr><td align="left"><code>re.match(r&#39;&#39;,&#39;&#39;).span()</code></td><td align="left">返回一个元组包含匹配 [开始,结束) 的位置</td></tr><tr><td align="left"><code>re.search(r&#39;&#39;,&#39;&#39;)</code></td><td align="left"></td></tr><tr><td align="left"><code>re.split(r&#39;\s+&#39;, &#39;a b   c&#39;)</code></td><td align="left">切分字符串</td></tr><tr><td align="left"><code>re.compile(r&#39;&#39;)</code></td><td align="left">预编译正则表达式</td></tr><tr><td align="left"><code>re.findall(r&#39;&#39;,&#39;&#39;)</code></td><td align="left">将所有匹配的结果作为元组组成列表</td></tr><tr><td align="left"><code>re.finditer(r&#39;&#39;,&#39;&#39;)</code></td><td align="left">将所有匹配的结果作为迭代器返回</td></tr><tr><td align="left"><code>re.sub(r&#39;&#39;, A, B, n))</code></td><td align="left">把B字符串中的匹配项替换成A字符串，匹配n次，默认为0即全部替换</td></tr></tbody></table><h2 id="编译标志"><a href="#编译标志" class="headerlink" title="编译标志"></a>编译标志</h2><table><thead><tr><th align="left">编译标志</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>re.S</code> &#x2F; [DOTALL]</td><td align="left">使 . 匹配包括换行在内的所有字符</td></tr><tr><td align="left"><code>re.I</code> &#x2F; [IGNORECASE]</td><td align="left">使匹配对大小写不敏感</td></tr><tr><td align="left"><code>re.M</code> &#x2F; [MULTILINE]</td><td align="left">多行匹配，影响 <code>^</code> 和 <code>$</code></td></tr><tr><td align="left"><code>re.L</code> &#x2F; [LOCALE]</td><td align="left">做本地化识别（locale-aware）匹配</td></tr><tr><td align="left"><code>re.X</code> &#x2F; [VERBOSE]</td><td align="left">更清晰地组织和缩进 RE，允许将注释<code>&quot;#&quot;</code>写入 RE，该符号不能在字符串或反斜杠之后</td></tr></tbody></table><h2 id="高级用法–？的使用"><a href="#高级用法–？的使用" class="headerlink" title="高级用法–？的使用"></a>高级用法–？的使用</h2><table><thead><tr><th align="left">(?…)</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>(?aiLmsux)</code></td><td align="left">正则表达式内的编译标志，<br>例子： <code>re.match(r&#39;(?i)(ab)c&#39;,&#39;aBc&#39;).group(1)</code></td></tr><tr><td align="left"><code>(?:...)</code></td><td align="left">正则括号的非捕获版本，可理解为忽略该分组，<br>例子： <code>re.match(r&#39;(?i:aB)&#39;,&#39;aB00&#39;).groups()</code></td></tr><tr><td align="left"><code>(?P&lt;name&gt;...)</code></td><td align="left">命名组合，引用组合的方式<br>1.正则式 <code>(?P=name)</code> 《&#x3D;&#x3D;》<code>\1</code> 。比如 <code>(?P&lt;name&gt;[&#39;&quot;]).*?(?P=name)</code> <br>2.处理匹配对象m， <code>m.group(&#39;name&#39;)</code> 等<br>3.传递到 <code>re.sub()</code> 里的 <code>repl</code> 参数中， <code>\g&lt;quote&gt;</code> 《&#x3D;&#x3D;》 <code>\g&lt;1&gt;</code> 《&#x3D;&#x3D;》 <code>\1</code></td></tr><tr><td align="left"><code>(?P=name)</code></td><td align="left">反向引用一个命名组合；<br>它匹配前面那个叫 name 的命名组中匹配到的串同样的字串。</td></tr><tr><td align="left"><code>(?#...)</code></td><td align="left">注释；里面的内容会被忽略。</td></tr><tr><td align="left"><code>(?=...)</code></td><td align="left">前瞻性断言，匹配时的判断条件，<br>比如 <code>hello (?=world)</code> 只有在后面是 <code>&#39;world&#39;</code> 的时候匹配 <code>&#39;hello &#39;</code></td></tr><tr><td align="left"><code>(?!...)</code></td><td align="left">否定超前断言，前视取反，<br>比如 <code>hello (?!world)</code> 只有在后面不是 <code>&#39;world&#39;</code> 的时候匹配 <code>&#39;hello &#39;</code></td></tr><tr><td align="left"><code>(?&lt;=...)</code></td><td align="left">肯定断言，正向后视断定</td></tr><tr><td align="left"><code>(?&lt;!...)</code></td><td align="left">否定后视断言，后视断定取非，</td></tr><tr><td align="left"><code>(?(id/name)yes-pattern|no-pattern)</code></td><td align="left">判断 <code>id</code> 或 <code>name</code> 存在。<br>比如， <code>(&lt;)?(\w+@\w+(?:\.\w+)+)(?(1)&gt;|$)</code> 是一个email样式匹配</td></tr></tbody></table><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><blockquote><p>来源：<a target="_blank" rel="noopener" href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017639890281664#%E5%B0%8F%E7%BB%93">廖雪峰的python教程</a></p></blockquote><h3 id="验证Email地址的正则表达式，"><a href="#验证Email地址的正则表达式，" class="headerlink" title="验证Email地址的正则表达式，"></a>验证Email地址的正则表达式，</h3><ul><li><code>someone@gmail.com</code></li><li><code>bill.gates@microsoft.com</code></li><li><code>&lt;someone@gmail.com&gt;</code></li></ul><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>代码参考</span></div><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># re 模块</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">is_valid_email</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'^[\w\.]+@[a-zA-Z]+\.com$'</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    <span class="token string">r'([\w]+(\.[\w]+)*@[\w]+(\.[\w]+)+)'</span>    <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> m <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">is_valid_email2</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""匹配'&lt;user@host.com>' 或 'user@host.com'    """</span>    m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'(&lt;)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)'</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> m <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token comment"># 测试:</span><span class="token keyword">assert</span> is_valid_email<span class="token punctuation">(</span><span class="token string">'someone@gmail.com'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> is_valid_email<span class="token punctuation">(</span><span class="token string">'bill.gates@microsoft.com'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token keyword">not</span> is_valid_email<span class="token punctuation">(</span><span class="token string">'bob#example.com'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token keyword">not</span> is_valid_email<span class="token punctuation">(</span><span class="token string">'mr-bob@example.com'</span><span class="token punctuation">)</span><span class="token keyword">assert</span> is_valid_email2<span class="token punctuation">(</span><span class="token string">'&lt;someone@gmail.com>'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可以提取出带名字的Email地址："><a href="#可以提取出带名字的Email地址：" class="headerlink" title="可以提取出带名字的Email地址："></a>可以提取出带名字的Email地址：</h3><ul><li><code>&lt;Tom Paris&gt; tom@voyager.org</code> &#x3D;&gt; <code>Tom Paris</code></li><li><code>bob@example.com</code> &#x3D;&gt; <code>bob</code></li></ul><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>代码参考</span></div><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token comment"># re 模块</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">name_of_email</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'\&lt;?([\w\s]+)\>?\s?(\w*)\@'</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">name_of_email2</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r'(&lt;)?([\w\s]+)(?(1)(?:> \w+))@'</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 测试:</span><span class="token keyword">assert</span> name_of_email<span class="token punctuation">(</span><span class="token string">'&lt;Tom Paris> tom@voyager.org'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'Tom Paris'</span><span class="token keyword">assert</span> name_of_email<span class="token punctuation">(</span><span class="token string">'tom@voyager.org'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'tom'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>匹配网页<br>(http[s]?:&#x2F;&#x2F;(?:[a-zA-Z]|[0-9]|[$-<em>@.&amp;+]|[!*,]|(?:%[0-9a-fA-F][0-9a-fA-F]))+)|([a-zA-Z]+.\w+.+[a-zA-Z0-9/</em>]+)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python 正则表达式，导入&lt;code&gt;re&lt;/code&gt;模块。&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://regexper.com/&quot;&gt;正则表达式可视化&lt;/a&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://regexr.com/&quot;&gt;对正则表达式进行解释&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://blog.simon7.top/tags/python/"/>
    
    <category term="re" scheme="https://blog.simon7.top/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>使用Heroku遇到的问题</title>
    <link href="https://blog.simon7.top/20200604/%E4%BD%BF%E7%94%A8heroku%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.simon7.top/20200604/%E4%BD%BF%E7%94%A8heroku%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-04T12:17:32.000Z</published>
    <updated>2020-06-04T12:17:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>Mezzanine</code>做了一个<a href="../Django%E7%9A%84CMS%E6%A1%86%E6%9E%B6">博客</a>，部署到<code>heroku</code>时遇到了一些问题，此篇以作记录。</p><span id="more"></span><h2 id="1-无法完成github项目的部署-H12错误"><a href="#1-无法完成github项目的部署-H12错误" class="headerlink" title="1. 无法完成github项目的部署-H12错误"></a>1. 无法完成github项目的部署-H12错误</h2><blockquote><p>项目根目录必须包含<code>app.json</code>、<code>requirements.txt</code>和<code>Procfile</code>，可选<code>Procfile.windows</code>和<code>runtime.txt</code>。</p></blockquote><pre class="line-numbers language-json" data-language="json"><div class="caption"><span>app.json</span></div><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"description"</span><span class="token punctuation">,</span>  <span class="token property">"image"</span><span class="token operator">:</span> <span class="token string">"heroku/python"</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token string">"https://github.com/YOURNAME/repository"</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"django"</span><span class="token punctuation">,</span> <span class="token string">"Mezzanine"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"addons"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"heroku-postgresql"</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"SECRET_KEY"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"The secret key for the Django application."</span><span class="token punctuation">,</span>      <span class="token property">"generator"</span><span class="token operator">:</span> <span class="token string">"secret"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"environments"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"test-setup"</span><span class="token operator">:</span> <span class="token string">"python manage.py collectstatic --noinput"</span><span class="token punctuation">,</span>        <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"python manage.py test"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>requirements.txt</span></div><code class="language-text">Mezzanine==4.3.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>Procfile</span></div><code class="language-text">web: python manage.py runserver 0.0.0.0:8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>Procfile.windows</span></div><code class="language-text">web: python manage.py runserver 0.0.0.0:8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text" data-language="text"><div class="caption"><span>requirements.txt</span></div><code class="language-text">python-3.7.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="2-Application-error"><a href="#2-Application-error" class="headerlink" title="2. Application error"></a>2. Application error</h2><blockquote><p>Error R10 (Boot timeout) -&gt; Web process failed to bind to $PORT within 60 seconds of launch</p></blockquote><p>也许是数据库的问题？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku create <span class="token punctuation">[</span>APP_NAME<span class="token punctuation">]</span> <span class="token comment"># 创建APP</span><span class="token function">git</span> push heroku master <span class="token comment"># 创建分支</span>heroku run python manage.py migrate <span class="token comment"># 远端生成数据库</span>heroku ps:scale <span class="token assign-left variable">web</span><span class="token operator">=</span><span class="token number">1</span>heroku <span class="token function">open</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note info"><p>在<code>requirement.txt</code>文件中加入<code>gunicorn</code>，使用这个库开启Web服务，修改项目目录下的<code>Procfile</code>文件（mblog是我的项目里应用的名称，在该应用下应该存在<code>wsgi.py</code>文件）</p><pre class="line-numbers language-bash" data-language="bash"><div class="caption"><span>Procfile</span></div><code class="language-bash">web: gunicorn mblog.wsgi --log-file -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="3-no-such-table-django-site"><a href="#3-no-such-table-django-site" class="headerlink" title="3. no such table: django_site"></a>3. no such table: django_site</h2><p>尝试生成远端数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku run python manage.py migrateheroku run python manage.py makemigrationsheroku run python manage.py createdb --noinputheroku run python manage.py syncdb <span class="token comment">#（在Django 1.9中已删除）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>setting.py</span></div><code class="language-python"><span class="token comment"># heroku 只支持postgrespool数据库 来自：https://www.jianshu.com/p/610c670eabed</span><span class="token keyword">import</span> dj_database_urlDATABASES<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dj_database_url<span class="token punctuation">.</span>config<span class="token punctuation">(</span><span class="token punctuation">)</span>···<span class="token keyword">import</span> django_herokudjango_heroku<span class="token punctuation">.</span>settings<span class="token punctuation">(</span><span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-如果看到发现变量不对可以使用如下命令打印变量"><a href="#4-如果看到发现变量不对可以使用如下命令打印变量" class="headerlink" title="4. 如果看到发现变量不对可以使用如下命令打印变量"></a>4. 如果看到发现变量不对可以使用如下命令打印变量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku run <span class="token builtin class-name">echo</span> <span class="token punctuation">\</span><span class="token variable">$JDBC_DATABASE_URL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-删除默认数据库，添加MySQL数据库"><a href="#5-删除默认数据库，添加MySQL数据库" class="headerlink" title="5. 删除默认数据库，添加MySQL数据库"></a>5. 删除默认数据库，添加MySQL数据库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">heroku addons:destroy heroku-postgresqlheroku addons:create cleardb:igniteheroku config <span class="token comment"># 过程中可以使用 config 命令查看数据库 URL 是否修改成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-postgresql-无法连接"><a href="#6-postgresql-无法连接" class="headerlink" title="6. postgresql 无法连接"></a>6. postgresql 无法连接</h2><p>错误类似于</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">could not connect to postgres error: no pg_hba.conf entry <span class="token keyword">for</span> <span class="token function">host</span> <span class="token string">"1.198.47.212"</span>, user <span class="token string">"ijhjecdqztyvfo"</span>, database <span class="token string">"d66rrjcr414em1"</span>, SSL off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法取自于<a target="_blank" rel="noopener" href="https://devcenter.heroku.com/articles/heroku-postgresql#connecting-in-node-js">Connecting in Node.js</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Client <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">connectionString</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">DATABASE_URL</span><span class="token punctuation">,</span>  <span class="token literal-property property">ssl</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rejectUnauthorized</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT table_schema,table_name FROM information_schema.tables;'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> res<span class="token punctuation">.</span>rows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  client<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note info"><p>如果指定<code>PGSSLMODE</code>配置变量，则可以省略<code>ssl</code> 配置对象: <code>heroku config:set PGSSLMODE=no-verify</code></p></div><h2 id="X-可能会用到的命令"><a href="#X-可能会用到的命令" class="headerlink" title="X. 可能会用到的命令"></a>X. 可能会用到的命令</h2><pre class="line-numbers language-none"><code class="language-none">python manage.py createsuperuser # 创建超级管理员，帐号登录 admin 后台# 将本地分支 master 提交到 heroku git add -ugit commit -m  &quot;commit&quot;git push heroku masterheroku run python manage.py collectstatic --noinput <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;Mezzanine&lt;/code&gt;做了一个&lt;a href=&quot;../Django%E7%9A%84CMS%E6%A1%86%E6%9E%B6&quot;&gt;博客&lt;/a&gt;，部署到&lt;code&gt;heroku&lt;/code&gt;时遇到了一些问题，此篇以作记录。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
